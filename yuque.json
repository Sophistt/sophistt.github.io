[
  {
    "id": 114050781,
    "slug": "ygkgqz4keso9hr2v",
    "title": "网络编程",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"gRMro\"></a>\n## HTTP\n<a name=\"bAzEn\"></a>\n### 错误码\n\n- 500：发生内部服务错误\n- 400：请求字段不支持\n- 401：鉴权失败\n",
    "body_draft": "<a name=\"gRMro\"></a>\n## HTTP\n<a name=\"bAzEn\"></a>\n### 错误码\n\n- 500：发生内部服务错误\n- 400：请求字段不支持\n- 401：鉴权失败\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"gRMro\"><span class=\"ne-text\">HTTP</span></h2><h3 id=\"bAzEn\"><span class=\"ne-text\">错误码</span></h3><ul class=\"ne-ul\"><li id=\"ue1d81592\"><span class=\"ne-text\">500：发生内部服务错误</span></li><li id=\"uc7ef0911\"><span class=\"ne-text\">400：请求字段不支持</span></li><li id=\"u9d56087a\"><span class=\"ne-text\">401：鉴权失败</span></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"gRMro\" id=\"gRMro\"><span data-lake-id=\"u8711224b\" id=\"u8711224b\">HTTP</span></h2><h3 data-lake-id=\"bAzEn\" id=\"bAzEn\"><span data-lake-id=\"uedd45792\" id=\"uedd45792\">错误码</span></h3><ul list=\"uc7dea077\"><li fid=\"ubfed33af\" data-lake-id=\"ue1d81592\" id=\"ue1d81592\"><span data-lake-id=\"u1f46d791\" id=\"u1f46d791\">500：发生内部服务错误</span></li><li fid=\"ubfed33af\" data-lake-id=\"uc7ef0911\" id=\"uc7ef0911\"><span data-lake-id=\"u55ac36a7\" id=\"u55ac36a7\">400：请求字段不支持</span></li><li fid=\"ubfed33af\" data-lake-id=\"u9d56087a\" id=\"u9d56087a\"><span data-lake-id=\"uc6cfa694\" id=\"uc6cfa694\">401：鉴权失败</span></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"gRMro\" id=\"gRMro\"><span data-lake-id=\"u8711224b\" id=\"u8711224b\">HTTP</span></h2><h3 data-lake-id=\"bAzEn\" id=\"bAzEn\"><span data-lake-id=\"uedd45792\" id=\"uedd45792\">错误码</span></h3><ul list=\"uc7dea077\"><li fid=\"ubfed33af\" data-lake-id=\"ue1d81592\" id=\"ue1d81592\"><span data-lake-id=\"u1f46d791\" id=\"u1f46d791\">500：发生内部服务错误</span></li><li fid=\"ubfed33af\" data-lake-id=\"uc7ef0911\" id=\"uc7ef0911\"><span data-lake-id=\"u55ac36a7\" id=\"u55ac36a7\">400：请求字段不支持</span></li><li fid=\"ubfed33af\" data-lake-id=\"u9d56087a\" id=\"u9d56087a\"><span data-lake-id=\"uc6cfa694\" id=\"uc6cfa694\">401：鉴权失败</span></li></ul>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-10T05:59:26.000Z",
    "deleted_at": null,
    "created_at": "2023-02-10T05:58:09.000Z",
    "updated_at": "2023-02-10T05:59:26.000Z",
    "published_at": "2023-02-10T05:59:26.000Z",
    "first_published_at": "2023-02-10T05:58:27.441Z",
    "word_count": 29,
    "cover": null,
    "description": "HTTP错误码500：发生内部服务错误400：请求字段不支持401：鉴权失败",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 114017744,
    "slug": "nqccgbotwgy834od",
    "title": "Java 设计模式",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"xmStE\"></a>\n### 代理模式\n代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。<br />典型场景：Spring AOP，父子类继承实现\n",
    "body_draft": "<a name=\"xmStE\"></a>\n### 代理模式\n代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。<br />典型场景：Spring AOP，父子类继承实现\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h3 id=\"xmStE\"><span class=\"ne-text\">代理模式</span></h3><p id=\"u6daf7dac\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。</span></p><p id=\"ua731eaba\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">典型场景：Spring AOP，父子类继承实现</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h3 data-lake-id=\"xmStE\" id=\"xmStE\"><span data-lake-id=\"ub82d6ff1\" id=\"ub82d6ff1\">代理模式</span></h3><p data-lake-id=\"u6daf7dac\" id=\"u6daf7dac\"><span data-lake-id=\"u6ecdbb83\" id=\"u6ecdbb83\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。</span></p><p data-lake-id=\"ua731eaba\" id=\"ua731eaba\"><span data-lake-id=\"ua7d91578\" id=\"ua7d91578\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">典型场景：Spring AOP，父子类继承实现</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h3 data-lake-id=\"xmStE\" id=\"xmStE\"><span data-lake-id=\"ub82d6ff1\" id=\"ub82d6ff1\">代理模式</span></h3><p data-lake-id=\"u6daf7dac\" id=\"u6daf7dac\"><span data-lake-id=\"u6ecdbb83\" id=\"u6ecdbb83\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。</span></p><p data-lake-id=\"ua731eaba\" id=\"ua731eaba\"><span data-lake-id=\"ua7d91578\" id=\"ua7d91578\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">典型场景：Spring AOP，父子类继承实现</span></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-13T15:10:15.000Z",
    "deleted_at": null,
    "created_at": "2023-02-10T02:16:57.000Z",
    "updated_at": "2023-02-13T15:10:15.000Z",
    "published_at": "2023-02-13T15:10:15.000Z",
    "first_published_at": "2023-02-10T02:17:17.055Z",
    "word_count": 65,
    "cover": null,
    "description": "代理模式代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。典型场景：Spring AOP，父子类继承实现",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112771786,
    "slug": "hwwe2650vh7iz6ys",
    "title": "错题集",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png#averageHue=%23fefcfc&clientId=u289b2bb6-caeb-4&from=paste&height=357&id=ud14444d1&name=image.png&originHeight=357&originWidth=1395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29623&status=done&style=none&taskId=u980816a7-23a7-49f0-a242-edbdeb7b87b&title=&width=1395)![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675075840989-9fd823d1-5dc9-46fc-b964-4afee0fd8b7e.png#averageHue=%23fefbfb&clientId=udbc5d45c-3357-4&from=paste&height=378&id=uccbe7889&name=image.png&originHeight=378&originWidth=1447&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30965&status=done&style=none&taskId=u054f5f0c-3302-48ef-a587-bc19bbc185b&title=&width=1447)\n\n",
    "body_draft": "![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png#averageHue=%23fefcfc&clientId=u289b2bb6-caeb-4&from=paste&height=357&id=ud14444d1&name=image.png&originHeight=357&originWidth=1395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29623&status=done&style=none&taskId=u980816a7-23a7-49f0-a242-edbdeb7b87b&title=&width=1395)![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675075840989-9fd823d1-5dc9-46fc-b964-4afee0fd8b7e.png#averageHue=%23fefbfb&clientId=udbc5d45c-3357-4&from=paste&height=378&id=uccbe7889&name=image.png&originHeight=378&originWidth=1447&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30965&status=done&style=none&taskId=u054f5f0c-3302-48ef-a587-bc19bbc185b&title=&width=1447)\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u518a5632\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/34997132/1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png\" width=\"1395\" id=\"ud14444d1\" class=\"ne-image\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/34997132/1675075840989-9fd823d1-5dc9-46fc-b964-4afee0fd8b7e.png\" width=\"1447\" id=\"uccbe7889\" class=\"ne-image\"></p><p id=\"u6adffe6a\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u518a5632\" id=\"u518a5632\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png%22%2C%22taskId%22%3A%22u980816a7-23a7-49f0-a242-edbdeb7b87b%22%2C%22clientId%22%3A%22u289b2bb6-caeb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1395%2C%22height%22%3A357%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29623%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1395%2C%22originHeight%22%3A357%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%209%205%208%206%20%E5%8D%95%E9%80%89%E9%A2%98%2012%2015%2013%2018%2017%2010%2011%2016%2014%2030%2029%2032%2028%2019%2033%2036%2035%2026%2025%2021%2031%2023%2027%2020%2024%2022%2034%2037%2038%2039%2041%2040%2043%2042%2045%2044%20%E5%A4%9A%E9%80%89%E9%A2%98%2058%2053%2056%2059%2054%2055%2057%2052%2050%2051%2060%2046%2047%2049%2048%20%E6%9C%AA%E7%AE%A1%200%20%E7%AE%A1%E5%AF%B950%20%E7%AD%94%E9%94%9910%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A20.483877%2C%22y%22%3A15.555972%2C%22width%22%3A101.44314299999999%2C%22height%22%3A17.673019999999998%2C%22text%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%22%7D%2C%7B%22x%22%3A694.04517%2C%22y%22%3A68.11173%2C%22width%22%3A16.85672999999997%2C%22height%22%3A17.423150000000007%2C%22text%22%3A%229%22%7D%2C%7B%22x%22%3A412.37637%2C%22y%22%3A68.53794%2C%22width%22%3A19.232529999999997%2C%22height%22%3A17.252799999999993%2C%22text%22%3A%225%22%7D%2C%7B%22x%22%3A624.076%2C%22y%22%3A68.87781%2C%22width%22%3A17.763969999999972%2C%22height%22%3A16.94971000000001%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A482.39948%2C%22y%22%3A68.91464%2C%22width%22%3A19.087019999999995%2C%22height%22%3A16.95725499999999%2C%22text%22%3A%226%22%7D%2C%7B%22x%22%3A50.857353%2C%22y%22%3A68.68415%2C%22width%22%3A42.162937%2C%22height%22%3A14.674129999999991%2C%22text%22%3A%22%E5%8D%95%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A903.6916%2C%22y%22%3A69.868935%2C%22width%22%3A20.223439999999982%2C%22height%22%3A16.19805500000001%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A1113.3657%2C%22y%22%3A69.75001%2C%22width%22%3A20.709699999999884%2C%22height%22%3A16.31694999999999%2C%22text%22%3A%2215%22%7D%2C%7B%22x%22%3A972.7926%2C%22y%22%3A70.01781%2C%22width%22%3A20.6096%2C%22height%22%3A15.490575000000007%2C%22text%22%3A%2213%22%7D%2C%7B%22x%22%3A1323.5609%2C%22y%22%3A70.24065%2C%22width%22%3A19.564000000000078%2C%22height%22%3A14.767160000000004%2C%22text%22%3A%2218%22%7D%2C%7B%22x%22%3A1252.9991%2C%22y%22%3A70.25116%2C%22width%22%3A20.375800000000027%2C%22height%22%3A14.761313999999999%2C%22text%22%3A%2217%22%7D%2C%7B%22x%22%3A761.9526%2C%22y%22%3A70.52025%2C%22width%22%3A21.40370000000007%2C%22height%22%3A15.67904%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A832.768%2C%22y%22%3A70.76106%2C%22width%22%3A20.09796999999992%2C%22height%22%3A15.222544%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A1183.5823%2C%22y%22%3A70.767105%2C%22width%22%3A21.02819999999997%2C%22height%22%3A15.250415000000004%2C%22text%22%3A%2216%22%7D%2C%7B%22x%22%3A1042.764%2C%22y%22%3A70.97759%2C%22width%22%3A20.750400000000127%2C%22height%22%3A14.94377%2C%22text%22%3A%2214%22%7D%2C%7B%22x%22%3A902.9408%2C%22y%22%3A125.6602%2C%22width%22%3A20.15680000000009%2C%22height%22%3A16.53040999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A833.18536%2C%22y%22%3A125.80601%2C%22width%22%3A20.16224000000011%2C%22height%22%3A16.214880000000008%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A1044.0703%2C%22y%22%3A126.42186%2C%22width%22%3A18.199699999999893%2C%22height%22%3A15.257829999999998%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A762.79553%2C%22y%22%3A125.94154%2C%22width%22%3A20.08556999999996%2C%22height%22%3A15.73814999999999%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A132.47415%2C%22y%22%3A126.48538%2C%22width%22%3A20.406829999999985%2C%22height%22%3A14.213350000000005%2C%22text%22%3A%2219%22%7D%2C%7B%22x%22%3A1112.8485%2C%22y%22%3A126.3727%2C%22width%22%3A19.897699999999986%2C%22height%22%3A15.575329999999994%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A1323.8922%2C%22y%22%3A126.68967%2C%22width%22%3A18.200599999999895%2C%22height%22%3A15.483980000000003%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A1253.2611%2C%22y%22%3A126.630714%2C%22width%22%3A18.645500000000084%2C%22height%22%3A15.048975999999996%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A623.56635%2C%22y%22%3A126.67786%2C%22width%22%3A19.590849999999932%2C%22height%22%3A14.31546999999999%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A553.3919%2C%22y%22%3A126.80996%2C%22width%22%3A19.69952999999998%2C%22height%22%3A14.214680000000001%2C%22text%22%3A%2225%22%7D%2C%7B%22x%22%3A273.20212%2C%22y%22%3A127.0624%2C%22width%22%3A18.876040000000046%2C%22height%22%3A13.862340000000017%2C%22text%22%3A%2221%22%7D%2C%7B%22x%22%3A973.41406%2C%22y%22%3A127.04775%2C%22width%22%3A17.880680000000098%2C%22height%22%3A14.15728%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A413.87363%2C%22y%22%3A127.10462%2C%22width%22%3A19.190330000000017%2C%22height%22%3A13.50430999999999%2C%22text%22%3A%2223%22%7D%2C%7B%22x%22%3A693.6086%2C%22y%22%3A127.20136%2C%22width%22%3A19.509699999999953%2C%22height%22%3A13.965969999999999%2C%22text%22%3A%2227%22%7D%2C%7B%22x%22%3A203.42064%2C%22y%22%3A127.15627%2C%22width%22%3A19.742050000000006%2C%22height%22%3A13.41167999999999%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A483.31317%2C%22y%22%3A127.42832%2C%22width%22%3A19.930830000000014%2C%22height%22%3A13.390339999999995%2C%22text%22%3A%2224%22%7D%2C%7B%22x%22%3A343.53836%2C%22y%22%3A127.58047%2C%22width%22%3A19.43331999999998%2C%22height%22%3A13.560079999999985%2C%22text%22%3A%2222%22%7D%2C%7B%22x%22%3A1184.061%2C%22y%22%3A127.942764%2C%22width%22%3A19.126600000000053%2C%22height%22%3A13.931686%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A128.76494%2C%22y%22%3A180.46323%2C%22width%22%3A27.306489999999997%2C%22height%22%3A23.60848999999999%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A204.16243%2C%22y%22%3A183.37822%2C%22width%22%3A20.47765000000001%2C%22height%22%3A17.136259999999993%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A272.55048%2C%22y%22%3A184.33047%2C%22width%22%3A21.73248000000001%2C%22height%22%3A16.268760000000015%2C%22text%22%3A%2239%22%7D%2C%7B%22x%22%3A415.39636%2C%22y%22%3A184.40674%2C%22width%22%3A17.60712000000001%2C%22height%22%3A15.562989999999985%2C%22text%22%3A%2241%22%7D%2C%7B%22x%22%3A345.37985%2C%22y%22%3A184.50833%2C%22width%22%3A18.456700000000012%2C%22height%22%3A15.704329999999999%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A554.861%2C%22y%22%3A184.75305%2C%22width%22%3A19.00490000000002%2C%22height%22%3A16.829949999999997%2C%22text%22%3A%2243%22%7D%2C%7B%22x%22%3A483.6396%2C%22y%22%3A184.77216%2C%22width%22%3A21.77263000000005%2C%22height%22%3A16.46205999999998%2C%22text%22%3A%2242%22%7D%2C%7B%22x%22%3A695.0617%2C%22y%22%3A184.81221%2C%22width%22%3A18.206300000000056%2C%22height%22%3A15.529570000000007%2C%22text%22%3A%2245%22%7D%2C%7B%22x%22%3A623.6179%2C%22y%22%3A185.18896%2C%22width%22%3A20.42610000000002%2C%22height%22%3A16.262910000000005%2C%22text%22%3A%2244%22%7D%2C%7B%22x%22%3A51.088554%2C%22y%22%3A259.11996%2C%22width%22%3A42.873746%2C%22height%22%3A15.905039999999985%2C%22text%22%3A%22%E5%A4%9A%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A974.3124%2C%22y%22%3A260.48016%2C%22width%22%3A18.838660000000004%2C%22height%22%3A16.586059999999975%2C%22text%22%3A%2258%22%7D%2C%7B%22x%22%3A624.0917%2C%22y%22%3A260.54916%2C%22width%22%3A18.82210000000009%2C%22height%22%3A16.477600000000052%2C%22text%22%3A%2253%22%7D%2C%7B%22x%22%3A834.4242%2C%22y%22%3A260.73743%2C%22width%22%3A18.964200000000005%2C%22height%22%3A15.994109999999978%2C%22text%22%3A%2256%22%7D%2C%7B%22x%22%3A1043.5083%2C%22y%22%3A260.79648%2C%22width%22%3A20.072000000000116%2C%22height%22%3A15.59787%2C%22text%22%3A%2259%22%7D%2C%7B%22x%22%3A694.6353%2C%22y%22%3A261.0995%2C%22width%22%3A17.550859999999943%2C%22height%22%3A15.426260000000013%2C%22text%22%3A%2254%22%7D%2C%7B%22x%22%3A764.3314%2C%22y%22%3A261.39642%2C%22width%22%3A19.44679999999994%2C%22height%22%3A15.404449999999997%2C%22text%22%3A%2255%22%7D%2C%7B%22x%22%3A904.23254%2C%22y%22%3A261.51608%2C%22width%22%3A16.766160000000013%2C%22height%22%3A14.506920000000036%2C%22text%22%3A%2257%22%7D%2C%7B%22x%22%3A554.9311%2C%22y%22%3A261.64215%2C%22width%22%3A18.041500000000042%2C%22height%22%3A14.721990000000005%2C%22text%22%3A%2252%22%7D%2C%7B%22x%22%3A414.41824%2C%22y%22%3A261.7864%2C%22width%22%3A19.036689999999965%2C%22height%22%3A15.005200000000002%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A484.09616%2C%22y%22%3A261.8295%2C%22width%22%3A17.866210000000024%2C%22height%22%3A14.305049999999994%2C%22text%22%3A%2251%22%7D%2C%7B%22x%22%3A1113.3154%2C%22y%22%3A261.89114%2C%22width%22%3A19.011600000000044%2C%22height%22%3A14.021209999999996%2C%22text%22%3A%2260%22%7D%2C%7B%22x%22%3A134.29341%2C%22y%22%3A262.0574%2C%22width%22%3A19.799849999999992%2C%22height%22%3A14.082500000000039%2C%22text%22%3A%2246%22%7D%2C%7B%22x%22%3A204.86298%2C%22y%22%3A262.1463%2C%22width%22%3A16.81468000000001%2C%22height%22%3A13.373400000000004%2C%22text%22%3A%2247%22%7D%2C%7B%22x%22%3A345.34012%2C%22y%22%3A262.35983%2C%22width%22%3A17.305110000000013%2C%22height%22%3A14.11247000000003%2C%22text%22%3A%2249%22%7D%2C%7B%22x%22%3A275.20557%2C%22y%22%3A262.60638%2C%22width%22%3A18.009929999999997%2C%22height%22%3A13.56777999999997%2C%22text%22%3A%2248%22%7D%2C%7B%22x%22%3A792.19104%2C%22y%22%3A326.75815%2C%22width%22%3A41.35925999999995%2C%22height%22%3A15.023799999999994%2C%22text%22%3A%22%E6%9C%AA%E7%AE%A1%200%22%7D%2C%7B%22x%22%3A585.1388%2C%22y%22%3A327.04492%2C%22width%22%3A49.13930000000005%2C%22height%22%3A14.580840000000023%2C%22text%22%3A%22%E7%AE%A1%E5%AF%B950%22%7D%2C%7B%22x%22%3A688.4413%2C%22y%22%3A328.4013%2C%22width%22%3A49.54939999999999%2C%22height%22%3A13.353859999999997%2C%22text%22%3A%22%E7%AD%94%E9%94%9910%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefcfc%22%2C%22id%22%3A%22ud14444d1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675075840989-9fd823d1-5dc9-46fc-b964-4afee0fd8b7e.png%22%2C%22taskId%22%3A%22u054f5f0c-3302-48ef-a587-bc19bbc185b%22%2C%22clientId%22%3A%22udbc5d45c-3357-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1447%2C%22height%22%3A378%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A30965%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1447%2C%22originHeight%22%3A378%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%207%206%208%2012%20%E5%8D%95%E9%80%89%E9%A2%98%2010%2011%2017%204%2018%2016%2013%2014%2029%2032%2030%2019%2033%2020%2027%2036%2028%2034%2035%2025%2026%2024%2022%2021%2023%2037%2043%2038%2039%2042%2044%2045%2040%2041%2050%2051%2057%20%E5%A4%9A%E9%80%89%E9%A2%98%2052%2056%2060%2058%2059%2053%2054%2048%2046%2049%2055%20%E7%AD%94%E5%AF%B945%20%E7%AD%94%E9%94%9915%20%E6%9C%AA%E7%AD%940%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A37.193058%2C%22y%22%3A35.052364%2C%22width%22%3A104.488662%2C%22height%22%3A18.402123000000003%2C%22text%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%22%7D%2C%7B%22x%22%3A570.5861%2C%22y%22%3A85.52363%2C%22width%22%3A21.905200000000036%2C%22height%22%3A22.912930000000003%2C%22text%22%3A%227%22%7D%2C%7B%22x%22%3A712.41736%2C%22y%22%3A87.99779%2C%22width%22%3A18.343740000000025%2C%22height%22%3A19.61945%2C%22text%22%3A%226%22%7D%2C%7B%22x%22%3A643.49994%2C%22y%22%3A88.699%2C%22width%22%3A16.470659999999953%2C%22height%22%3A18.335904%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A924.1003%2C%22y%22%3A89.06133%2C%22width%22%3A21.25364000000002%2C%22height%22%3A18.627480000000006%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A69.99316%2C%22y%22%3A89.172676%2C%22width%22%3A42.584199999999996%2C%22height%22%3A14.012804000000003%2C%22text%22%3A%22%E5%8D%95%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A783.0108%2C%22y%22%3A89.17501%2C%22width%22%3A19.48389999999995%2C%22height%22%3A17.141049999999993%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A853.5039%2C%22y%22%3A89.30704%2C%22width%22%3A19.21799999999996%2C%22height%22%3A18.087490000000003%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A1273.1351%2C%22y%22%3A89.06509%2C%22width%22%3A19.594100000000026%2C%22height%22%3A18.044735000000003%2C%22text%22%3A%2217%22%7D%2C%7B%22x%22%3A365.34354%2C%22y%22%3A89.44746%2C%22width%22%3A13.98259999999999%2C%22height%22%3A16.417354999999986%2C%22text%22%3A%224%22%7D%2C%7B%22x%22%3A1343.5016%2C%22y%22%3A89.487274%2C%22width%22%3A19.35199999999986%2C%22height%22%3A17.311735999999996%2C%22text%22%3A%2218%22%7D%2C%7B%22x%22%3A1204.0482%2C%22y%22%3A89.30692%2C%22width%22%3A20.303100000000086%2C%22height%22%3A17.056889999999996%2C%22text%22%3A%2216%22%7D%2C%7B%22x%22%3A992.5516%2C%22y%22%3A89.30707%2C%22width%22%3A22.54729999999995%2C%22height%22%3A16.95956000000001%2C%22text%22%3A%2213%22%7D%2C%7B%22x%22%3A1064.0854%2C%22y%22%3A90.30486%2C%22width%22%3A20.146600000000035%2C%22height%22%3A15.959189999999992%2C%22text%22%3A%2214%22%7D%2C%7B%22x%22%3A852.3734%2C%22y%22%3A145.83046%2C%22width%22%3A20.970000000000027%2C%22height%22%3A16.957030000000003%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A1062.4128%2C%22y%22%3A146.20616%2C%22width%22%3A19.479499999999916%2C%22height%22%3A16.737929999999977%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A923.44257%2C%22y%22%3A146.26141%2C%22width%22%3A18.975759999999923%2C%22height%22%3A16.169150000000002%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A152.4159%2C%22y%22%3A144.7%2C%22width%22%3A21.19705000000002%2C%22height%22%3A18.087500000000006%2C%22text%22%3A%2219%22%7D%2C%7B%22x%22%3A1132.4932%2C%22y%22%3A146.53299%2C%22width%22%3A19.25610000000006%2C%22height%22%3A16.473569999999995%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A222.70235%2C%22y%22%3A146.96094%2C%22width%22%3A19.83945%2C%22height%22%3A15.82656%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A712.1953%2C%22y%22%3A146.96094%2C%22width%22%3A19.218000000000075%2C%22height%22%3A15.82656%2C%22text%22%3A%2227%22%7D%2C%7B%22x%22%3A1342.997%2C%22y%22%3A146.96095%2C%22width%22%3A19.217799999999897%2C%22height%22%3A15.826570000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A783.41486%2C%22y%22%3A146.36652%2C%22width%22%3A19.21794%2C%22height%22%3A16.506439999999998%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A1203.9491%2C%22y%22%3A146.96098%2C%22width%22%3A18.087499999999864%2C%22height%22%3A14.696020000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A1274.0383%2C%22y%22%3A146.96114%2C%22width%22%3A19.2183%2C%22height%22%3A15.826210000000003%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A571.59296%2C%22y%22%3A147.5689%2C%22width%22%3A20.153440000000046%2C%22height%22%3A15.737299999999976%2C%22text%22%3A%2225%22%7D%2C%7B%22x%22%3A642.2267%2C%22y%22%3A147.58221%2C%22width%22%3A19.284349999999904%2C%22height%22%3A14.880020000000002%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A501.8514%2C%22y%22%3A147.8271%2C%22width%22%3A19.50540000000001%2C%22height%22%3A14.985129999999998%2C%22text%22%3A%2224%22%7D%2C%7B%22x%22%3A364.63193%2C%22y%22%3A148.02466%2C%22width%22%3A16.98536999999999%2C%22height%22%3A14.225830000000002%2C%22text%22%3A%2222%22%7D%2C%7B%22x%22%3A292.79144%2C%22y%22%3A146.9501%2C%22width%22%3A19.21805999999998%2C%22height%22%3A16.46964%2C%22text%22%3A%2221%22%7D%2C%7B%22x%22%3A433.98615%2C%22y%22%3A148.30574%2C%22width%22%3A15.805900000000008%2C%22height%22%3A13.049350000000004%2C%22text%22%3A%2223%22%7D%2C%7B%22x%22%3A151.08879%2C%22y%22%3A201.79105%2C%22width%22%3A22.77445%2C%22height%22%3A18.392599999999987%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A569.83685%2C%22y%22%3A202.0641%2C%22width%22%3A22.52864999999997%2C%22height%22%3A17.26021%2C%22text%22%3A%2243%22%7D%2C%7B%22x%22%3A221.0292%2C%22y%22%3A203.48438%2C%22width%22%3A22.02158%2C%22height%22%3A15.36724000000001%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A291.6609%2C%22y%22%3A203.48438%2C%22width%22%3A20.04377999999997%2C%22height%22%3A15.82650000000001%2C%22text%22%3A%2239%22%7D%2C%7B%22x%22%3A502.1514%2C%22y%22%3A203.77655%2C%22width%22%3A19.44459999999998%2C%22height%22%3A16.519170000000003%2C%22text%22%3A%2242%22%7D%2C%7B%22x%22%3A640.949%2C%22y%22%3A202.94327%2C%22width%22%3A23.314370000000054%2C%22height%22%3A16.624799999999993%2C%22text%22%3A%2244%22%7D%2C%7B%22x%22%3A712.1954%2C%22y%22%3A204.16481%2C%22width%22%3A19.840599999999995%2C%22height%22%3A15.589089999999999%2C%22text%22%3A%2245%22%7D%2C%7B%22x%22%3A362.11453%2C%22y%22%3A204.61487%2C%22width%22%3A21.35417000000001%2C%22height%22%3A14.696060000000017%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A432.1196%2C%22y%22%3A205.50285%2C%22width%22%3A19.272899999999993%2C%22height%22%3A13.599450000000019%2C%22text%22%3A%2241%22%7D%2C%7B%22x%22%3A431.8391%2C%22y%22%3A278.89246%2C%22width%22%3A20.352640000000008%2C%22height%22%3A19.236869999999954%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A501.34128%2C%22y%22%3A279.60986%2C%22width%22%3A20.662570000000073%2C%22height%22%3A18.682339999999954%2C%22text%22%3A%2251%22%7D%2C%7B%22x%22%3A922.64844%2C%22y%22%3A279.92477%2C%22width%22%3A19.528859999999895%2C%22height%22%3A16.548159999999996%2C%22text%22%3A%2257%22%7D%2C%7B%22x%22%3A69.80879%2C%22y%22%3A279.95816%2C%22width%22%3A42.739279999999994%2C%22height%22%3A14.354240000000004%2C%22text%22%3A%22%E5%A4%9A%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A572.59814%2C%22y%22%3A280.25366%2C%22width%22%3A20.31036000000006%2C%22height%22%3A16.118290000000002%2C%22text%22%3A%2252%22%7D%2C%7B%22x%22%3A853.2917%2C%22y%22%3A280.39102%2C%22width%22%3A18.465100000000007%2C%22height%22%3A15.93077999999997%2C%22text%22%3A%2256%22%7D%2C%7B%22x%22%3A1133.4088%2C%22y%22%3A280.52563%2C%22width%22%3A19.81140000000005%2C%22height%22%3A16.148349999999994%2C%22text%22%3A%2260%22%7D%2C%7B%22x%22%3A993.424%2C%22y%22%3A280.5348%2C%22width%22%3A18.328300000000013%2C%22height%22%3A15.869399999999985%2C%22text%22%3A%2258%22%7D%2C%7B%22x%22%3A1063.8677%2C%22y%22%3A280.61804%2C%22width%22%3A18.715200000000095%2C%22height%22%3A16.027710000000013%2C%22text%22%3A%2259%22%7D%2C%7B%22x%22%3A643.7386%2C%22y%22%3A280.1316%2C%22width%22%3A19.181100000000015%2C%22height%22%3A15.65282000000002%2C%22text%22%3A%2253%22%7D%2C%7B%22x%22%3A712.9927%2C%22y%22%3A280.66095%2C%22width%22%3A19.913599999999974%2C%22height%22%3A14.874969999999962%2C%22text%22%3A%2254%22%7D%2C%7B%22x%22%3A292.79138%2C%22y%22%3A281.4867%2C%22width%22%3A20.348450000000014%2C%22height%22%3A14.69613000000004%2C%22text%22%3A%2248%22%7D%2C%7B%22x%22%3A154.87422%2C%22y%22%3A281.48672%2C%22width%22%3A16.957030000000003%2C%22height%22%3A14.696110000000033%2C%22text%22%3A%2246%22%7D%2C%7B%22x%22%3A364.01096%2C%22y%22%3A281.48672%2C%22width%22%3A15.826559999999972%2C%22height%22%3A14.696110000000033%2C%22text%22%3A%2249%22%7D%2C%7B%22x%22%3A784.54553%2C%22y%22%3A280.3563%2C%22width%22%3A18.012470000000008%2C%22height%22%3A16.962060000000008%2C%22text%22%3A%2255%22%7D%2C%7B%22x%22%3A604.36237%2C%22y%22%3A346.37775%2C%22width%22%3A50.16662999999994%2C%22height%22%3A14.990850000000023%2C%22text%22%3A%22%E7%AD%94%E5%AF%B945%22%7D%2C%7B%22x%22%3A705.7212%2C%22y%22%3A346.4305%2C%22width%22%3A51.57256000000007%2C%22height%22%3A15.946300000000008%2C%22text%22%3A%22%E7%AD%94%E9%94%9915%22%7D%2C%7B%22x%22%3A807.64545%2C%22y%22%3A347.13248%2C%22width%22%3A45.84618999999998%2C%22height%22%3A15.13366000000002%2C%22text%22%3A%22%E6%9C%AA%E7%AD%940%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefbfb%22%2C%22id%22%3A%22uccbe7889%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6adffe6a\" id=\"u6adffe6a\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u518a5632\" id=\"u518a5632\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png%22%2C%22taskId%22%3A%22u980816a7-23a7-49f0-a242-edbdeb7b87b%22%2C%22clientId%22%3A%22u289b2bb6-caeb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1395%2C%22height%22%3A357%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29623%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1395%2C%22originHeight%22%3A357%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%209%205%208%206%20%E5%8D%95%E9%80%89%E9%A2%98%2012%2015%2013%2018%2017%2010%2011%2016%2014%2030%2029%2032%2028%2019%2033%2036%2035%2026%2025%2021%2031%2023%2027%2020%2024%2022%2034%2037%2038%2039%2041%2040%2043%2042%2045%2044%20%E5%A4%9A%E9%80%89%E9%A2%98%2058%2053%2056%2059%2054%2055%2057%2052%2050%2051%2060%2046%2047%2049%2048%20%E6%9C%AA%E7%AE%A1%200%20%E7%AE%A1%E5%AF%B950%20%E7%AD%94%E9%94%9910%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A20.483877%2C%22y%22%3A15.555972%2C%22width%22%3A101.44314299999999%2C%22height%22%3A17.673019999999998%2C%22text%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%22%7D%2C%7B%22x%22%3A694.04517%2C%22y%22%3A68.11173%2C%22width%22%3A16.85672999999997%2C%22height%22%3A17.423150000000007%2C%22text%22%3A%229%22%7D%2C%7B%22x%22%3A412.37637%2C%22y%22%3A68.53794%2C%22width%22%3A19.232529999999997%2C%22height%22%3A17.252799999999993%2C%22text%22%3A%225%22%7D%2C%7B%22x%22%3A624.076%2C%22y%22%3A68.87781%2C%22width%22%3A17.763969999999972%2C%22height%22%3A16.94971000000001%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A482.39948%2C%22y%22%3A68.91464%2C%22width%22%3A19.087019999999995%2C%22height%22%3A16.95725499999999%2C%22text%22%3A%226%22%7D%2C%7B%22x%22%3A50.857353%2C%22y%22%3A68.68415%2C%22width%22%3A42.162937%2C%22height%22%3A14.674129999999991%2C%22text%22%3A%22%E5%8D%95%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A903.6916%2C%22y%22%3A69.868935%2C%22width%22%3A20.223439999999982%2C%22height%22%3A16.19805500000001%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A1113.3657%2C%22y%22%3A69.75001%2C%22width%22%3A20.709699999999884%2C%22height%22%3A16.31694999999999%2C%22text%22%3A%2215%22%7D%2C%7B%22x%22%3A972.7926%2C%22y%22%3A70.01781%2C%22width%22%3A20.6096%2C%22height%22%3A15.490575000000007%2C%22text%22%3A%2213%22%7D%2C%7B%22x%22%3A1323.5609%2C%22y%22%3A70.24065%2C%22width%22%3A19.564000000000078%2C%22height%22%3A14.767160000000004%2C%22text%22%3A%2218%22%7D%2C%7B%22x%22%3A1252.9991%2C%22y%22%3A70.25116%2C%22width%22%3A20.375800000000027%2C%22height%22%3A14.761313999999999%2C%22text%22%3A%2217%22%7D%2C%7B%22x%22%3A761.9526%2C%22y%22%3A70.52025%2C%22width%22%3A21.40370000000007%2C%22height%22%3A15.67904%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A832.768%2C%22y%22%3A70.76106%2C%22width%22%3A20.09796999999992%2C%22height%22%3A15.222544%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A1183.5823%2C%22y%22%3A70.767105%2C%22width%22%3A21.02819999999997%2C%22height%22%3A15.250415000000004%2C%22text%22%3A%2216%22%7D%2C%7B%22x%22%3A1042.764%2C%22y%22%3A70.97759%2C%22width%22%3A20.750400000000127%2C%22height%22%3A14.94377%2C%22text%22%3A%2214%22%7D%2C%7B%22x%22%3A902.9408%2C%22y%22%3A125.6602%2C%22width%22%3A20.15680000000009%2C%22height%22%3A16.53040999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A833.18536%2C%22y%22%3A125.80601%2C%22width%22%3A20.16224000000011%2C%22height%22%3A16.214880000000008%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A1044.0703%2C%22y%22%3A126.42186%2C%22width%22%3A18.199699999999893%2C%22height%22%3A15.257829999999998%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A762.79553%2C%22y%22%3A125.94154%2C%22width%22%3A20.08556999999996%2C%22height%22%3A15.73814999999999%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A132.47415%2C%22y%22%3A126.48538%2C%22width%22%3A20.406829999999985%2C%22height%22%3A14.213350000000005%2C%22text%22%3A%2219%22%7D%2C%7B%22x%22%3A1112.8485%2C%22y%22%3A126.3727%2C%22width%22%3A19.897699999999986%2C%22height%22%3A15.575329999999994%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A1323.8922%2C%22y%22%3A126.68967%2C%22width%22%3A18.200599999999895%2C%22height%22%3A15.483980000000003%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A1253.2611%2C%22y%22%3A126.630714%2C%22width%22%3A18.645500000000084%2C%22height%22%3A15.048975999999996%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A623.56635%2C%22y%22%3A126.67786%2C%22width%22%3A19.590849999999932%2C%22height%22%3A14.31546999999999%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A553.3919%2C%22y%22%3A126.80996%2C%22width%22%3A19.69952999999998%2C%22height%22%3A14.214680000000001%2C%22text%22%3A%2225%22%7D%2C%7B%22x%22%3A273.20212%2C%22y%22%3A127.0624%2C%22width%22%3A18.876040000000046%2C%22height%22%3A13.862340000000017%2C%22text%22%3A%2221%22%7D%2C%7B%22x%22%3A973.41406%2C%22y%22%3A127.04775%2C%22width%22%3A17.880680000000098%2C%22height%22%3A14.15728%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A413.87363%2C%22y%22%3A127.10462%2C%22width%22%3A19.190330000000017%2C%22height%22%3A13.50430999999999%2C%22text%22%3A%2223%22%7D%2C%7B%22x%22%3A693.6086%2C%22y%22%3A127.20136%2C%22width%22%3A19.509699999999953%2C%22height%22%3A13.965969999999999%2C%22text%22%3A%2227%22%7D%2C%7B%22x%22%3A203.42064%2C%22y%22%3A127.15627%2C%22width%22%3A19.742050000000006%2C%22height%22%3A13.41167999999999%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A483.31317%2C%22y%22%3A127.42832%2C%22width%22%3A19.930830000000014%2C%22height%22%3A13.390339999999995%2C%22text%22%3A%2224%22%7D%2C%7B%22x%22%3A343.53836%2C%22y%22%3A127.58047%2C%22width%22%3A19.43331999999998%2C%22height%22%3A13.560079999999985%2C%22text%22%3A%2222%22%7D%2C%7B%22x%22%3A1184.061%2C%22y%22%3A127.942764%2C%22width%22%3A19.126600000000053%2C%22height%22%3A13.931686%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A128.76494%2C%22y%22%3A180.46323%2C%22width%22%3A27.306489999999997%2C%22height%22%3A23.60848999999999%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A204.16243%2C%22y%22%3A183.37822%2C%22width%22%3A20.47765000000001%2C%22height%22%3A17.136259999999993%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A272.55048%2C%22y%22%3A184.33047%2C%22width%22%3A21.73248000000001%2C%22height%22%3A16.268760000000015%2C%22text%22%3A%2239%22%7D%2C%7B%22x%22%3A415.39636%2C%22y%22%3A184.40674%2C%22width%22%3A17.60712000000001%2C%22height%22%3A15.562989999999985%2C%22text%22%3A%2241%22%7D%2C%7B%22x%22%3A345.37985%2C%22y%22%3A184.50833%2C%22width%22%3A18.456700000000012%2C%22height%22%3A15.704329999999999%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A554.861%2C%22y%22%3A184.75305%2C%22width%22%3A19.00490000000002%2C%22height%22%3A16.829949999999997%2C%22text%22%3A%2243%22%7D%2C%7B%22x%22%3A483.6396%2C%22y%22%3A184.77216%2C%22width%22%3A21.77263000000005%2C%22height%22%3A16.46205999999998%2C%22text%22%3A%2242%22%7D%2C%7B%22x%22%3A695.0617%2C%22y%22%3A184.81221%2C%22width%22%3A18.206300000000056%2C%22height%22%3A15.529570000000007%2C%22text%22%3A%2245%22%7D%2C%7B%22x%22%3A623.6179%2C%22y%22%3A185.18896%2C%22width%22%3A20.42610000000002%2C%22height%22%3A16.262910000000005%2C%22text%22%3A%2244%22%7D%2C%7B%22x%22%3A51.088554%2C%22y%22%3A259.11996%2C%22width%22%3A42.873746%2C%22height%22%3A15.905039999999985%2C%22text%22%3A%22%E5%A4%9A%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A974.3124%2C%22y%22%3A260.48016%2C%22width%22%3A18.838660000000004%2C%22height%22%3A16.586059999999975%2C%22text%22%3A%2258%22%7D%2C%7B%22x%22%3A624.0917%2C%22y%22%3A260.54916%2C%22width%22%3A18.82210000000009%2C%22height%22%3A16.477600000000052%2C%22text%22%3A%2253%22%7D%2C%7B%22x%22%3A834.4242%2C%22y%22%3A260.73743%2C%22width%22%3A18.964200000000005%2C%22height%22%3A15.994109999999978%2C%22text%22%3A%2256%22%7D%2C%7B%22x%22%3A1043.5083%2C%22y%22%3A260.79648%2C%22width%22%3A20.072000000000116%2C%22height%22%3A15.59787%2C%22text%22%3A%2259%22%7D%2C%7B%22x%22%3A694.6353%2C%22y%22%3A261.0995%2C%22width%22%3A17.550859999999943%2C%22height%22%3A15.426260000000013%2C%22text%22%3A%2254%22%7D%2C%7B%22x%22%3A764.3314%2C%22y%22%3A261.39642%2C%22width%22%3A19.44679999999994%2C%22height%22%3A15.404449999999997%2C%22text%22%3A%2255%22%7D%2C%7B%22x%22%3A904.23254%2C%22y%22%3A261.51608%2C%22width%22%3A16.766160000000013%2C%22height%22%3A14.506920000000036%2C%22text%22%3A%2257%22%7D%2C%7B%22x%22%3A554.9311%2C%22y%22%3A261.64215%2C%22width%22%3A18.041500000000042%2C%22height%22%3A14.721990000000005%2C%22text%22%3A%2252%22%7D%2C%7B%22x%22%3A414.41824%2C%22y%22%3A261.7864%2C%22width%22%3A19.036689999999965%2C%22height%22%3A15.005200000000002%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A484.09616%2C%22y%22%3A261.8295%2C%22width%22%3A17.866210000000024%2C%22height%22%3A14.305049999999994%2C%22text%22%3A%2251%22%7D%2C%7B%22x%22%3A1113.3154%2C%22y%22%3A261.89114%2C%22width%22%3A19.011600000000044%2C%22height%22%3A14.021209999999996%2C%22text%22%3A%2260%22%7D%2C%7B%22x%22%3A134.29341%2C%22y%22%3A262.0574%2C%22width%22%3A19.799849999999992%2C%22height%22%3A14.082500000000039%2C%22text%22%3A%2246%22%7D%2C%7B%22x%22%3A204.86298%2C%22y%22%3A262.1463%2C%22width%22%3A16.81468000000001%2C%22height%22%3A13.373400000000004%2C%22text%22%3A%2247%22%7D%2C%7B%22x%22%3A345.34012%2C%22y%22%3A262.35983%2C%22width%22%3A17.305110000000013%2C%22height%22%3A14.11247000000003%2C%22text%22%3A%2249%22%7D%2C%7B%22x%22%3A275.20557%2C%22y%22%3A262.60638%2C%22width%22%3A18.009929999999997%2C%22height%22%3A13.56777999999997%2C%22text%22%3A%2248%22%7D%2C%7B%22x%22%3A792.19104%2C%22y%22%3A326.75815%2C%22width%22%3A41.35925999999995%2C%22height%22%3A15.023799999999994%2C%22text%22%3A%22%E6%9C%AA%E7%AE%A1%200%22%7D%2C%7B%22x%22%3A585.1388%2C%22y%22%3A327.04492%2C%22width%22%3A49.13930000000005%2C%22height%22%3A14.580840000000023%2C%22text%22%3A%22%E7%AE%A1%E5%AF%B950%22%7D%2C%7B%22x%22%3A688.4413%2C%22y%22%3A328.4013%2C%22width%22%3A49.54939999999999%2C%22height%22%3A13.353859999999997%2C%22text%22%3A%22%E7%AD%94%E9%94%9910%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefcfc%22%2C%22id%22%3A%22ud14444d1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675075840989-9fd823d1-5dc9-46fc-b964-4afee0fd8b7e.png%22%2C%22taskId%22%3A%22u054f5f0c-3302-48ef-a587-bc19bbc185b%22%2C%22clientId%22%3A%22udbc5d45c-3357-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1447%2C%22height%22%3A378%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A30965%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1447%2C%22originHeight%22%3A378%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%207%206%208%2012%20%E5%8D%95%E9%80%89%E9%A2%98%2010%2011%2017%204%2018%2016%2013%2014%2029%2032%2030%2019%2033%2020%2027%2036%2028%2034%2035%2025%2026%2024%2022%2021%2023%2037%2043%2038%2039%2042%2044%2045%2040%2041%2050%2051%2057%20%E5%A4%9A%E9%80%89%E9%A2%98%2052%2056%2060%2058%2059%2053%2054%2048%2046%2049%2055%20%E7%AD%94%E5%AF%B945%20%E7%AD%94%E9%94%9915%20%E6%9C%AA%E7%AD%940%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A37.193058%2C%22y%22%3A35.052364%2C%22width%22%3A104.488662%2C%22height%22%3A18.402123000000003%2C%22text%22%3A%22%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%83%85%E5%86%B5%22%7D%2C%7B%22x%22%3A570.5861%2C%22y%22%3A85.52363%2C%22width%22%3A21.905200000000036%2C%22height%22%3A22.912930000000003%2C%22text%22%3A%227%22%7D%2C%7B%22x%22%3A712.41736%2C%22y%22%3A87.99779%2C%22width%22%3A18.343740000000025%2C%22height%22%3A19.61945%2C%22text%22%3A%226%22%7D%2C%7B%22x%22%3A643.49994%2C%22y%22%3A88.699%2C%22width%22%3A16.470659999999953%2C%22height%22%3A18.335904%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A924.1003%2C%22y%22%3A89.06133%2C%22width%22%3A21.25364000000002%2C%22height%22%3A18.627480000000006%2C%22text%22%3A%2212%22%7D%2C%7B%22x%22%3A69.99316%2C%22y%22%3A89.172676%2C%22width%22%3A42.584199999999996%2C%22height%22%3A14.012804000000003%2C%22text%22%3A%22%E5%8D%95%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A783.0108%2C%22y%22%3A89.17501%2C%22width%22%3A19.48389999999995%2C%22height%22%3A17.141049999999993%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A853.5039%2C%22y%22%3A89.30704%2C%22width%22%3A19.21799999999996%2C%22height%22%3A18.087490000000003%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A1273.1351%2C%22y%22%3A89.06509%2C%22width%22%3A19.594100000000026%2C%22height%22%3A18.044735000000003%2C%22text%22%3A%2217%22%7D%2C%7B%22x%22%3A365.34354%2C%22y%22%3A89.44746%2C%22width%22%3A13.98259999999999%2C%22height%22%3A16.417354999999986%2C%22text%22%3A%224%22%7D%2C%7B%22x%22%3A1343.5016%2C%22y%22%3A89.487274%2C%22width%22%3A19.35199999999986%2C%22height%22%3A17.311735999999996%2C%22text%22%3A%2218%22%7D%2C%7B%22x%22%3A1204.0482%2C%22y%22%3A89.30692%2C%22width%22%3A20.303100000000086%2C%22height%22%3A17.056889999999996%2C%22text%22%3A%2216%22%7D%2C%7B%22x%22%3A992.5516%2C%22y%22%3A89.30707%2C%22width%22%3A22.54729999999995%2C%22height%22%3A16.95956000000001%2C%22text%22%3A%2213%22%7D%2C%7B%22x%22%3A1064.0854%2C%22y%22%3A90.30486%2C%22width%22%3A20.146600000000035%2C%22height%22%3A15.959189999999992%2C%22text%22%3A%2214%22%7D%2C%7B%22x%22%3A852.3734%2C%22y%22%3A145.83046%2C%22width%22%3A20.970000000000027%2C%22height%22%3A16.957030000000003%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A1062.4128%2C%22y%22%3A146.20616%2C%22width%22%3A19.479499999999916%2C%22height%22%3A16.737929999999977%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A923.44257%2C%22y%22%3A146.26141%2C%22width%22%3A18.975759999999923%2C%22height%22%3A16.169150000000002%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A152.4159%2C%22y%22%3A144.7%2C%22width%22%3A21.19705000000002%2C%22height%22%3A18.087500000000006%2C%22text%22%3A%2219%22%7D%2C%7B%22x%22%3A1132.4932%2C%22y%22%3A146.53299%2C%22width%22%3A19.25610000000006%2C%22height%22%3A16.473569999999995%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A222.70235%2C%22y%22%3A146.96094%2C%22width%22%3A19.83945%2C%22height%22%3A15.82656%2C%22text%22%3A%2220%22%7D%2C%7B%22x%22%3A712.1953%2C%22y%22%3A146.96094%2C%22width%22%3A19.218000000000075%2C%22height%22%3A15.82656%2C%22text%22%3A%2227%22%7D%2C%7B%22x%22%3A1342.997%2C%22y%22%3A146.96095%2C%22width%22%3A19.217799999999897%2C%22height%22%3A15.826570000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A783.41486%2C%22y%22%3A146.36652%2C%22width%22%3A19.21794%2C%22height%22%3A16.506439999999998%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A1203.9491%2C%22y%22%3A146.96098%2C%22width%22%3A18.087499999999864%2C%22height%22%3A14.696020000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A1274.0383%2C%22y%22%3A146.96114%2C%22width%22%3A19.2183%2C%22height%22%3A15.826210000000003%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A571.59296%2C%22y%22%3A147.5689%2C%22width%22%3A20.153440000000046%2C%22height%22%3A15.737299999999976%2C%22text%22%3A%2225%22%7D%2C%7B%22x%22%3A642.2267%2C%22y%22%3A147.58221%2C%22width%22%3A19.284349999999904%2C%22height%22%3A14.880020000000002%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A501.8514%2C%22y%22%3A147.8271%2C%22width%22%3A19.50540000000001%2C%22height%22%3A14.985129999999998%2C%22text%22%3A%2224%22%7D%2C%7B%22x%22%3A364.63193%2C%22y%22%3A148.02466%2C%22width%22%3A16.98536999999999%2C%22height%22%3A14.225830000000002%2C%22text%22%3A%2222%22%7D%2C%7B%22x%22%3A292.79144%2C%22y%22%3A146.9501%2C%22width%22%3A19.21805999999998%2C%22height%22%3A16.46964%2C%22text%22%3A%2221%22%7D%2C%7B%22x%22%3A433.98615%2C%22y%22%3A148.30574%2C%22width%22%3A15.805900000000008%2C%22height%22%3A13.049350000000004%2C%22text%22%3A%2223%22%7D%2C%7B%22x%22%3A151.08879%2C%22y%22%3A201.79105%2C%22width%22%3A22.77445%2C%22height%22%3A18.392599999999987%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A569.83685%2C%22y%22%3A202.0641%2C%22width%22%3A22.52864999999997%2C%22height%22%3A17.26021%2C%22text%22%3A%2243%22%7D%2C%7B%22x%22%3A221.0292%2C%22y%22%3A203.48438%2C%22width%22%3A22.02158%2C%22height%22%3A15.36724000000001%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A291.6609%2C%22y%22%3A203.48438%2C%22width%22%3A20.04377999999997%2C%22height%22%3A15.82650000000001%2C%22text%22%3A%2239%22%7D%2C%7B%22x%22%3A502.1514%2C%22y%22%3A203.77655%2C%22width%22%3A19.44459999999998%2C%22height%22%3A16.519170000000003%2C%22text%22%3A%2242%22%7D%2C%7B%22x%22%3A640.949%2C%22y%22%3A202.94327%2C%22width%22%3A23.314370000000054%2C%22height%22%3A16.624799999999993%2C%22text%22%3A%2244%22%7D%2C%7B%22x%22%3A712.1954%2C%22y%22%3A204.16481%2C%22width%22%3A19.840599999999995%2C%22height%22%3A15.589089999999999%2C%22text%22%3A%2245%22%7D%2C%7B%22x%22%3A362.11453%2C%22y%22%3A204.61487%2C%22width%22%3A21.35417000000001%2C%22height%22%3A14.696060000000017%2C%22text%22%3A%2240%22%7D%2C%7B%22x%22%3A432.1196%2C%22y%22%3A205.50285%2C%22width%22%3A19.272899999999993%2C%22height%22%3A13.599450000000019%2C%22text%22%3A%2241%22%7D%2C%7B%22x%22%3A431.8391%2C%22y%22%3A278.89246%2C%22width%22%3A20.352640000000008%2C%22height%22%3A19.236869999999954%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A501.34128%2C%22y%22%3A279.60986%2C%22width%22%3A20.662570000000073%2C%22height%22%3A18.682339999999954%2C%22text%22%3A%2251%22%7D%2C%7B%22x%22%3A922.64844%2C%22y%22%3A279.92477%2C%22width%22%3A19.528859999999895%2C%22height%22%3A16.548159999999996%2C%22text%22%3A%2257%22%7D%2C%7B%22x%22%3A69.80879%2C%22y%22%3A279.95816%2C%22width%22%3A42.739279999999994%2C%22height%22%3A14.354240000000004%2C%22text%22%3A%22%E5%A4%9A%E9%80%89%E9%A2%98%22%7D%2C%7B%22x%22%3A572.59814%2C%22y%22%3A280.25366%2C%22width%22%3A20.31036000000006%2C%22height%22%3A16.118290000000002%2C%22text%22%3A%2252%22%7D%2C%7B%22x%22%3A853.2917%2C%22y%22%3A280.39102%2C%22width%22%3A18.465100000000007%2C%22height%22%3A15.93077999999997%2C%22text%22%3A%2256%22%7D%2C%7B%22x%22%3A1133.4088%2C%22y%22%3A280.52563%2C%22width%22%3A19.81140000000005%2C%22height%22%3A16.148349999999994%2C%22text%22%3A%2260%22%7D%2C%7B%22x%22%3A993.424%2C%22y%22%3A280.5348%2C%22width%22%3A18.328300000000013%2C%22height%22%3A15.869399999999985%2C%22text%22%3A%2258%22%7D%2C%7B%22x%22%3A1063.8677%2C%22y%22%3A280.61804%2C%22width%22%3A18.715200000000095%2C%22height%22%3A16.027710000000013%2C%22text%22%3A%2259%22%7D%2C%7B%22x%22%3A643.7386%2C%22y%22%3A280.1316%2C%22width%22%3A19.181100000000015%2C%22height%22%3A15.65282000000002%2C%22text%22%3A%2253%22%7D%2C%7B%22x%22%3A712.9927%2C%22y%22%3A280.66095%2C%22width%22%3A19.913599999999974%2C%22height%22%3A14.874969999999962%2C%22text%22%3A%2254%22%7D%2C%7B%22x%22%3A292.79138%2C%22y%22%3A281.4867%2C%22width%22%3A20.348450000000014%2C%22height%22%3A14.69613000000004%2C%22text%22%3A%2248%22%7D%2C%7B%22x%22%3A154.87422%2C%22y%22%3A281.48672%2C%22width%22%3A16.957030000000003%2C%22height%22%3A14.696110000000033%2C%22text%22%3A%2246%22%7D%2C%7B%22x%22%3A364.01096%2C%22y%22%3A281.48672%2C%22width%22%3A15.826559999999972%2C%22height%22%3A14.696110000000033%2C%22text%22%3A%2249%22%7D%2C%7B%22x%22%3A784.54553%2C%22y%22%3A280.3563%2C%22width%22%3A18.012470000000008%2C%22height%22%3A16.962060000000008%2C%22text%22%3A%2255%22%7D%2C%7B%22x%22%3A604.36237%2C%22y%22%3A346.37775%2C%22width%22%3A50.16662999999994%2C%22height%22%3A14.990850000000023%2C%22text%22%3A%22%E7%AD%94%E5%AF%B945%22%7D%2C%7B%22x%22%3A705.7212%2C%22y%22%3A346.4305%2C%22width%22%3A51.57256000000007%2C%22height%22%3A15.946300000000008%2C%22text%22%3A%22%E7%AD%94%E9%94%9915%22%7D%2C%7B%22x%22%3A807.64545%2C%22y%22%3A347.13248%2C%22width%22%3A45.84618999999998%2C%22height%22%3A15.13366000000002%2C%22text%22%3A%22%E6%9C%AA%E7%AD%940%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefbfb%22%2C%22id%22%3A%22uccbe7889%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6adffe6a\" id=\"u6adffe6a\"><br></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-01T01:22:13.000Z",
    "deleted_at": null,
    "created_at": "2023-01-30T10:50:29.000Z",
    "updated_at": "2023-02-01T01:22:14.000Z",
    "published_at": "2023-02-01T01:22:13.000Z",
    "first_published_at": "2023-01-30T10:50:52.323Z",
    "word_count": 0,
    "cover": "https://cdn.nlark.com/yuque/0/2023/png/34997132/1675214527733-8304ea4e-1ed6-4d80-8b53-8b0f606be89d.png",
    "description": "",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112594532,
    "slug": "okuw6870d7z6aqgw",
    "title": "Java 调试与监控",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"RDx8o\"></a>\n## 启动参数\nJava的启动参数有**运行时参数** 和 **JVM 参数**，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。\n<a name=\"koXZa\"></a>\n### 标准参数\n标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用\n<a name=\"BbgMg\"></a>\n### 非标X参数\n非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM 都实现，不保证向后兼容\n\n-  -Xms（memory start）：堆初始大小（默认为物理内存的1/64） \n-  -Xmx（memory max）：堆最大值（默认为物理内存的1/4或者1G） \n-  -Xss（stack size）：线程栈的大小（一般默认为512k） \n-  -Xmn：年轻代的初始值及最大值（可用 -XX:NewSize 和 -XX:MaxNewSize 来分别设置）\n- -Xmixed：默认为混合模式，开始解释执行，启动速度较快，对热点代码实行检测和编译。 \n- -Xint： 使用解释模式，启动很快，执行稍慢。 \n- -Xcomp: 使用纯编译模式，执行很快，启动很慢。\n<a name=\"ENd8b\"></a>\n### 非标XX参数\n非标XX参数(-XX)：各个 JVM 实现会有所不同，将来可能会随时取消\n\n- -XX:MaxDirectMemorySize ——最大非堆内存\n\n<a name=\"Qj0gp\"></a>\n### 调试\n\n<a name=\"hURI2\"></a>\n## 监控\n<a name=\"vef6X\"></a>\n### 常用监控工具\n<a name=\"BZ1A7\"></a>\n#### 基础故障处理工具\n\n- jps：虚拟机进程状况工具\n   - 列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID。\n- jstat（statistic）：虚拟机统计信息监视工具\n   - 监视虚拟机各种运行状态信息，显示本地/远程虚拟机进程中的类加载、内存、gc垃圾收集等运行时数据。\n- jinfo：Java配置信息工具\n   - 实时查看和调整虚拟机各项参数。\n- jmap：Java内存映像工具\n   - 生成堆转储快照（dump文件）；查询finalize执行队列、Java堆和方法区的详细信息。\n   - 频繁GC可以使用jmap进行问题定位\n- jhat：虚拟机堆转储快照分析工具\n   - 与jmap搭配使用，分析jmap生成的堆转储快照。\n- jstack：Java堆栈跟踪工具\n   - 生成虚拟机当前时刻的线程快照，定位线程出现长时间停顿的原因，具体可以分析：\n      - 死锁，死循环，请求外部资源阻塞，线程wait(), sleep() 等。\n<a name=\"zQLAU\"></a>\n#### 可视化故障处理工具\n\n- JConsole：Java监视与管理控制台\n- VisualVM：多合一故障处理工具\n- JMC：可持续在线的监控工具\n- MAT：内存分析工具\n\n",
    "body_draft": "<a name=\"RDx8o\"></a>\n## 启动参数\nJava的启动参数有**运行时参数** 和 **JVM 参数**，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。\n<a name=\"koXZa\"></a>\n### 标准参数\n标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用\n<a name=\"BbgMg\"></a>\n### 非标X参数\n非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM 都实现，不保证向后兼容\n\n-  -Xms（memory start）：堆初始大小（默认为物理内存的1/64） \n-  -Xmx（memory max）：堆最大值（默认为物理内存的1/4或者1G） \n-  -Xss（stack size）：线程栈的大小（一般默认为512k） \n-  -Xmn：年轻代的初始值及最大值（可用 -XX:NewSize 和 -XX:MaxNewSize 来分别设置）\n- -Xmixed：默认为混合模式，开始解释执行，启动速度较快，对热点代码实行检测和编译。 \n- -Xint： 使用解释模式，启动很快，执行稍慢。 \n- -Xcomp: 使用纯编译模式，执行很快，启动很慢。\n<a name=\"ENd8b\"></a>\n### 非标XX参数\n非标XX参数(-XX)：各个 JVM 实现会有所不同，将来可能会随时取消\n\n- -XX:MaxDirectMemorySize ——最大非堆内存\n\n<a name=\"Qj0gp\"></a>\n### 调试\n\n<a name=\"hURI2\"></a>\n## 监控\n<a name=\"vef6X\"></a>\n### 常用监控工具\n<a name=\"BZ1A7\"></a>\n#### 基础故障处理工具\n\n- jps：虚拟机进程状况工具\n   - 列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID。\n- jstat（statistic）：虚拟机统计信息监视工具\n   - 监视虚拟机各种运行状态信息，显示本地/远程虚拟机进程中的类加载、内存、gc垃圾收集等运行时数据。\n- jinfo：Java配置信息工具\n   - 实时查看和调整虚拟机各项参数。\n- jmap：Java内存映像工具\n   - 生成堆转储快照（dump文件）；查询finalize执行队列、Java堆和方法区的详细信息。\n   - 频繁GC可以使用jmap进行问题定位\n- jhat：虚拟机堆转储快照分析工具\n   - 与jmap搭配使用，分析jmap生成的堆转储快照。\n- jstack：Java堆栈跟踪工具\n   - 生成虚拟机当前时刻的线程快照，定位线程出现长时间停顿的原因，具体可以分析：\n      - 死锁，死循环，请求外部资源阻塞，线程wait(), sleep() 等。\n<a name=\"zQLAU\"></a>\n#### 可视化故障处理工具\n\n- JConsole：Java监视与管理控制台\n- VisualVM：多合一故障处理工具\n- JMC：可持续在线的监控工具\n- MAT：内存分析工具\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"RDx8o\"><span class=\"ne-text\">启动参数</span></h2><p id=\"u8024d29f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">Java的启动参数有</span><strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">运行时参数</span></strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\"> 和 </span><strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">JVM 参数</span></strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。</span></p><h3 id=\"koXZa\"><span class=\"ne-text\">标准参数</span></h3><p id=\"u9a9ad3a6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用</span></p><h3 id=\"BbgMg\"><span class=\"ne-text\">非标X参数</span></h3><p id=\"ube340447\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM 都实现，不保证向后兼容</span></p><ul class=\"ne-ul\"><li id=\"u9e2ba5ef\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\"> -Xms（memory start）：堆初始大小（默认为物理内存的1/64） </span></li><li id=\"u4bfcd67e\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\"> -Xmx（memory max）：堆最大值（默认为物理内存的1/4或者1G） </span></li><li id=\"u52737cd4\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\"> -Xss（stack size）：线程栈的大小（一般默认为512k） </span></li><li id=\"u91d577d4\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\"> -Xmn：年轻代的初始值及最大值（可用 -XX:NewSize 和 -XX:MaxNewSize 来分别设置）</span></li><li id=\"uc49c2fed\"><span class=\"ne-text\" style=\"font-size: 14px\">-Xmixed：</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">默认为混合模式</span><span class=\"ne-text\" style=\"font-size: 14px\">，开始解释执行，启动速度较快，对热点代码实行检测和编译。 </span></li><li id=\"u85d29aeb\"><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">-Xint： 使用解释模式，启动很快，执行稍慢</span><span class=\"ne-text\" style=\"font-size: 14px\">。 </span></li><li id=\"uc9eaaa17\"><span class=\"ne-text\" style=\"font-size: 14px\">-Xcomp: 使用纯编译模式，执行很快，启动很慢。</span></li></ul><h3 id=\"ENd8b\"><span class=\"ne-text\">非标XX参数</span></h3><p id=\"uf6374ed1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">非标XX参数(-XX)：各个 JVM 实现会有所不同，将来可能会随时取消</span></p><ul class=\"ne-ul\"><li id=\"udb906a55\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">-XX:MaxDirectMemorySize ——最大非堆内存</span><span class=\"ne-text\"><br /></span></li></ul><h3 id=\"Qj0gp\"><span class=\"ne-text\">调试</span></h3><p id=\"u6f08b324\" class=\"ne-p\"><br></p><h2 id=\"hURI2\"><span class=\"ne-text\">监控</span></h2><h3 id=\"vef6X\"><span class=\"ne-text\">常用监控工具</span></h3><h4 id=\"BZ1A7\"><span class=\"ne-text\">基础故障处理工具</span></h4><ul class=\"ne-ul\"><li id=\"uf261ed56\"><span class=\"ne-text\" style=\"font-size: 14px\">j</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">ps</span><span class=\"ne-text\" style=\"font-size: 14px\">：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">虚拟机进程状况工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uaa3d7887\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u9cc491e8\"><span class=\"ne-text\" style=\"font-size: 14px\">j</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">stat</span><span class=\"ne-text\" style=\"font-size: 14px\">（statistic）：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">虚拟机统计信息监视工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ub0263923\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">监视虚拟机</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px; background-color: #CEF5F7\">各种运行状态信息</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">，显示本地/远程虚拟机进程中的类加载、内存、</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">gc垃圾</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">收集等运行时数据。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u694028a6\"><span class=\"ne-text\" style=\"font-size: 14px\">jinfo：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Java配置信息工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u3e7b7e03\"><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">实时查看和调整</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">虚拟机各项</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">参数</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"uec63bfdd\"><span class=\"ne-text\" style=\"font-size: 14px\">j</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">map</span><span class=\"ne-text\" style=\"font-size: 14px\">：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Java内存映像工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u48c1043d\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">生成堆转储快照（dump文件）；查询finalize执行队列、Java堆和方法区的详细信息。</span></li><li id=\"u4c1b1e64\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px; background-color: #CEF5F7\">频繁GC可以使用jmap进行问题定位</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u9b6fe591\"><span class=\"ne-text\" style=\"font-size: 14px\">jhat：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">虚拟机堆转储快照分析工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ud3916295\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">与jmap搭配使用，分析jmap生成的堆转储快照。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u4ab51c45\"><span class=\"ne-text\" style=\"font-size: 14px\">jstack：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Java堆栈跟踪工具</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u844afe66\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">生成虚拟机当前时刻的线程快照，定位线程出现长时间停顿的原因，具体可以分析：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u6cc51064\"><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">死锁，死循环，请求外部资源阻塞，线程wait(), sleep() 等</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">。</span></li></ul></ul></ul><h4 id=\"zQLAU\"><span class=\"ne-text\">可视化故障处理工具</span></h4><ul class=\"ne-ul\"><li id=\"uf04feab9\"><span class=\"ne-text\" style=\"font-size: 14px\">JConsole：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Java监视与管理控制台</span></li><li id=\"u824434ca\"><span class=\"ne-text\" style=\"font-size: 14px\">VisualVM：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">多合一故障处理工具</span></li><li id=\"u22d1d017\"><span class=\"ne-text\" style=\"font-size: 14px\">JMC：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">可持续在线的监控工具</span></li><li id=\"u2c37f923\"><span class=\"ne-text\" style=\"font-size: 14px\">MAT：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">内存分析工具</span></li></ul><p id=\"u63a994b6\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"RDx8o\" id=\"RDx8o\"><span data-lake-id=\"u5357b699\" id=\"u5357b699\">启动参数</span></h2><p data-lake-id=\"u8024d29f\" id=\"u8024d29f\"><span data-lake-id=\"ud7faa841\" id=\"ud7faa841\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">Java的启动参数有</span><strong><span data-lake-id=\"udb4794e2\" id=\"udb4794e2\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">运行时参数</span></strong><span data-lake-id=\"u68c0a383\" id=\"u68c0a383\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> 和 </span><strong><span data-lake-id=\"uc258b0f4\" id=\"uc258b0f4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JVM 参数</span></strong><span data-lake-id=\"ueda2a5ea\" id=\"ueda2a5ea\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。</span></p><h3 data-lake-id=\"koXZa\" id=\"koXZa\"><span data-lake-id=\"ua0a28b7e\" id=\"ua0a28b7e\">标准参数</span></h3><p data-lake-id=\"u9a9ad3a6\" id=\"u9a9ad3a6\"><span data-lake-id=\"u56b09567\" id=\"u56b09567\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用</span></p><h3 data-lake-id=\"BbgMg\" id=\"BbgMg\"><span data-lake-id=\"udc64398a\" id=\"udc64398a\">非标X参数</span></h3><p data-lake-id=\"ube340447\" id=\"ube340447\"><span data-lake-id=\"u2717bb06\" id=\"u2717bb06\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM 都实现，不保证向后兼容</span></p><ul list=\"u7b94b0c3\"><li fid=\"u94e2c7f7\" data-lake-id=\"u9e2ba5ef\" id=\"u9e2ba5ef\"><span data-lake-id=\"ufd5c0915\" id=\"ufd5c0915\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xms（memory start）：堆初始大小（默认为物理内存的1/64） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u4bfcd67e\" id=\"u4bfcd67e\"><span data-lake-id=\"u7261d697\" id=\"u7261d697\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xmx（memory max）：堆最大值（默认为物理内存的1/4或者1G） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u52737cd4\" id=\"u52737cd4\"><span data-lake-id=\"uea95d0dc\" id=\"uea95d0dc\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xss（stack size）：线程栈的大小（一般默认为512k） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u91d577d4\" id=\"u91d577d4\"><span data-lake-id=\"u86c1a9e0\" id=\"u86c1a9e0\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xmn：年轻代的初始值及最大值（可用 -XX:NewSize 和 -XX:MaxNewSize 来分别设置）</span></li><li fid=\"u94e2c7f7\" data-lake-id=\"uc49c2fed\" id=\"uc49c2fed\"><span data-lake-id=\"u256f44e3\" id=\"u256f44e3\" class=\"lake-fontsize-11\">-Xmixed：</span><span data-lake-id=\"u3c7f00be\" id=\"u3c7f00be\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">默认为混合模式</span><span data-lake-id=\"uda436a01\" id=\"uda436a01\" class=\"lake-fontsize-11\">，开始解释执行，启动速度较快，对热点代码实行检测和编译。 </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u85d29aeb\" id=\"u85d29aeb\"><span data-lake-id=\"ub3f90eb8\" id=\"ub3f90eb8\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">-Xint： 使用解释模式，启动很快，执行稍慢</span><span data-lake-id=\"uf1ec4e05\" id=\"uf1ec4e05\" class=\"lake-fontsize-11\">。 </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"uc9eaaa17\" id=\"uc9eaaa17\"><span data-lake-id=\"u4feaaa67\" id=\"u4feaaa67\" class=\"lake-fontsize-11\">-Xcomp: 使用纯编译模式，执行很快，启动很慢。</span></li></ul><h3 data-lake-id=\"ENd8b\" id=\"ENd8b\"><span data-lake-id=\"u9d932ee0\" id=\"u9d932ee0\">非标XX参数</span></h3><p data-lake-id=\"uf6374ed1\" id=\"uf6374ed1\"><span data-lake-id=\"uec0a9582\" id=\"uec0a9582\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">非标XX参数(-XX)：各个 JVM 实现会有所不同，将来可能会随时取消</span></p><ul list=\"uc016a55d\"><li fid=\"u72b3e674\" data-lake-id=\"udb906a55\" id=\"udb906a55\"><span data-lake-id=\"udf289e19\" id=\"udf289e19\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">-XX:MaxDirectMemorySize ——最大非堆内存</span><span data-lake-id=\"uf93d65bf\" id=\"uf93d65bf\"><br /><br /></span></li></ul><h3 data-lake-id=\"Qj0gp\" id=\"Qj0gp\"><span data-lake-id=\"u590b66a4\" id=\"u590b66a4\">调试</span></h3><p data-lake-id=\"u6f08b324\" id=\"u6f08b324\"><br></p><h2 data-lake-id=\"hURI2\" id=\"hURI2\"><span data-lake-id=\"ua9b7c1d4\" id=\"ua9b7c1d4\">监控</span></h2><h3 data-lake-id=\"vef6X\" id=\"vef6X\"><span data-lake-id=\"uddf4a380\" id=\"uddf4a380\">常用监控工具</span></h3><h4 data-lake-id=\"BZ1A7\" id=\"BZ1A7\"><span data-lake-id=\"uba4f4500\" id=\"uba4f4500\">基础故障处理工具</span></h4><ul list=\"u2f0b6b49\"><li fid=\"u4d0624ba\" data-lake-id=\"uf261ed56\" id=\"uf261ed56\"><span data-lake-id=\"ub41e45eb\" id=\"ub41e45eb\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"u5c0cb64c\" id=\"u5c0cb64c\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">ps</span><span data-lake-id=\"u94daf8de\" id=\"u94daf8de\" class=\"lake-fontsize-11\">：</span><span data-lake-id=\"ucbf8a93b\" id=\"ucbf8a93b\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机进程状况工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"uaa3d7887\" id=\"uaa3d7887\"><span data-lake-id=\"u9793c7a0\" id=\"u9793c7a0\" class=\"lake-fontsize-11\" style=\"color: #303030\">列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID。</span></li></ul><ul list=\"u2f0b6b49\" start=\"2\"><li fid=\"u4d0624ba\" data-lake-id=\"u9cc491e8\" id=\"u9cc491e8\"><span data-lake-id=\"u6e5686b9\" id=\"u6e5686b9\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"uc8d45964\" id=\"uc8d45964\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">stat</span><span data-lake-id=\"u64fba6ea\" id=\"u64fba6ea\" class=\"lake-fontsize-11\">（statistic）：</span><span data-lake-id=\"u6baef2b4\" id=\"u6baef2b4\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机统计信息监视工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"ub0263923\" id=\"ub0263923\"><span data-lake-id=\"ud1a12769\" id=\"ud1a12769\" class=\"lake-fontsize-11\" style=\"color: #303030\">监视虚拟机</span><span data-lake-id=\"u4cc5605c\" id=\"u4cc5605c\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">各种运行状态信息</span><span data-lake-id=\"uecc37c5a\" id=\"uecc37c5a\" class=\"lake-fontsize-11\" style=\"color: #303030\">，显示本地/远程虚拟机进程中的类加载、内存、</span><span data-lake-id=\"uc1a56a1e\" id=\"uc1a56a1e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">gc垃圾</span><span data-lake-id=\"u825a518a\" id=\"u825a518a\" class=\"lake-fontsize-11\" style=\"color: #303030\">收集等运行时数据。</span></li></ul><ul list=\"u2f0b6b49\" start=\"3\"><li fid=\"u4d0624ba\" data-lake-id=\"u694028a6\" id=\"u694028a6\"><span data-lake-id=\"ud6f7438c\" id=\"ud6f7438c\" class=\"lake-fontsize-11\">jinfo：</span><span data-lake-id=\"u3168bdd5\" id=\"u3168bdd5\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java配置信息工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u3e7b7e03\" id=\"u3e7b7e03\"><span data-lake-id=\"u15f1b75c\" id=\"u15f1b75c\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">实时查看和调整</span><span data-lake-id=\"u9928e6c3\" id=\"u9928e6c3\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机各项</span><span data-lake-id=\"u9d8fb0f4\" id=\"u9d8fb0f4\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">参数</span><span data-lake-id=\"u31942115\" id=\"u31942115\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></li></ul><ul list=\"u2f0b6b49\" start=\"4\"><li fid=\"u4d0624ba\" data-lake-id=\"uec63bfdd\" id=\"uec63bfdd\"><span data-lake-id=\"u7b3567e1\" id=\"u7b3567e1\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"ubf4233bb\" id=\"ubf4233bb\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">map</span><span data-lake-id=\"u829d0f48\" id=\"u829d0f48\" class=\"lake-fontsize-11\">：</span><span data-lake-id=\"u2ff81b0c\" id=\"u2ff81b0c\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java内存映像工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u48c1043d\" id=\"u48c1043d\"><span data-lake-id=\"uf58d0288\" id=\"uf58d0288\" class=\"lake-fontsize-11\" style=\"color: #303030\">生成堆转储快照（dump文件）；查询finalize执行队列、Java堆和方法区的详细信息。</span></li><li fid=\"u4d0624ba\" data-lake-id=\"u4c1b1e64\" id=\"u4c1b1e64\"><span data-lake-id=\"u3e82d896\" id=\"u3e82d896\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">频繁GC可以使用jmap进行问题定位</span></li></ul><ul list=\"u2f0b6b49\" start=\"5\"><li fid=\"u4d0624ba\" data-lake-id=\"u9b6fe591\" id=\"u9b6fe591\"><span data-lake-id=\"u5ff24ebd\" id=\"u5ff24ebd\" class=\"lake-fontsize-11\">jhat：</span><span data-lake-id=\"u3dc11b2d\" id=\"u3dc11b2d\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机堆转储快照分析工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"ud3916295\" id=\"ud3916295\"><span data-lake-id=\"u7ed45b21\" id=\"u7ed45b21\" class=\"lake-fontsize-11\" style=\"color: #303030\">与jmap搭配使用，分析jmap生成的堆转储快照。</span></li></ul><ul list=\"u2f0b6b49\" start=\"6\"><li fid=\"u4d0624ba\" data-lake-id=\"u4ab51c45\" id=\"u4ab51c45\"><span data-lake-id=\"u97efd56c\" id=\"u97efd56c\" class=\"lake-fontsize-11\">jstack：</span><span data-lake-id=\"u3be81cc0\" id=\"u3be81cc0\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java堆栈跟踪工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u844afe66\" id=\"u844afe66\"><span data-lake-id=\"u035003aa\" id=\"u035003aa\" class=\"lake-fontsize-11\" style=\"color: #303030\">生成虚拟机当前时刻的线程快照，定位线程出现长时间停顿的原因，具体可以分析：</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"2\"><li fid=\"u4d0624ba\" data-lake-id=\"u6cc51064\" id=\"u6cc51064\"><span data-lake-id=\"ubb9e5a68\" id=\"ubb9e5a68\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">死锁，死循环，请求外部资源阻塞，线程wait(), sleep() 等</span><span data-lake-id=\"u64e21ec1\" id=\"u64e21ec1\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></li></ul><h4 data-lake-id=\"zQLAU\" id=\"zQLAU\"><span data-lake-id=\"u67a77ab6\" id=\"u67a77ab6\">可视化故障处理工具</span></h4><ul list=\"u80624e50\"><li fid=\"u87b7f008\" data-lake-id=\"uf04feab9\" id=\"uf04feab9\"><span data-lake-id=\"u8ca8fca5\" id=\"u8ca8fca5\" class=\"lake-fontsize-11\">JConsole：</span><span data-lake-id=\"u6fce5541\" id=\"u6fce5541\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java监视与管理控制台</span></li><li fid=\"u87b7f008\" data-lake-id=\"u824434ca\" id=\"u824434ca\"><span data-lake-id=\"u1d7dd2e8\" id=\"u1d7dd2e8\" class=\"lake-fontsize-11\">VisualVM：</span><span data-lake-id=\"u8748fabe\" id=\"u8748fabe\" class=\"lake-fontsize-11\" style=\"color: #303030\">多合一故障处理工具</span></li><li fid=\"u87b7f008\" data-lake-id=\"u22d1d017\" id=\"u22d1d017\"><span data-lake-id=\"u021546db\" id=\"u021546db\" class=\"lake-fontsize-11\">JMC：</span><span data-lake-id=\"u2b0a95ea\" id=\"u2b0a95ea\" class=\"lake-fontsize-11\" style=\"color: #303030\">可持续在线的监控工具</span></li><li fid=\"u87b7f008\" data-lake-id=\"u2c37f923\" id=\"u2c37f923\"><span data-lake-id=\"u0c28046a\" id=\"u0c28046a\" class=\"lake-fontsize-11\">MAT：</span><span data-lake-id=\"u20e5bdde\" id=\"u20e5bdde\" class=\"lake-fontsize-11\" style=\"color: #303030\">内存分析工具</span></li></ul><p data-lake-id=\"u63a994b6\" id=\"u63a994b6\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"RDx8o\" id=\"RDx8o\"><span data-lake-id=\"u5357b699\" id=\"u5357b699\">启动参数</span></h2><p data-lake-id=\"u8024d29f\" id=\"u8024d29f\"><span data-lake-id=\"ud7faa841\" id=\"ud7faa841\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">Java的启动参数有</span><strong><span data-lake-id=\"udb4794e2\" id=\"udb4794e2\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">运行时参数</span></strong><span data-lake-id=\"u68c0a383\" id=\"u68c0a383\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> 和 </span><strong><span data-lake-id=\"uc258b0f4\" id=\"uc258b0f4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JVM 参数</span></strong><span data-lake-id=\"ueda2a5ea\" id=\"ueda2a5ea\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。</span></p><h3 data-lake-id=\"koXZa\" id=\"koXZa\"><span data-lake-id=\"ua0a28b7e\" id=\"ua0a28b7e\">标准参数</span></h3><p data-lake-id=\"u9a9ad3a6\" id=\"u9a9ad3a6\"><span data-lake-id=\"u56b09567\" id=\"u56b09567\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用</span></p><h3 data-lake-id=\"BbgMg\" id=\"BbgMg\"><span data-lake-id=\"udc64398a\" id=\"udc64398a\">非标X参数</span></h3><p data-lake-id=\"ube340447\" id=\"ube340447\"><span data-lake-id=\"u2717bb06\" id=\"u2717bb06\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM 都实现，不保证向后兼容</span></p><ul list=\"u7b94b0c3\"><li fid=\"u94e2c7f7\" data-lake-id=\"u9e2ba5ef\" id=\"u9e2ba5ef\"><span data-lake-id=\"ufd5c0915\" id=\"ufd5c0915\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xms（memory start）：堆初始大小（默认为物理内存的1/64） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u4bfcd67e\" id=\"u4bfcd67e\"><span data-lake-id=\"u7261d697\" id=\"u7261d697\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xmx（memory max）：堆最大值（默认为物理内存的1/4或者1G） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u52737cd4\" id=\"u52737cd4\"><span data-lake-id=\"uea95d0dc\" id=\"uea95d0dc\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xss（stack size）：线程栈的大小（一般默认为512k） </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u91d577d4\" id=\"u91d577d4\"><span data-lake-id=\"u86c1a9e0\" id=\"u86c1a9e0\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\"> -Xmn：年轻代的初始值及最大值（可用 -XX:NewSize 和 -XX:MaxNewSize 来分别设置）</span></li><li fid=\"u94e2c7f7\" data-lake-id=\"uc49c2fed\" id=\"uc49c2fed\"><span data-lake-id=\"u256f44e3\" id=\"u256f44e3\" class=\"lake-fontsize-11\">-Xmixed：</span><span data-lake-id=\"u3c7f00be\" id=\"u3c7f00be\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">默认为混合模式</span><span data-lake-id=\"uda436a01\" id=\"uda436a01\" class=\"lake-fontsize-11\">，开始解释执行，启动速度较快，对热点代码实行检测和编译。 </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"u85d29aeb\" id=\"u85d29aeb\"><span data-lake-id=\"ub3f90eb8\" id=\"ub3f90eb8\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">-Xint： 使用解释模式，启动很快，执行稍慢</span><span data-lake-id=\"uf1ec4e05\" id=\"uf1ec4e05\" class=\"lake-fontsize-11\">。 </span></li><li fid=\"u94e2c7f7\" data-lake-id=\"uc9eaaa17\" id=\"uc9eaaa17\"><span data-lake-id=\"u4feaaa67\" id=\"u4feaaa67\" class=\"lake-fontsize-11\">-Xcomp: 使用纯编译模式，执行很快，启动很慢。</span></li></ul><h3 data-lake-id=\"ENd8b\" id=\"ENd8b\"><span data-lake-id=\"u9d932ee0\" id=\"u9d932ee0\">非标XX参数</span></h3><p data-lake-id=\"uf6374ed1\" id=\"uf6374ed1\"><span data-lake-id=\"uec0a9582\" id=\"uec0a9582\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">非标XX参数(-XX)：各个 JVM 实现会有所不同，将来可能会随时取消</span></p><ul list=\"uc016a55d\"><li fid=\"u72b3e674\" data-lake-id=\"udb906a55\" id=\"udb906a55\"><span data-lake-id=\"udf289e19\" id=\"udf289e19\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">-XX:MaxDirectMemorySize ——最大非堆内存</span><span data-lake-id=\"uf93d65bf\" id=\"uf93d65bf\"><br /><br /></span></li></ul><h3 data-lake-id=\"Qj0gp\" id=\"Qj0gp\"><span data-lake-id=\"u590b66a4\" id=\"u590b66a4\">调试</span></h3><p data-lake-id=\"u6f08b324\" id=\"u6f08b324\"><br></p><h2 data-lake-id=\"hURI2\" id=\"hURI2\"><span data-lake-id=\"ua9b7c1d4\" id=\"ua9b7c1d4\">监控</span></h2><h3 data-lake-id=\"vef6X\" id=\"vef6X\"><span data-lake-id=\"uddf4a380\" id=\"uddf4a380\">常用监控工具</span></h3><h4 data-lake-id=\"BZ1A7\" id=\"BZ1A7\"><span data-lake-id=\"uba4f4500\" id=\"uba4f4500\">基础故障处理工具</span></h4><ul list=\"u2f0b6b49\"><li fid=\"u4d0624ba\" data-lake-id=\"uf261ed56\" id=\"uf261ed56\"><span data-lake-id=\"ub41e45eb\" id=\"ub41e45eb\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"u5c0cb64c\" id=\"u5c0cb64c\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">ps</span><span data-lake-id=\"u94daf8de\" id=\"u94daf8de\" class=\"lake-fontsize-11\">：</span><span data-lake-id=\"ucbf8a93b\" id=\"ucbf8a93b\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机进程状况工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"uaa3d7887\" id=\"uaa3d7887\"><span data-lake-id=\"u9793c7a0\" id=\"u9793c7a0\" class=\"lake-fontsize-11\" style=\"color: #303030\">列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID。</span></li></ul><ul list=\"u2f0b6b49\" start=\"2\"><li fid=\"u4d0624ba\" data-lake-id=\"u9cc491e8\" id=\"u9cc491e8\"><span data-lake-id=\"u6e5686b9\" id=\"u6e5686b9\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"uc8d45964\" id=\"uc8d45964\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">stat</span><span data-lake-id=\"u64fba6ea\" id=\"u64fba6ea\" class=\"lake-fontsize-11\">（statistic）：</span><span data-lake-id=\"u6baef2b4\" id=\"u6baef2b4\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机统计信息监视工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"ub0263923\" id=\"ub0263923\"><span data-lake-id=\"ud1a12769\" id=\"ud1a12769\" class=\"lake-fontsize-11\" style=\"color: #303030\">监视虚拟机</span><span data-lake-id=\"u4cc5605c\" id=\"u4cc5605c\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">各种运行状态信息</span><span data-lake-id=\"uecc37c5a\" id=\"uecc37c5a\" class=\"lake-fontsize-11\" style=\"color: #303030\">，显示本地/远程虚拟机进程中的类加载、内存、</span><span data-lake-id=\"uc1a56a1e\" id=\"uc1a56a1e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">gc垃圾</span><span data-lake-id=\"u825a518a\" id=\"u825a518a\" class=\"lake-fontsize-11\" style=\"color: #303030\">收集等运行时数据。</span></li></ul><ul list=\"u2f0b6b49\" start=\"3\"><li fid=\"u4d0624ba\" data-lake-id=\"u694028a6\" id=\"u694028a6\"><span data-lake-id=\"ud6f7438c\" id=\"ud6f7438c\" class=\"lake-fontsize-11\">jinfo：</span><span data-lake-id=\"u3168bdd5\" id=\"u3168bdd5\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java配置信息工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u3e7b7e03\" id=\"u3e7b7e03\"><span data-lake-id=\"u15f1b75c\" id=\"u15f1b75c\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">实时查看和调整</span><span data-lake-id=\"u9928e6c3\" id=\"u9928e6c3\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机各项</span><span data-lake-id=\"u9d8fb0f4\" id=\"u9d8fb0f4\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">参数</span><span data-lake-id=\"u31942115\" id=\"u31942115\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></li></ul><ul list=\"u2f0b6b49\" start=\"4\"><li fid=\"u4d0624ba\" data-lake-id=\"uec63bfdd\" id=\"uec63bfdd\"><span data-lake-id=\"u7b3567e1\" id=\"u7b3567e1\" class=\"lake-fontsize-11\">j</span><span data-lake-id=\"ubf4233bb\" id=\"ubf4233bb\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">map</span><span data-lake-id=\"u829d0f48\" id=\"u829d0f48\" class=\"lake-fontsize-11\">：</span><span data-lake-id=\"u2ff81b0c\" id=\"u2ff81b0c\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java内存映像工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u48c1043d\" id=\"u48c1043d\"><span data-lake-id=\"uf58d0288\" id=\"uf58d0288\" class=\"lake-fontsize-11\" style=\"color: #303030\">生成堆转储快照（dump文件）；查询finalize执行队列、Java堆和方法区的详细信息。</span></li><li fid=\"u4d0624ba\" data-lake-id=\"u4c1b1e64\" id=\"u4c1b1e64\"><span data-lake-id=\"u3e82d896\" id=\"u3e82d896\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">频繁GC可以使用jmap进行问题定位</span></li></ul><ul list=\"u2f0b6b49\" start=\"5\"><li fid=\"u4d0624ba\" data-lake-id=\"u9b6fe591\" id=\"u9b6fe591\"><span data-lake-id=\"u5ff24ebd\" id=\"u5ff24ebd\" class=\"lake-fontsize-11\">jhat：</span><span data-lake-id=\"u3dc11b2d\" id=\"u3dc11b2d\" class=\"lake-fontsize-11\" style=\"color: #303030\">虚拟机堆转储快照分析工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"ud3916295\" id=\"ud3916295\"><span data-lake-id=\"u7ed45b21\" id=\"u7ed45b21\" class=\"lake-fontsize-11\" style=\"color: #303030\">与jmap搭配使用，分析jmap生成的堆转储快照。</span></li></ul><ul list=\"u2f0b6b49\" start=\"6\"><li fid=\"u4d0624ba\" data-lake-id=\"u4ab51c45\" id=\"u4ab51c45\"><span data-lake-id=\"u97efd56c\" id=\"u97efd56c\" class=\"lake-fontsize-11\">jstack：</span><span data-lake-id=\"u3be81cc0\" id=\"u3be81cc0\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java堆栈跟踪工具</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"1\"><li fid=\"u4d0624ba\" data-lake-id=\"u844afe66\" id=\"u844afe66\"><span data-lake-id=\"u035003aa\" id=\"u035003aa\" class=\"lake-fontsize-11\" style=\"color: #303030\">生成虚拟机当前时刻的线程快照，定位线程出现长时间停顿的原因，具体可以分析：</span></li></ul><ul list=\"u2f0b6b49\" data-lake-indent=\"2\"><li fid=\"u4d0624ba\" data-lake-id=\"u6cc51064\" id=\"u6cc51064\"><span data-lake-id=\"ubb9e5a68\" id=\"ubb9e5a68\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">死锁，死循环，请求外部资源阻塞，线程wait(), sleep() 等</span><span data-lake-id=\"u64e21ec1\" id=\"u64e21ec1\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></li></ul><h4 data-lake-id=\"zQLAU\" id=\"zQLAU\"><span data-lake-id=\"u67a77ab6\" id=\"u67a77ab6\">可视化故障处理工具</span></h4><ul list=\"u80624e50\"><li fid=\"u87b7f008\" data-lake-id=\"uf04feab9\" id=\"uf04feab9\"><span data-lake-id=\"u8ca8fca5\" id=\"u8ca8fca5\" class=\"lake-fontsize-11\">JConsole：</span><span data-lake-id=\"u6fce5541\" id=\"u6fce5541\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java监视与管理控制台</span></li><li fid=\"u87b7f008\" data-lake-id=\"u824434ca\" id=\"u824434ca\"><span data-lake-id=\"u1d7dd2e8\" id=\"u1d7dd2e8\" class=\"lake-fontsize-11\">VisualVM：</span><span data-lake-id=\"u8748fabe\" id=\"u8748fabe\" class=\"lake-fontsize-11\" style=\"color: #303030\">多合一故障处理工具</span></li><li fid=\"u87b7f008\" data-lake-id=\"u22d1d017\" id=\"u22d1d017\"><span data-lake-id=\"u021546db\" id=\"u021546db\" class=\"lake-fontsize-11\">JMC：</span><span data-lake-id=\"u2b0a95ea\" id=\"u2b0a95ea\" class=\"lake-fontsize-11\" style=\"color: #303030\">可持续在线的监控工具</span></li><li fid=\"u87b7f008\" data-lake-id=\"u2c37f923\" id=\"u2c37f923\"><span data-lake-id=\"u0c28046a\" id=\"u0c28046a\" class=\"lake-fontsize-11\">MAT：</span><span data-lake-id=\"u20e5bdde\" id=\"u20e5bdde\" class=\"lake-fontsize-11\" style=\"color: #303030\">内存分析工具</span></li></ul><p data-lake-id=\"u63a994b6\" id=\"u63a994b6\"><br></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-13T15:13:54.000Z",
    "deleted_at": null,
    "created_at": "2023-01-29T02:42:55.000Z",
    "updated_at": "2023-02-13T15:13:54.000Z",
    "published_at": "2023-02-13T15:13:54.000Z",
    "first_published_at": "2023-01-29T02:43:15.779Z",
    "word_count": 695,
    "cover": null,
    "description": "启动参数Java的启动参数有运行时参数 和 JVM 参数，运行时参数就是 main 方法中的 args，而 JVM 参数是我们最常用的启动参数。标准参数标准参数(-)：相对稳定的参数，每个版本的 JVM 都可用非标X参数非标X参数(-X)：默认 JVM 实现参数的功能，但是不保证所有 JVM ...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112554015,
    "slug": "swgrkyhqolzxiykd",
    "title": "编程规范与安全",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"eCqfY\"></a>\n## 规范\n<a name=\"nXLQn\"></a>\n#### 语法\n\n1. 空行：变量命名之间有空行。\n2. 泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2\n```java\npublic class Box<T2>\n```\n\n3. 避免文件过长，不超过2000行（非空非注释行）\n4. 避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。\n5. 嵌套不要超过4层\n6. 提交的代码重复率小于 10%。\n<a name=\"inJ66\"></a>\n## License\n在编程中，如果使用到了别人提供的代码或库，则涉及到开源许可（license）的问题，需要关注该代码使用的是什么license。根据 license 的严格程度可以分为：MIT > BSD > Apache > MPL> LGPL > GPL\n\n- 修改源码后可以闭源：MIT, BSD, Apache\n- MPL：涉及MPL部分的代码以及修改了MPL的代码需要开源，自己的代码可以闭源。\n- 通过动态链接的代码不需要开源，如果静态链接一个基于LGPL的库，则需要开放使用了该库的所有代码\n- 使用源码后，新增源码也要使用该协议：GPL（具有传染性）\n<a name=\"gPejp\"></a>\n## 加密算法\n<a name=\"IDrCZ\"></a>\n### 安全\n\n- RSA：密钥长度 > 2048\n- DSA：用于证书密钥/数字签名\n- ECDSA：用于证书密钥/数字签名\n- 加入盐值的 SHA256\n<a name=\"aKan3\"></a>\n### 不安全\n\n- DES：在所有场景下都不安全。\n- MD5：不应用于数字签名或密码加密。\n- AES-ECB\n<a name=\"BnEEr\"></a>\n## Java 安全管理器（SecurityManager）\n当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。\n<a name=\"bCuLz\"></a>\n### 启动方式\n```bash\n-Djava.security.manager\n```\n```java\nSystem.setSecurityManager(new SecurityManager());\n```\n<a name=\"mRqm7\"></a>\n### 配置基本原则\n\n1. 没有配置的权限表示没有。\n2. 只能配置有什么权限，不能配置禁止做什么。\n3. 同一种权限可多次配置，取并集。\n4. 统一资源的多种权限可用逗号分割。\n<a name=\"lxKrj\"></a>\n### 用途\n\n1. SecurityManager可以用来控制监听端口，控制是否自己停止线程，控制能否读取系统参数，控制加载某些类。\n<a name=\"YJo41\"></a>\n## 漏洞攻击\n<a name=\"EtJwh\"></a>\n### 命令注入\n\n- 可能导致命令注入的字符：|、;、&、$、>、<、`、\\、!、\\n\n",
    "body_draft": "<a name=\"eCqfY\"></a>\n## 规范\n<a name=\"nXLQn\"></a>\n#### 语法\n\n1. 空行：变量命名之间有空行。\n2. 泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2\n```java\npublic class Box<T2>\n```\n\n3. 避免文件过长，不超过2000行（非空非注释行）\n4. 避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。\n5. 嵌套不要超过4层\n6. 提交的代码重复率小于 10%。\n<a name=\"inJ66\"></a>\n## License\n在编程中，如果使用到了别人提供的代码或库，则涉及到开源许可（license）的问题，需要关注该代码使用的是什么license。根据 license 的严格程度可以分为：MIT > BSD > Apache > MPL> LGPL > GPL\n\n- 修改源码后可以闭源：MIT, BSD, Apache\n- MPL：涉及MPL部分的代码以及修改了MPL的代码需要开源，自己的代码可以闭源。\n- 通过动态链接的代码不需要开源，如果静态链接一个基于LGPL的库，则需要开放使用了该库的所有代码\n- 使用源码后，新增源码也要使用该协议：GPL（具有传染性）\n<a name=\"gPejp\"></a>\n## 加密算法\n<a name=\"IDrCZ\"></a>\n### 安全\n\n- RSA：密钥长度 > 2048\n- DSA：用于证书密钥/数字签名\n- ECDSA：用于证书密钥/数字签名\n- 加入盐值的 SHA256\n<a name=\"aKan3\"></a>\n### 不安全\n\n- DES：在所有场景下都不安全。\n- MD5：不应用于数字签名或密码加密。\n- AES-ECB\n<a name=\"BnEEr\"></a>\n## Java 安全管理器（SecurityManager）\n当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。\n<a name=\"bCuLz\"></a>\n### 启动方式\n```bash\n-Djava.security.manager\n```\n```java\nSystem.setSecurityManager(new SecurityManager());\n```\n<a name=\"mRqm7\"></a>\n### 配置基本原则\n\n1. 没有配置的权限表示没有。\n2. 只能配置有什么权限，不能配置禁止做什么。\n3. 同一种权限可多次配置，取并集。\n4. 统一资源的多种权限可用逗号分割。\n<a name=\"lxKrj\"></a>\n### 用途\n\n1. SecurityManager可以用来控制监听端口，控制是否自己停止线程，控制能否读取系统参数，控制加载某些类。\n<a name=\"YJo41\"></a>\n## 漏洞攻击\n<a name=\"EtJwh\"></a>\n### 命令注入\n\n- 可能导致命令注入的字符：|、;、&、$、>、<、`、\\、!、\\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"eCqfY\"><span class=\"ne-text\">规范</span></h2><h4 id=\"nXLQn\"><span class=\"ne-text\">语法</span></h4><ol class=\"ne-ol\"><li id=\"u23a6c491\"><span class=\"ne-text\" style=\"font-size: 14px\">空行：变量命名之间有空行。</span></li><li id=\"u9a5025fa\"><span class=\"ne-text\" style=\"font-size: 14px\">泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2</span></li></ol><pre data-language=\"java\" id=\"FzkgC\" class=\"ne-codeblock language-java\">public class Box&lt;T2&gt;</pre><ol start=\"3\" class=\"ne-ol\"><li id=\"u562d2ab6\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">避免文件过长，不超过2000行（非空非注释行）</span></li><li id=\"u28aa7c97\"><span class=\"ne-text\" style=\"font-size: 14px\">避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。</span></li><li id=\"u6c862206\"><span class=\"ne-text\" style=\"font-size: 14px\">嵌套不要超过4层</span></li><li id=\"ua77aa154\"><span class=\"ne-text\">提交的代码重复率小于 10%。</span></li></ol><h2 id=\"inJ66\"><span class=\"ne-text\">License</span></h2><p id=\"ucbf614d6\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">在编程中，如果使用到了别人提供的代码或库，则涉及到开源许可（license）的问题，需要关注该代码使用的是什么license。根据 license 的严格程度可以分为：</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">MIT &gt; BSD &gt; Apache &gt; MPL&gt; LGPL &gt; GPL</span></p><ul class=\"ne-ul\"><li id=\"ufdd440d0\"><span class=\"ne-text\" style=\"font-size: 14px\">修改源码后可以闭源：MIT, BSD, Apache</span></li><li id=\"ub0c97385\"><span class=\"ne-text\" style=\"font-size: 14px\">MPL：涉及MPL部分的代码以及修改了MPL的代码需要开源，自己的代码可以闭源。</span></li><li id=\"u4bb65517\"><span class=\"ne-text\" style=\"font-size: 14px\">通过</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">动态链接的代码不需要开源</span><span class=\"ne-text\" style=\"font-size: 14px\">，</span><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">如果静态链接一个基于LGPL的库，则需要开放使用了该库的所有代码</span></li><li id=\"udf6f98f8\"><span class=\"ne-text\" style=\"font-size: 14px\">使用源码后，新增源码也要使用该协议：GPL（具有传染性）</span></li></ul><h2 id=\"gPejp\"><span class=\"ne-text\">加密算法</span></h2><h3 id=\"IDrCZ\"><span class=\"ne-text\">安全</span></h3><ul class=\"ne-ul\"><li id=\"u35d20cc5\"><span class=\"ne-text\" style=\"font-size: 14px\">RSA：密钥长度 &gt; 2048</span></li><li id=\"u0fa7bba3\"><span class=\"ne-text\" style=\"font-size: 14px\">DSA：用于证书密钥/</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">数字签名</span></li><li id=\"uc38bd8c8\"><span class=\"ne-text\" style=\"font-size: 14px\">ECDSA：用于证书密钥/</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">数字签名</span></li><li id=\"ud7681753\"><span class=\"ne-text\" style=\"font-size: 14px\">加入盐值的 SHA256</span></li></ul><h3 id=\"aKan3\"><span class=\"ne-text\">不安全</span></h3><ul class=\"ne-ul\"><li id=\"u98a98229\"><span class=\"ne-text\" style=\"font-size: 14px\">DES：在所有场景下都不安全。</span></li><li id=\"ub97c8187\"><span class=\"ne-text\" style=\"font-size: 14px\">MD5：不应用于数字签名或密码加密。</span></li><li id=\"u11ea8e07\"><span class=\"ne-text\" style=\"font-size: 14px\">AES-ECB</span></li></ul><h2 id=\"BnEEr\"><span class=\"ne-text\">Java 安全管理器（SecurityManager）</span></h2><p id=\"ue20ed768\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。</span></p><h3 id=\"bCuLz\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">启动方式</span></h3><pre data-language=\"bash\" id=\"FZYhC\" class=\"ne-codeblock language-bash\">-Djava.security.manager</pre><pre data-language=\"java\" id=\"mUQqq\" class=\"ne-codeblock language-java\">System.setSecurityManager(new SecurityManager());</pre><h3 id=\"mRqm7\"><span class=\"ne-text\">配置基本原则</span></h3><ol class=\"ne-ol\"><li id=\"u2e56037c\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">没有配置的权限表示没有。</span></li><li id=\"ud2c1b708\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7; font-size: 14px\">只能配置有什么权限</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">，不能配置禁止做什么。</span></li><li id=\"ue92912f3\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">同一种权限可多次配置，取并集。</span></li><li id=\"u830c35d8\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">统一资源的多种权限可用逗号分割。</span></li></ol><h3 id=\"lxKrj\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">用途</span></h3><ol class=\"ne-ol\"><li id=\"u4e22f2be\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">SecurityManager可以用来控制监听端口，控制是否自己停止线程，控制能否读取系统参数，控制加载某些类。</span></li></ol><h2 id=\"YJo41\"><span class=\"ne-text\">漏洞攻击</span></h2><h3 id=\"EtJwh\"><span class=\"ne-text\">命令注入</span></h3><ul class=\"ne-ul\"><li id=\"ufd4b6e0b\"><span class=\"ne-text\" style=\"font-size: 14px\">可能导致命令注入的字符：|、;、&amp;、$、&gt;、&lt;、`、\\、!、\\n</span></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"eCqfY\" id=\"eCqfY\"><span data-lake-id=\"ud3f08514\" id=\"ud3f08514\">规范</span></h2><h4 data-lake-id=\"nXLQn\" id=\"nXLQn\"><span data-lake-id=\"u122bfa54\" id=\"u122bfa54\">语法</span></h4><ol list=\"uc7b64984\"><li fid=\"u4444e0af\" data-lake-id=\"u23a6c491\" id=\"u23a6c491\"><span data-lake-id=\"u9e1f185d\" id=\"u9e1f185d\" class=\"lake-fontsize-11\">空行：变量命名之间有空行。</span></li><li fid=\"u4444e0af\" data-lake-id=\"u9a5025fa\" id=\"u9a5025fa\"><span data-lake-id=\"u09c97eed\" id=\"u09c97eed\" class=\"lake-fontsize-11\">泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Box%3CT2%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FzkgC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u671e535a\" start=\"3\"><li fid=\"ubac34476\" data-lake-id=\"u562d2ab6\" id=\"u562d2ab6\"><span data-lake-id=\"u8d83b4df\" id=\"u8d83b4df\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">避免文件过长，不超过2000行（非空非注释行）</span></li><li fid=\"ubac34476\" data-lake-id=\"u28aa7c97\" id=\"u28aa7c97\"><span data-lake-id=\"u6fcdbc6b\" id=\"u6fcdbc6b\" class=\"lake-fontsize-11\">避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。</span></li><li fid=\"ubac34476\" data-lake-id=\"u6c862206\" id=\"u6c862206\"><span data-lake-id=\"uaa2f2f67\" id=\"uaa2f2f67\" class=\"lake-fontsize-11\">嵌套不要超过4层</span></li><li fid=\"ubac34476\" data-lake-id=\"ua77aa154\" id=\"ua77aa154\"><span data-lake-id=\"u4883a321\" id=\"u4883a321\">提交的代码重复率小于 10%。</span></li></ol><h2 data-lake-id=\"inJ66\" id=\"inJ66\"><span data-lake-id=\"uf17cce80\" id=\"uf17cce80\">License</span></h2><p data-lake-id=\"ucbf614d6\" id=\"ucbf614d6\"><span data-lake-id=\"u292f54a5\" id=\"u292f54a5\" class=\"lake-fontsize-11\">在编程中，如果使用到了别人提供的代码或库，则涉及到开源许可（license）的问题，需要关注该代码使用的是什么license。根据 license 的严格程度可以分为：</span><span data-lake-id=\"u81a7bf93\" id=\"u81a7bf93\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">MIT &gt; BSD &gt; Apache &gt; MPL&gt; LGPL &gt; GPL</span></p><ul list=\"u9929cb84\"><li fid=\"u4c514fe8\" data-lake-id=\"ufdd440d0\" id=\"ufdd440d0\"><span data-lake-id=\"u60493aec\" id=\"u60493aec\" class=\"lake-fontsize-11\">修改源码后可以闭源：MIT, BSD, Apache</span></li><li fid=\"u4c514fe8\" data-lake-id=\"ub0c97385\" id=\"ub0c97385\"><span data-lake-id=\"u9f7993c4\" id=\"u9f7993c4\" class=\"lake-fontsize-11\">MPL：涉及MPL部分的代码以及修改了MPL的代码需要开源，自己的代码可以闭源。</span></li><li fid=\"u4c514fe8\" data-lake-id=\"u4bb65517\" id=\"u4bb65517\"><span data-lake-id=\"uf2583abb\" id=\"uf2583abb\" class=\"lake-fontsize-11\">通过</span><span data-lake-id=\"u47ce60ea\" id=\"u47ce60ea\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">动态链接的代码不需要开源</span><span data-lake-id=\"u30f6f69b\" id=\"u30f6f69b\" class=\"lake-fontsize-11\">，</span><span data-lake-id=\"ud81d9fc1\" id=\"ud81d9fc1\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">如果静态链接一个基于LGPL的库，则需要开放使用了该库的所有代码</span></li><li fid=\"u4c514fe8\" data-lake-id=\"udf6f98f8\" id=\"udf6f98f8\"><span data-lake-id=\"u04574ff6\" id=\"u04574ff6\" class=\"lake-fontsize-11\">使用源码后，新增源码也要使用该协议：GPL（具有传染性）</span></li></ul><h2 data-lake-id=\"gPejp\" id=\"gPejp\"><span data-lake-id=\"u517cadac\" id=\"u517cadac\">加密算法</span></h2><h3 data-lake-id=\"IDrCZ\" id=\"IDrCZ\"><span data-lake-id=\"uf7145c3c\" id=\"uf7145c3c\">安全</span></h3><ul list=\"u5de3b28d\"><li fid=\"ud9f21d3e\" data-lake-id=\"u35d20cc5\" id=\"u35d20cc5\"><span data-lake-id=\"uce3ddc6d\" id=\"uce3ddc6d\" class=\"lake-fontsize-11\">RSA：密钥长度 &gt; 2048</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"u0fa7bba3\" id=\"u0fa7bba3\"><span data-lake-id=\"ua87ce3d0\" id=\"ua87ce3d0\" class=\"lake-fontsize-11\">DSA：用于证书密钥/</span><span data-lake-id=\"u297fba8c\" id=\"u297fba8c\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">数字签名</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"uc38bd8c8\" id=\"uc38bd8c8\"><span data-lake-id=\"ud404b919\" id=\"ud404b919\" class=\"lake-fontsize-11\">ECDSA：用于证书密钥/</span><span data-lake-id=\"u7cdbacee\" id=\"u7cdbacee\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">数字签名</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"ud7681753\" id=\"ud7681753\"><span data-lake-id=\"u6824631c\" id=\"u6824631c\" class=\"lake-fontsize-11\">加入盐值的 SHA256</span></li></ul><h3 data-lake-id=\"aKan3\" id=\"aKan3\"><span data-lake-id=\"ube6cba8e\" id=\"ube6cba8e\">不安全</span></h3><ul list=\"u8f12bbff\"><li fid=\"ub4bbe035\" data-lake-id=\"u98a98229\" id=\"u98a98229\"><span data-lake-id=\"u002a95c6\" id=\"u002a95c6\" class=\"lake-fontsize-11\">DES：在所有场景下都不安全。</span></li><li fid=\"ub4bbe035\" data-lake-id=\"ub97c8187\" id=\"ub97c8187\"><span data-lake-id=\"u369db11c\" id=\"u369db11c\" class=\"lake-fontsize-11\">MD5：不应用于数字签名或密码加密。</span></li><li fid=\"ub4bbe035\" data-lake-id=\"u11ea8e07\" id=\"u11ea8e07\"><span data-lake-id=\"ud06d6b0e\" id=\"ud06d6b0e\" class=\"lake-fontsize-11\">AES-ECB</span></li></ul><h2 data-lake-id=\"BnEEr\" id=\"BnEEr\"><span data-lake-id=\"u64925806\" id=\"u64925806\">Java 安全管理器（SecurityManager）</span></h2><p data-lake-id=\"ue20ed768\" id=\"ue20ed768\"><span data-lake-id=\"uf370f0b7\" id=\"uf370f0b7\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。</span></p><h3 data-lake-id=\"bCuLz\" id=\"bCuLz\"><span data-lake-id=\"ufe1b3a4e\" id=\"ufe1b3a4e\" style=\"color: rgb(0, 0, 0)\">启动方式</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22-Djava.security.manager%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%221.%20%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FZYhC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22System.setSecurityManager(new%20SecurityManager())%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%222.%20%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mUQqq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"mRqm7\" id=\"mRqm7\"><span data-lake-id=\"u775b021f\" id=\"u775b021f\">配置基本原则</span></h3><ol list=\"ub5cc2949\"><li fid=\"u67f8e490\" data-lake-id=\"u2e56037c\" id=\"u2e56037c\"><span data-lake-id=\"u88357435\" id=\"u88357435\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">没有配置的权限表示没有。</span></li><li fid=\"u67f8e490\" data-lake-id=\"ud2c1b708\" id=\"ud2c1b708\"><span data-lake-id=\"ua658c341\" id=\"ua658c341\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">只能配置有什么权限</span><span data-lake-id=\"u22090a85\" id=\"u22090a85\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">，不能配置禁止做什么。</span></li><li fid=\"u67f8e490\" data-lake-id=\"ue92912f3\" id=\"ue92912f3\"><span data-lake-id=\"u6b833b1d\" id=\"u6b833b1d\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">同一种权限可多次配置，取并集。</span></li><li fid=\"u67f8e490\" data-lake-id=\"u830c35d8\" id=\"u830c35d8\"><span data-lake-id=\"u374516d5\" id=\"u374516d5\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">统一资源的多种权限可用逗号分割。</span></li></ol><h3 data-lake-id=\"lxKrj\" id=\"lxKrj\"><span data-lake-id=\"u72b6112f\" id=\"u72b6112f\" style=\"color: rgb(0, 0, 0)\">用途</span></h3><ol list=\"u9d1cbc6c\"><li fid=\"uc6d10caa\" data-lake-id=\"u4e22f2be\" id=\"u4e22f2be\"><span data-lake-id=\"u508dbb03\" id=\"u508dbb03\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">SecurityManager可以用来控制监听端口，控制是否自己停止线程，控制能否读取系统参数，控制加载某些类。</span></li></ol><h2 data-lake-id=\"YJo41\" id=\"YJo41\"><span data-lake-id=\"uae0525ff\" id=\"uae0525ff\">漏洞攻击</span></h2><h3 data-lake-id=\"EtJwh\" id=\"EtJwh\"><span data-lake-id=\"uf6ec9a90\" id=\"uf6ec9a90\">命令注入</span></h3><ul list=\"ua0885834\"><li fid=\"u1ba8299e\" data-lake-id=\"ufd4b6e0b\" id=\"ufd4b6e0b\"><span data-lake-id=\"u5f285e0e\" id=\"u5f285e0e\" class=\"lake-fontsize-11\">可能导致命令注入的字符：|、;、&amp;、$、&gt;、&lt;、`、\\、!、\\n</span></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"eCqfY\" id=\"eCqfY\"><span data-lake-id=\"ud3f08514\" id=\"ud3f08514\">规范</span></h2><h4 data-lake-id=\"nXLQn\" id=\"nXLQn\"><span data-lake-id=\"u122bfa54\" id=\"u122bfa54\">语法</span></h4><ol list=\"uc7b64984\"><li fid=\"u4444e0af\" data-lake-id=\"u23a6c491\" id=\"u23a6c491\"><span data-lake-id=\"u9e1f185d\" id=\"u9e1f185d\" class=\"lake-fontsize-11\">空行：变量命名之间有空行。</span></li><li fid=\"u4444e0af\" data-lake-id=\"u9a5025fa\" id=\"u9a5025fa\"><span data-lake-id=\"u09c97eed\" id=\"u09c97eed\" class=\"lake-fontsize-11\">泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Box%3CT2%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FzkgC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u671e535a\" start=\"3\"><li fid=\"ubac34476\" data-lake-id=\"u562d2ab6\" id=\"u562d2ab6\"><span data-lake-id=\"u8d83b4df\" id=\"u8d83b4df\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">避免文件过长，不超过2000行（非空非注释行）</span></li><li fid=\"ubac34476\" data-lake-id=\"u28aa7c97\" id=\"u28aa7c97\"><span data-lake-id=\"u6fcdbc6b\" id=\"u6fcdbc6b\" class=\"lake-fontsize-11\">避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。</span></li><li fid=\"ubac34476\" data-lake-id=\"u6c862206\" id=\"u6c862206\"><span data-lake-id=\"uaa2f2f67\" id=\"uaa2f2f67\" class=\"lake-fontsize-11\">嵌套不要超过4层</span></li><li fid=\"ubac34476\" data-lake-id=\"ua77aa154\" id=\"ua77aa154\"><span data-lake-id=\"u4883a321\" id=\"u4883a321\">提交的代码重复率小于 10%。</span></li></ol><h2 data-lake-id=\"inJ66\" id=\"inJ66\"><span data-lake-id=\"uf17cce80\" id=\"uf17cce80\">License</span></h2><p data-lake-id=\"ucbf614d6\" id=\"ucbf614d6\"><span data-lake-id=\"u292f54a5\" id=\"u292f54a5\" class=\"lake-fontsize-11\">在编程中，如果使用到了别人提供的代码或库，则涉及到开源许可（license）的问题，需要关注该代码使用的是什么license。根据 license 的严格程度可以分为：</span><span data-lake-id=\"u81a7bf93\" id=\"u81a7bf93\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">MIT &gt; BSD &gt; Apache &gt; MPL&gt; LGPL &gt; GPL</span></p><ul list=\"u9929cb84\"><li fid=\"u4c514fe8\" data-lake-id=\"ufdd440d0\" id=\"ufdd440d0\"><span data-lake-id=\"u60493aec\" id=\"u60493aec\" class=\"lake-fontsize-11\">修改源码后可以闭源：MIT, BSD, Apache</span></li><li fid=\"u4c514fe8\" data-lake-id=\"ub0c97385\" id=\"ub0c97385\"><span data-lake-id=\"u9f7993c4\" id=\"u9f7993c4\" class=\"lake-fontsize-11\">MPL：涉及MPL部分的代码以及修改了MPL的代码需要开源，自己的代码可以闭源。</span></li><li fid=\"u4c514fe8\" data-lake-id=\"u4bb65517\" id=\"u4bb65517\"><span data-lake-id=\"uf2583abb\" id=\"uf2583abb\" class=\"lake-fontsize-11\">通过</span><span data-lake-id=\"u47ce60ea\" id=\"u47ce60ea\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">动态链接的代码不需要开源</span><span data-lake-id=\"u30f6f69b\" id=\"u30f6f69b\" class=\"lake-fontsize-11\">，</span><span data-lake-id=\"ud81d9fc1\" id=\"ud81d9fc1\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">如果静态链接一个基于LGPL的库，则需要开放使用了该库的所有代码</span></li><li fid=\"u4c514fe8\" data-lake-id=\"udf6f98f8\" id=\"udf6f98f8\"><span data-lake-id=\"u04574ff6\" id=\"u04574ff6\" class=\"lake-fontsize-11\">使用源码后，新增源码也要使用该协议：GPL（具有传染性）</span></li></ul><h2 data-lake-id=\"gPejp\" id=\"gPejp\"><span data-lake-id=\"u517cadac\" id=\"u517cadac\">加密算法</span></h2><h3 data-lake-id=\"IDrCZ\" id=\"IDrCZ\"><span data-lake-id=\"uf7145c3c\" id=\"uf7145c3c\">安全</span></h3><ul list=\"u5de3b28d\"><li fid=\"ud9f21d3e\" data-lake-id=\"u35d20cc5\" id=\"u35d20cc5\"><span data-lake-id=\"uce3ddc6d\" id=\"uce3ddc6d\" class=\"lake-fontsize-11\">RSA：密钥长度 &gt; 2048</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"u0fa7bba3\" id=\"u0fa7bba3\"><span data-lake-id=\"ua87ce3d0\" id=\"ua87ce3d0\" class=\"lake-fontsize-11\">DSA：用于证书密钥/</span><span data-lake-id=\"u297fba8c\" id=\"u297fba8c\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">数字签名</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"uc38bd8c8\" id=\"uc38bd8c8\"><span data-lake-id=\"ud404b919\" id=\"ud404b919\" class=\"lake-fontsize-11\">ECDSA：用于证书密钥/</span><span data-lake-id=\"u7cdbacee\" id=\"u7cdbacee\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">数字签名</span></li><li fid=\"ud9f21d3e\" data-lake-id=\"ud7681753\" id=\"ud7681753\"><span data-lake-id=\"u6824631c\" id=\"u6824631c\" class=\"lake-fontsize-11\">加入盐值的 SHA256</span></li></ul><h3 data-lake-id=\"aKan3\" id=\"aKan3\"><span data-lake-id=\"ube6cba8e\" id=\"ube6cba8e\">不安全</span></h3><ul list=\"u8f12bbff\"><li fid=\"ub4bbe035\" data-lake-id=\"u98a98229\" id=\"u98a98229\"><span data-lake-id=\"u002a95c6\" id=\"u002a95c6\" class=\"lake-fontsize-11\">DES：在所有场景下都不安全。</span></li><li fid=\"ub4bbe035\" data-lake-id=\"ub97c8187\" id=\"ub97c8187\"><span data-lake-id=\"u369db11c\" id=\"u369db11c\" class=\"lake-fontsize-11\">MD5：不应用于数字签名或密码加密。</span></li><li fid=\"ub4bbe035\" data-lake-id=\"u11ea8e07\" id=\"u11ea8e07\"><span data-lake-id=\"ud06d6b0e\" id=\"ud06d6b0e\" class=\"lake-fontsize-11\">AES-ECB</span></li></ul><h2 data-lake-id=\"BnEEr\" id=\"BnEEr\"><span data-lake-id=\"u64925806\" id=\"u64925806\">Java 安全管理器（SecurityManager）</span></h2><p data-lake-id=\"ue20ed768\" id=\"ue20ed768\"><span data-lake-id=\"uf370f0b7\" id=\"uf370f0b7\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。</span></p><h3 data-lake-id=\"bCuLz\" id=\"bCuLz\"><span data-lake-id=\"ufe1b3a4e\" id=\"ufe1b3a4e\" style=\"color: rgb(0, 0, 0)\">启动方式</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22-Djava.security.manager%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%221.%20%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FZYhC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22System.setSecurityManager(new%20SecurityManager())%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%222.%20%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mUQqq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"mRqm7\" id=\"mRqm7\"><span data-lake-id=\"u775b021f\" id=\"u775b021f\">配置基本原则</span></h3><ol list=\"ub5cc2949\"><li fid=\"u67f8e490\" data-lake-id=\"u2e56037c\" id=\"u2e56037c\"><span data-lake-id=\"u88357435\" id=\"u88357435\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">没有配置的权限表示没有。</span></li><li fid=\"u67f8e490\" data-lake-id=\"ud2c1b708\" id=\"ud2c1b708\"><span data-lake-id=\"ua658c341\" id=\"ua658c341\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">只能配置有什么权限</span><span data-lake-id=\"u22090a85\" id=\"u22090a85\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">，不能配置禁止做什么。</span></li><li fid=\"u67f8e490\" data-lake-id=\"ue92912f3\" id=\"ue92912f3\"><span data-lake-id=\"u6b833b1d\" id=\"u6b833b1d\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">同一种权限可多次配置，取并集。</span></li><li fid=\"u67f8e490\" data-lake-id=\"u830c35d8\" id=\"u830c35d8\"><span data-lake-id=\"u374516d5\" id=\"u374516d5\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">统一资源的多种权限可用逗号分割。</span></li></ol><h3 data-lake-id=\"lxKrj\" id=\"lxKrj\"><span data-lake-id=\"u72b6112f\" id=\"u72b6112f\" style=\"color: rgb(0, 0, 0)\">用途</span></h3><ol list=\"u9d1cbc6c\"><li fid=\"uc6d10caa\" data-lake-id=\"u4e22f2be\" id=\"u4e22f2be\"><span data-lake-id=\"u508dbb03\" id=\"u508dbb03\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">SecurityManager可以用来控制监听端口，控制是否自己停止线程，控制能否读取系统参数，控制加载某些类。</span></li></ol><h2 data-lake-id=\"YJo41\" id=\"YJo41\"><span data-lake-id=\"uae0525ff\" id=\"uae0525ff\">漏洞攻击</span></h2><h3 data-lake-id=\"EtJwh\" id=\"EtJwh\"><span data-lake-id=\"uf6ec9a90\" id=\"uf6ec9a90\">命令注入</span></h3><ul list=\"ua0885834\"><li fid=\"u1ba8299e\" data-lake-id=\"ufd4b6e0b\" id=\"ufd4b6e0b\"><span data-lake-id=\"u5f285e0e\" id=\"u5f285e0e\" class=\"lake-fontsize-11\">可能导致命令注入的字符：|、;、&amp;、$、&gt;、&lt;、`、\\、!、\\n</span></li></ul>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-14T08:45:34.000Z",
    "deleted_at": null,
    "created_at": "2023-01-28T09:55:37.000Z",
    "updated_at": "2023-02-14T08:45:35.000Z",
    "published_at": "2023-02-14T08:45:34.000Z",
    "first_published_at": "2023-01-28T09:56:15.984Z",
    "word_count": 650,
    "cover": null,
    "description": "规范语法空行：变量命名之间有空行。泛型变量命名：单个大写字符，可接一个数字，例如 E, T, T2public class Box<T2>避免文件过长，不超过2000行（非空非注释行）避免方法过长，不超过50行（非空非注释行），参数不超过5个，异常种类不超过5个。嵌套不要超过4层提交的代码重复...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112546935,
    "slug": "alrs1tiuu3aulqpq",
    "title": "Java 与 数据库",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"RTGPT\"></a>\n## JDBC\nJDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。<br />资源申请和释放的顺序：\n\n- 连接：Connection -> PreparedStatement -> ResultSet\n- 关闭： ResultSet -> PreparedStatement -> Connection\n<a name=\"hktmf\"></a>\n## ORM\nORM 是指将数据库中的数据映射为对象， 程序即可以像操作对象一样操作数据的一种技术。依赖于 JDBC 和 DataSource。\n\n- Hibernate：实现ORM的框架，类似于 MyBatis\n<a name=\"u4UKA\"></a>\n## DataSource 对象\n获取数据库连接的首选方法，有基础实现，连接池实现和分布式事务实现三种连接方法。\n<a name=\"A6Kpb\"></a>\n## Statement\nStatement是 java 执行数据库操作的一个接口，用于在已经建立数据库连接的基础上，向数据库发送要执行的SQL语句。具体用法为：\n\n1. 首先导入 java.sql.* 这个包。\n2. 然后加载驱动，创建连接，得到Connection接口的的实现对象，比如对象名叫做conn。\n3. 然后再用conn对象去创建Statement的实例，方法是：Statement stmt = conn.creatStatement(\"SQL语句字符串\");\n4. statement 对象将具体的 SQL 语句编译后发送到数据库。\n<a name=\"RZpd3\"></a>\n### Statement\nStatement 对象用于执行不带参数的简单 SQL 语句：Statement每次执行sql语句，数据库都要执行sql语句的编译，最好用于仅执行一次查询并返回结果的情形，效率高于PreparedStatement。但存在sql注入风险。\n<a name=\"kRem6\"></a>\n### PreparedStatement\nPreparedStatement 是预编译执行的。在执行可变参数的一条SQL时，PreparedStatement要比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率高。且安全性更好，有效防止SQL注入的问题。<br />对于多次重复执行的语句，使用PreparedStatement效率会更高一点。执行SQL语句是可以带参数的，并支持批量执行SQL。由于采用了Cache机制，则预编译的语句，就会放在Cache中，下次执行相同的SQL语句时，则可以直接从Cache中取出来。\n",
    "body_draft": "<a name=\"RTGPT\"></a>\n## JDBC\nJDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。<br />资源申请和释放的顺序：\n\n- 连接：Connection -> PreparedStatement -> ResultSet\n- 关闭： ResultSet -> PreparedStatement -> Connection\n<a name=\"hktmf\"></a>\n## ORM\nORM 是指将数据库中的数据映射为对象， 程序即可以像操作对象一样操作数据的一种技术。依赖于 JDBC 和 DataSource。\n\n- Hibernate：实现ORM的框架，类似于 MyBatis\n<a name=\"u4UKA\"></a>\n## DataSource 对象\n获取数据库连接的首选方法，有基础实现，连接池实现和分布式事务实现三种连接方法。\n<a name=\"A6Kpb\"></a>\n## Statement\nStatement是 java 执行数据库操作的一个接口，用于在已经建立数据库连接的基础上，向数据库发送要执行的SQL语句。具体用法为：\n\n1. 首先导入 java.sql.* 这个包。\n2. 然后加载驱动，创建连接，得到Connection接口的的实现对象，比如对象名叫做conn。\n3. 然后再用conn对象去创建Statement的实例，方法是：Statement stmt = conn.creatStatement(\"SQL语句字符串\");\n4. statement 对象将具体的 SQL 语句编译后发送到数据库。\n<a name=\"RZpd3\"></a>\n### Statement\nStatement 对象用于执行不带参数的简单 SQL 语句：Statement每次执行sql语句，数据库都要执行sql语句的编译，最好用于仅执行一次查询并返回结果的情形，效率高于PreparedStatement。但存在sql注入风险。\n<a name=\"kRem6\"></a>\n### PreparedStatement\nPreparedStatement 是预编译执行的。在执行可变参数的一条SQL时，PreparedStatement要比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率高。且安全性更好，有效防止SQL注入的问题。<br />对于多次重复执行的语句，使用PreparedStatement效率会更高一点。执行SQL语句是可以带参数的，并支持批量执行SQL。由于采用了Cache机制，则预编译的语句，就会放在Cache中，下次执行相同的SQL语句时，则可以直接从Cache中取出来。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"RTGPT\"><span class=\"ne-text\">JDBC</span></h2><p id=\"u9ac3f209\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">JDBC API 允许用户访问任何形式的表格数据，尤其是</span><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">存储在关系数据库</span><span class=\"ne-text\" style=\"font-size: 14px\">中的数据。</span></p><p id=\"u922c6ea8\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">资源申请和释放的顺序：</span></p><ul class=\"ne-ul\"><li id=\"u1c05efc7\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">连接：Connection -&gt; PreparedStatement -&gt; ResultSet</span></li><li id=\"u540500ab\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">关闭： ResultSet -&gt; PreparedStatement -&gt; Connection</span></li></ul><h2 id=\"hktmf\"><span class=\"ne-text\">ORM</span></h2><p id=\"ua4123067\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">ORM 是指将数据库中的数据映射为对象， 程序即可以像操作对象一样操作数据的一种技术。</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">依赖于 JDBC 和 DataSource。</span></p><ul class=\"ne-ul\"><li id=\"u86cd4fe5\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Hibernate：实现ORM的框架，类似于 MyBatis</span></li></ul><h2 id=\"u4UKA\"><span class=\"ne-text\">DataSource 对象</span></h2><p id=\"u79abb0a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">获取数据库连接的首选方法，有</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">基础实现，连接池实现和分布式事务实现</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">三种连接方法。</span></p><h2 id=\"A6Kpb\"><span class=\"ne-text\" style=\"color: #303030\">Statement</span></h2><p id=\"u5788a21d\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 19px\">S</span><span class=\"ne-text\" style=\"font-size: 14px\">tatement是 </span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">java 执行数据库操作的一个接口</span><span class=\"ne-text\" style=\"font-size: 14px\">，用于在已经建立数据库连接的基础上，向数据库发送要执行的SQL语句。具体用法为：</span></p><ol class=\"ne-ol\"><li id=\"u9dd74052\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">首先</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px; background-color: #CEF5F7\">导入 java.sql.* </span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">这个包。</span></li><li id=\"u331550dd\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">然后加载驱动，创建连接，得到Connection接口的的实现对象，比如对象名叫做conn。</span></li><li id=\"ue7febb98\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">然后再用conn对象去创建Statement的实例，方法是：</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px; background-color: #CEF5F7\">Statement stmt = conn.creatStatement(&quot;SQL语句字符串&quot;)</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">;</span></li><li id=\"u4f4975f3\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">statement 对象将具体的 SQL 语句编译后发送到数据库。</span></li></ol><h3 id=\"RZpd3\"><span class=\"ne-text\">Statement</span></h3><p id=\"u8208a202\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">Statement 对象用于执行不带参数的简单 SQL 语句：</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">Statement每次执行sql语句，数据库都要执行sql语句的编译</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">，最好用于仅执行一次查询并返回结果的情形，</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px; background-color: #CEF5F7\">效率高于PreparedStatement</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">。</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px; background-color: #FBDE28\">但存在sql注入风险</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0); font-size: 14px\">。</span></p><h3 id=\"kRem6\"><span class=\"ne-text\">PreparedStatement</span></h3><p id=\"u03e27045\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px; color: rgb(0, 0, 0)\">PreparedStatement 是预编译执行的。在执行可变参数的一条SQL时，PreparedStatement要比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率高。</span><span class=\"ne-text\" style=\"font-size: 14px; color: rgb(0, 0, 0); background-color: #CEF5F7\">且安全性更好，有效防止SQL注入的问题</span><span class=\"ne-text\" style=\"font-size: 14px; color: rgb(0, 0, 0)\">。</span></p><p id=\"u9597ed91\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px; color: rgb(0, 0, 0)\">对于多次重复执行的语句，使用PreparedStatement效率会更高一点。执行SQL语句是可以带参数的，并支持批量执行SQL。由于采用了Cache机制，则预编译的语句，就会放在Cache中，下次执行相同的SQL语句时，则可以直接从Cache中取出来。</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"RTGPT\" id=\"RTGPT\"><span data-lake-id=\"u41dfe6fb\" id=\"u41dfe6fb\">JDBC</span></h2><p data-lake-id=\"u9ac3f209\" id=\"u9ac3f209\"><span data-lake-id=\"u2fb4b9c9\" id=\"u2fb4b9c9\" class=\"lake-fontsize-11\">JDBC API 允许用户访问任何形式的表格数据，尤其是</span><span data-lake-id=\"uf17d06c5\" id=\"uf17d06c5\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">存储在关系数据库</span><span data-lake-id=\"u0c664080\" id=\"u0c664080\" class=\"lake-fontsize-11\">中的数据。</span></p><p data-lake-id=\"u922c6ea8\" id=\"u922c6ea8\"><span data-lake-id=\"u9d788a63\" id=\"u9d788a63\" class=\"lake-fontsize-11\">资源申请和释放的顺序：</span></p><ul list=\"u20c319bb\"><li fid=\"ubf0217a7\" data-lake-id=\"u1c05efc7\" id=\"u1c05efc7\"><span data-lake-id=\"uf81170bb\" id=\"uf81170bb\" class=\"lake-fontsize-11\" style=\"color: #303030\">连接：Connection -&gt; PreparedStatement -&gt; ResultSet</span></li><li fid=\"ubf0217a7\" data-lake-id=\"u540500ab\" id=\"u540500ab\"><span data-lake-id=\"ud826f6a1\" id=\"ud826f6a1\" class=\"lake-fontsize-11\" style=\"color: #303030\">关闭： ResultSet -&gt; PreparedStatement -&gt; Connection</span></li></ul><h2 data-lake-id=\"hktmf\" id=\"hktmf\"><span data-lake-id=\"u7060cba8\" id=\"u7060cba8\">ORM</span></h2><p data-lake-id=\"ua4123067\" id=\"ua4123067\"><span data-lake-id=\"ua311de80\" id=\"ua311de80\" class=\"lake-fontsize-11\">ORM 是指将数据库中的数据映射为对象， 程序即可以像操作对象一样操作数据的一种技术。</span><span data-lake-id=\"u2b6d86d8\" id=\"u2b6d86d8\" class=\"lake-fontsize-11\" style=\"color: #303030\">依赖于 JDBC 和 DataSource。</span></p><ul list=\"u72a5974b\"><li fid=\"ue7c15374\" data-lake-id=\"u86cd4fe5\" id=\"u86cd4fe5\"><span data-lake-id=\"u54c45472\" id=\"u54c45472\" class=\"lake-fontsize-11\" style=\"color: #303030\">Hibernate：实现ORM的框架，类似于 MyBatis</span></li></ul><h2 data-lake-id=\"u4UKA\" id=\"u4UKA\"><span data-lake-id=\"u99eec673\" id=\"u99eec673\">DataSource 对象</span></h2><p data-lake-id=\"u79abb0a3\" id=\"u79abb0a3\"><span data-lake-id=\"uc47d959c\" id=\"uc47d959c\" class=\"lake-fontsize-11\" style=\"color: #303030\">获取数据库连接的首选方法，有</span><span data-lake-id=\"u93943c54\" id=\"u93943c54\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">基础实现，连接池实现和分布式事务实现</span><span data-lake-id=\"u6bc77f97\" id=\"u6bc77f97\" class=\"lake-fontsize-11\" style=\"color: #303030\">三种连接方法。</span></p><h2 data-lake-id=\"A6Kpb\" id=\"A6Kpb\"><span data-lake-id=\"uc5d274d2\" id=\"uc5d274d2\" style=\"color: #303030\">Statement</span></h2><p data-lake-id=\"u5788a21d\" id=\"u5788a21d\"><span data-lake-id=\"uf48dfa2e\" id=\"uf48dfa2e\" class=\"lake-fontsize-14\">S</span><span data-lake-id=\"u8a4aed03\" id=\"u8a4aed03\" class=\"lake-fontsize-11\">tatement是 </span><span data-lake-id=\"u014ee62d\" id=\"u014ee62d\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">java 执行数据库操作的一个接口</span><span data-lake-id=\"u91b4e167\" id=\"u91b4e167\" class=\"lake-fontsize-11\">，用于在已经建立数据库连接的基础上，向数据库发送要执行的SQL语句。具体用法为：</span></p><ol list=\"ueb85abe0\"><li fid=\"u6e50ab33\" data-lake-id=\"u9dd74052\" id=\"u9dd74052\"><span data-lake-id=\"u7fe4abf1\" id=\"u7fe4abf1\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">首先</span><span data-lake-id=\"u09366931\" id=\"u09366931\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">导入 java.sql.* </span><span data-lake-id=\"u6ba97edd\" id=\"u6ba97edd\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">这个包。</span></li><li fid=\"u6e50ab33\" data-lake-id=\"u331550dd\" id=\"u331550dd\"><span data-lake-id=\"ua918c6da\" id=\"ua918c6da\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">然后加载驱动，创建连接，得到Connection接口的的实现对象，比如对象名叫做conn。</span></li><li fid=\"u6e50ab33\" data-lake-id=\"ue7febb98\" id=\"ue7febb98\"><span data-lake-id=\"ufed3d1dd\" id=\"ufed3d1dd\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">然后再用conn对象去创建Statement的实例，方法是：</span><span data-lake-id=\"u34fb914c\" id=\"u34fb914c\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">Statement stmt = conn.creatStatement(&quot;SQL语句字符串&quot;)</span><span data-lake-id=\"u636fc4d8\" id=\"u636fc4d8\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">;</span></li><li fid=\"u6e50ab33\" data-lake-id=\"u4f4975f3\" id=\"u4f4975f3\"><span data-lake-id=\"ufd55a042\" id=\"ufd55a042\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">statement 对象将具体的 SQL 语句编译后发送到数据库。</span></li></ol><h3 data-lake-id=\"RZpd3\" id=\"RZpd3\"><span data-lake-id=\"uebdfc48f\" id=\"uebdfc48f\">Statement</span></h3><p data-lake-id=\"u8208a202\" id=\"u8208a202\"><span data-lake-id=\"u75dabd9d\" id=\"u75dabd9d\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">Statement 对象用于执行不带参数的简单 SQL 语句：</span><span data-lake-id=\"u97a33455\" id=\"u97a33455\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">Statement每次执行sql语句，数据库都要执行sql语句的编译</span><span data-lake-id=\"u430cbd78\" id=\"u430cbd78\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">，最好用于仅执行一次查询并返回结果的情形，</span><span data-lake-id=\"u725ebe43\" id=\"u725ebe43\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">效率高于PreparedStatement</span><span data-lake-id=\"u650bf29e\" id=\"u650bf29e\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span><span data-lake-id=\"u53f1eb14\" id=\"u53f1eb14\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #FBDE28\">但存在sql注入风险</span><span data-lake-id=\"u30417ddf\" id=\"u30417ddf\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span></p><h3 data-lake-id=\"kRem6\" id=\"kRem6\"><span data-lake-id=\"u4c271c45\" id=\"u4c271c45\">PreparedStatement</span></h3><p data-lake-id=\"u03e27045\" id=\"u03e27045\"><span data-lake-id=\"uc64e1552\" id=\"uc64e1552\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">PreparedStatement 是预编译执行的。在执行可变参数的一条SQL时，PreparedStatement要比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率高。</span><span data-lake-id=\"u6ca02d98\" id=\"u6ca02d98\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">且安全性更好，有效防止SQL注入的问题</span><span data-lake-id=\"u86c8a6ac\" id=\"u86c8a6ac\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span></p><p data-lake-id=\"u9597ed91\" id=\"u9597ed91\"><span data-lake-id=\"u8e951b5f\" id=\"u8e951b5f\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">对于多次重复执行的语句，使用PreparedStatement效率会更高一点。执行SQL语句是可以带参数的，并支持批量执行SQL。由于采用了Cache机制，则预编译的语句，就会放在Cache中，下次执行相同的SQL语句时，则可以直接从Cache中取出来。</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"RTGPT\" id=\"RTGPT\"><span data-lake-id=\"u41dfe6fb\" id=\"u41dfe6fb\">JDBC</span></h2><p data-lake-id=\"u9ac3f209\" id=\"u9ac3f209\"><span data-lake-id=\"u2fb4b9c9\" id=\"u2fb4b9c9\" class=\"lake-fontsize-11\">JDBC API 允许用户访问任何形式的表格数据，尤其是</span><span data-lake-id=\"uf17d06c5\" id=\"uf17d06c5\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">存储在关系数据库</span><span data-lake-id=\"u0c664080\" id=\"u0c664080\" class=\"lake-fontsize-11\">中的数据。</span></p><p data-lake-id=\"u922c6ea8\" id=\"u922c6ea8\"><span data-lake-id=\"u9d788a63\" id=\"u9d788a63\" class=\"lake-fontsize-11\">资源申请和释放的顺序：</span></p><ul list=\"u20c319bb\"><li fid=\"ubf0217a7\" data-lake-id=\"u1c05efc7\" id=\"u1c05efc7\"><span data-lake-id=\"uf81170bb\" id=\"uf81170bb\" class=\"lake-fontsize-11\" style=\"color: #303030\">连接：Connection -&gt; PreparedStatement -&gt; ResultSet</span></li><li fid=\"ubf0217a7\" data-lake-id=\"u540500ab\" id=\"u540500ab\"><span data-lake-id=\"ud826f6a1\" id=\"ud826f6a1\" class=\"lake-fontsize-11\" style=\"color: #303030\">关闭： ResultSet -&gt; PreparedStatement -&gt; Connection</span></li></ul><h2 data-lake-id=\"hktmf\" id=\"hktmf\"><span data-lake-id=\"u7060cba8\" id=\"u7060cba8\">ORM</span></h2><p data-lake-id=\"ua4123067\" id=\"ua4123067\"><span data-lake-id=\"ua311de80\" id=\"ua311de80\" class=\"lake-fontsize-11\">ORM 是指将数据库中的数据映射为对象， 程序即可以像操作对象一样操作数据的一种技术。</span><span data-lake-id=\"u2b6d86d8\" id=\"u2b6d86d8\" class=\"lake-fontsize-11\" style=\"color: #303030\">依赖于 JDBC 和 DataSource。</span></p><ul list=\"u72a5974b\"><li fid=\"ue7c15374\" data-lake-id=\"u86cd4fe5\" id=\"u86cd4fe5\"><span data-lake-id=\"u54c45472\" id=\"u54c45472\" class=\"lake-fontsize-11\" style=\"color: #303030\">Hibernate：实现ORM的框架，类似于 MyBatis</span></li></ul><h2 data-lake-id=\"u4UKA\" id=\"u4UKA\"><span data-lake-id=\"u99eec673\" id=\"u99eec673\">DataSource 对象</span></h2><p data-lake-id=\"u79abb0a3\" id=\"u79abb0a3\"><span data-lake-id=\"uc47d959c\" id=\"uc47d959c\" class=\"lake-fontsize-11\" style=\"color: #303030\">获取数据库连接的首选方法，有</span><span data-lake-id=\"u93943c54\" id=\"u93943c54\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">基础实现，连接池实现和分布式事务实现</span><span data-lake-id=\"u6bc77f97\" id=\"u6bc77f97\" class=\"lake-fontsize-11\" style=\"color: #303030\">三种连接方法。</span></p><h2 data-lake-id=\"A6Kpb\" id=\"A6Kpb\"><span data-lake-id=\"uc5d274d2\" id=\"uc5d274d2\" style=\"color: #303030\">Statement</span></h2><p data-lake-id=\"u5788a21d\" id=\"u5788a21d\"><span data-lake-id=\"uf48dfa2e\" id=\"uf48dfa2e\" class=\"lake-fontsize-14\">S</span><span data-lake-id=\"u8a4aed03\" id=\"u8a4aed03\" class=\"lake-fontsize-11\">tatement是 </span><span data-lake-id=\"u014ee62d\" id=\"u014ee62d\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">java 执行数据库操作的一个接口</span><span data-lake-id=\"u91b4e167\" id=\"u91b4e167\" class=\"lake-fontsize-11\">，用于在已经建立数据库连接的基础上，向数据库发送要执行的SQL语句。具体用法为：</span></p><ol list=\"ueb85abe0\"><li fid=\"u6e50ab33\" data-lake-id=\"u9dd74052\" id=\"u9dd74052\"><span data-lake-id=\"u7fe4abf1\" id=\"u7fe4abf1\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">首先</span><span data-lake-id=\"u09366931\" id=\"u09366931\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">导入 java.sql.* </span><span data-lake-id=\"u6ba97edd\" id=\"u6ba97edd\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">这个包。</span></li><li fid=\"u6e50ab33\" data-lake-id=\"u331550dd\" id=\"u331550dd\"><span data-lake-id=\"ua918c6da\" id=\"ua918c6da\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">然后加载驱动，创建连接，得到Connection接口的的实现对象，比如对象名叫做conn。</span></li><li fid=\"u6e50ab33\" data-lake-id=\"ue7febb98\" id=\"ue7febb98\"><span data-lake-id=\"ufed3d1dd\" id=\"ufed3d1dd\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">然后再用conn对象去创建Statement的实例，方法是：</span><span data-lake-id=\"u34fb914c\" id=\"u34fb914c\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">Statement stmt = conn.creatStatement(&quot;SQL语句字符串&quot;)</span><span data-lake-id=\"u636fc4d8\" id=\"u636fc4d8\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">;</span></li><li fid=\"u6e50ab33\" data-lake-id=\"u4f4975f3\" id=\"u4f4975f3\"><span data-lake-id=\"ufd55a042\" id=\"ufd55a042\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">statement 对象将具体的 SQL 语句编译后发送到数据库。</span></li></ol><h3 data-lake-id=\"RZpd3\" id=\"RZpd3\"><span data-lake-id=\"uebdfc48f\" id=\"uebdfc48f\">Statement</span></h3><p data-lake-id=\"u8208a202\" id=\"u8208a202\"><span data-lake-id=\"u75dabd9d\" id=\"u75dabd9d\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">Statement 对象用于执行不带参数的简单 SQL 语句：</span><span data-lake-id=\"u97a33455\" id=\"u97a33455\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">Statement每次执行sql语句，数据库都要执行sql语句的编译</span><span data-lake-id=\"u430cbd78\" id=\"u430cbd78\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">，最好用于仅执行一次查询并返回结果的情形，</span><span data-lake-id=\"u725ebe43\" id=\"u725ebe43\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">效率高于PreparedStatement</span><span data-lake-id=\"u650bf29e\" id=\"u650bf29e\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span><span data-lake-id=\"u53f1eb14\" id=\"u53f1eb14\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #FBDE28\">但存在sql注入风险</span><span data-lake-id=\"u30417ddf\" id=\"u30417ddf\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span></p><h3 data-lake-id=\"kRem6\" id=\"kRem6\"><span data-lake-id=\"u4c271c45\" id=\"u4c271c45\">PreparedStatement</span></h3><p data-lake-id=\"u03e27045\" id=\"u03e27045\"><span data-lake-id=\"uc64e1552\" id=\"uc64e1552\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">PreparedStatement 是预编译执行的。在执行可变参数的一条SQL时，PreparedStatement要比Statement的效率高，因为DBMS预编译一条SQL当然会比多次编译一条SQL的效率高。</span><span data-lake-id=\"u6ca02d98\" id=\"u6ca02d98\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0); background-color: #CEF5F7\">且安全性更好，有效防止SQL注入的问题</span><span data-lake-id=\"u86c8a6ac\" id=\"u86c8a6ac\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">。</span></p><p data-lake-id=\"u9597ed91\" id=\"u9597ed91\"><span data-lake-id=\"u8e951b5f\" id=\"u8e951b5f\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">对于多次重复执行的语句，使用PreparedStatement效率会更高一点。执行SQL语句是可以带参数的，并支持批量执行SQL。由于采用了Cache机制，则预编译的语句，就会放在Cache中，下次执行相同的SQL语句时，则可以直接从Cache中取出来。</span></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-01-30T08:53:34.000Z",
    "deleted_at": null,
    "created_at": "2023-01-28T08:57:06.000Z",
    "updated_at": "2023-01-30T08:53:35.000Z",
    "published_at": "2023-01-30T08:53:34.000Z",
    "first_published_at": "2023-01-28T08:57:30.664Z",
    "word_count": 556,
    "cover": null,
    "description": "JDBCJDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。资源申请和释放的顺序：连接：Connection -> PreparedStatement -> ResultSet关闭： ResultSet -> PreparedStatement -> Connec...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112539882,
    "slug": "gkdpgrz5vzrtyi8y",
    "title": "Java 多线程",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"rG3ZD\"></a>\n## 集合\n<a name=\"iEFfh\"></a>\n### 线程安全\n\n- HashTable, CocurrentHashMap\n- Vector, Stack\n- StringBuffer\n<a name=\"ruHLe\"></a>\n### 线程不安全\n\n- HashMap, TreeMap, LinkedHashMap\n- HashSet, TreeSet, LinkedHashSet\n- ArrayList, LinkedList\n- StringBuilder\n<a name=\"IYF8G\"></a>\n## 线程规范与管理\n<a name=\"isw47\"></a>\n### 线程规范\n\n- 创建新线程时指定名称\n- 不要依赖线程调度器、线程优先级和yield()方法\n- 采用Java1.5提供新并发工具代替wait()和notify()\n<a name=\"rCmIX\"></a>\n### 线程管理\n\n- 禁用 Thread 的 run\n- 避免不加控制地创建新线程，而应该使用线程池来管控资源\n- 线程中断有业务代码来协作完成，慎用Thread.interrupt\n- 禁用 Thread 的 stop\n<a name=\"EkieI\"></a>\n## 线程同步\n<a name=\"LNP6r\"></a>\n### 关键字\n\n- synchronized\n   - Jvm 对 synchronized 做了优化：锁消除，锁粗化，偏向锁，轻量级锁\n- volatile\n   - 可见性\n   - 不保证原子性\n   - 禁止进行指令重排序（有序性）\n   - 线程不安全性\n- Atomic 类：保证原子操作\n<a name=\"aBp1y\"></a>\n### 线程同步类\n\n- Semaphore（信号量）：控制并发线程的数量，通过配置信号量的个数，申请信号量来实现线程管理\n```java\nSemaphore semaphore = new Semaphore(3);\n\nThreadPoolExecutor poolExecutor = \n        new ThreadPoolExecutor(10, 20, \n                5000, TimeUnit.MILLISECONDS,\n                new LinkedBlockingDeque<>(100));\n\nfor (int i = 0; i < 10; i++) {\n    int finalI = i;\n    poolExecutor.execute(new Thread() {\n        @Override\n        public void run() {\n            try {\n                //获取执行资格\n                semaphore.acquire(1);\n                System.out.println(finalI+\"=========\");\n                //模拟每个线程运行的时间\n                Thread.sleep(1000);\n                //释放执行资格\n                semaphore.release(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n- CountDownLatch（计数器）：可以实现计数的功能，主要方法为 countDown() 和 await()\n   - countDown() 使计数器减 1，计数器的数值无法重置。\n   - await() 阻塞当前线程，直到计数器为0。\n- Exchanger\n- Phaser\n- CyclicBarrier\n<a name=\"vmPSD\"></a>\n## 线程方法\n\n- sleep()\n   - 暂停线程的执行，但不释放锁。常用于一定时间内暂停线程执行。\n   - 唤醒：睡眠指定时间后，线程自动苏醒。\n- wait()\n   - 暂停线程的执行，同时释放锁。常用于线程间的交互和通信。\n   - 唤醒：通过 notify() 或者 notifyAll() 来唤醒线程。\n- yield()：让出cpu，从运行态转为就绪态\t\n- interrupt()：不会直接中断线程，而是给目标线程发送中止信号，目标线程中断标记位设为true。\n- resume()：恢复被suspend()挂起的线程。\n<a name=\"EFjgt\"></a>\n## 线程中断\n编写需要中止的多线程，需要使用响应interrput标准的库。如 Theread.sleep(), Thread.wait()。<br />反例：java.net.Socket 类的方法阻塞时不响应 interrupt。\n\n- 检测到当前线程被interrupt后，应抛出InterruptedException，并在finally或try-with-resource中清理执行状态\n- 调用线程的interrupt方法，只有当线程走到了sleep, wait, join等阻塞这些方法的时候，才会抛出InterruptedException\n<a name=\"tBiz9\"></a>\n## 锁\n<a name=\"OuzFG\"></a>\n### 死锁\n\n- 产生原因：\n   - 异常条件下没有正确释放锁\n   - 两个或多个线程以不同的顺序请求和释放锁\n   - 在产生阻塞的操作中持有锁\n<a name=\"pW3yO\"></a>\n### 全局锁\n\n- 产生原因：\n\n可重用的变量，如常量池中的变量被用作锁，即可能导致全局锁。\n<a name=\"NdSXZ\"></a>\n### 可重入锁\n定义：一个线程获取锁后不用释放，可以重复的获取一个锁n次，只是在释放的时候，也需要相应的释放n次。\n\n- synchronized\n- ReentrantLock：使用灵活，拓展性好。\n<a name=\"cRtoN\"></a>\n## 线程池\n\n- newFixedThreadPool: 固定且稳定的线程池，不会出现由于线程数增长而导致的系统线程资源不足的问题。\n- newCachedThreadPool: 没有等待队列，任务总是通过创建或者复用线程的方式得到执行，对任务的时延友好。\n- newWorkStealingPool: 适合用于很耗时的任务。\n- newSingleThreadExecutor: 适合固定的单线程任务。\n- newScheduledThreadPool: 适合执行周期性的任务。\n<a name=\"u0hGV\"></a>\n## 线程异常\n在某个线程运行出现异常时，遵循以下处理原则：\n\n1. 子线程须自己捕获异常处理\n2. 默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录\n3. 对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理\n\n\n",
    "body_draft": "<a name=\"rG3ZD\"></a>\n## 集合\n<a name=\"iEFfh\"></a>\n### 线程安全\n\n- HashTable, CocurrentHashMap\n- Vector, Stack\n- StringBuffer\n<a name=\"ruHLe\"></a>\n### 线程不安全\n\n- HashMap, TreeMap, LinkedHashMap\n- HashSet, TreeSet, LinkedHashSet\n- ArrayList, LinkedList\n- StringBuilder\n<a name=\"IYF8G\"></a>\n## 线程规范与管理\n<a name=\"isw47\"></a>\n### 线程规范\n\n- 创建新线程时指定名称\n- 不要依赖线程调度器、线程优先级和yield()方法\n- 采用Java1.5提供新并发工具代替wait()和notify()\n<a name=\"rCmIX\"></a>\n### 线程管理\n\n- 禁用 Thread 的 run\n- 避免不加控制地创建新线程，而应该使用线程池来管控资源\n- 线程中断有业务代码来协作完成，慎用Thread.interrupt\n- 禁用 Thread 的 stop\n<a name=\"EkieI\"></a>\n## 线程同步\n<a name=\"LNP6r\"></a>\n### 关键字\n\n- synchronized\n   - Jvm 对 synchronized 做了优化：锁消除，锁粗化，偏向锁，轻量级锁\n- volatile\n   - 可见性\n   - 不保证原子性\n   - 禁止进行指令重排序（有序性）\n   - 线程不安全性\n- Atomic 类：保证原子操作\n<a name=\"aBp1y\"></a>\n### 线程同步类\n\n- Semaphore（信号量）：控制并发线程的数量，通过配置信号量的个数，申请信号量来实现线程管理\n```java\nSemaphore semaphore = new Semaphore(3);\n\nThreadPoolExecutor poolExecutor = \n        new ThreadPoolExecutor(10, 20, \n                5000, TimeUnit.MILLISECONDS,\n                new LinkedBlockingDeque<>(100));\n\nfor (int i = 0; i < 10; i++) {\n    int finalI = i;\n    poolExecutor.execute(new Thread() {\n        @Override\n        public void run() {\n            try {\n                //获取执行资格\n                semaphore.acquire(1);\n                System.out.println(finalI+\"=========\");\n                //模拟每个线程运行的时间\n                Thread.sleep(1000);\n                //释放执行资格\n                semaphore.release(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}\n```\n\n- CountDownLatch（计数器）：可以实现计数的功能，主要方法为 countDown() 和 await()\n   - countDown() 使计数器减 1，计数器的数值无法重置。\n   - await() 阻塞当前线程，直到计数器为0。\n- Exchanger\n- Phaser\n- CyclicBarrier\n<a name=\"vmPSD\"></a>\n## 线程方法\n\n- sleep()\n   - 暂停线程的执行，但不释放锁。常用于一定时间内暂停线程执行。\n   - 唤醒：睡眠指定时间后，线程自动苏醒。\n- wait()\n   - 暂停线程的执行，同时释放锁。常用于线程间的交互和通信。\n   - 唤醒：通过 notify() 或者 notifyAll() 来唤醒线程。\n- yield()：让出cpu，从运行态转为就绪态\t\n- interrupt()：不会直接中断线程，而是给目标线程发送中止信号，目标线程中断标记位设为true。\n- resume()：恢复被suspend()挂起的线程。\n<a name=\"EFjgt\"></a>\n## 线程中断\n编写需要中止的多线程，需要使用响应interrput标准的库。如 Theread.sleep(), Thread.wait()。<br />反例：java.net.Socket 类的方法阻塞时不响应 interrupt。\n\n- 检测到当前线程被interrupt后，应抛出InterruptedException，并在finally或try-with-resource中清理执行状态\n- 调用线程的interrupt方法，只有当线程走到了sleep, wait, join等阻塞这些方法的时候，才会抛出InterruptedException\n<a name=\"tBiz9\"></a>\n## 锁\n<a name=\"OuzFG\"></a>\n### 死锁\n\n- 产生原因：\n   - 异常条件下没有正确释放锁\n   - 两个或多个线程以不同的顺序请求和释放锁\n   - 在产生阻塞的操作中持有锁\n<a name=\"pW3yO\"></a>\n### 全局锁\n\n- 产生原因：\n\n可重用的变量，如常量池中的变量被用作锁，即可能导致全局锁。\n<a name=\"NdSXZ\"></a>\n### 可重入锁\n定义：一个线程获取锁后不用释放，可以重复的获取一个锁n次，只是在释放的时候，也需要相应的释放n次。\n\n- synchronized\n- ReentrantLock：使用灵活，拓展性好。\n<a name=\"cRtoN\"></a>\n## 线程池\n\n- newFixedThreadPool: 固定且稳定的线程池，不会出现由于线程数增长而导致的系统线程资源不足的问题。\n- newCachedThreadPool: 没有等待队列，任务总是通过创建或者复用线程的方式得到执行，对任务的时延友好。\n- newWorkStealingPool: 适合用于很耗时的任务。\n- newSingleThreadExecutor: 适合固定的单线程任务。\n- newScheduledThreadPool: 适合执行周期性的任务。\n<a name=\"u0hGV\"></a>\n## 线程异常\n在某个线程运行出现异常时，遵循以下处理原则：\n\n1. 子线程须自己捕获异常处理\n2. 默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录\n3. 对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"rG3ZD\"><span class=\"ne-text\">集合</span></h2><h3 id=\"iEFfh\"><span class=\"ne-text\">线程安全</span></h3><ul class=\"ne-ul\"><li id=\"u06f1acd6\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">HashTable, CocurrentHashMap</span></li><li id=\"u3a8a8f09\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Vector, Stack</span></li><li id=\"u524de74e\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">StringBuffer</span></li></ul><h3 id=\"ruHLe\"><span class=\"ne-text\">线程不安全</span></h3><ul class=\"ne-ul\"><li id=\"u56064834\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">HashMap, TreeMap, LinkedHashMap</span></li><li id=\"u43de9a4f\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">HashSet, TreeSet, LinkedHashSet</span></li><li id=\"u90a54e59\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">ArrayList, LinkedList</span></li><li id=\"u9635f9a4\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">StringBuilder</span></li></ul><h2 id=\"IYF8G\"><span class=\"ne-text\" style=\"font-size: 16px\">线程规范与管理</span></h2><h3 id=\"isw47\"><span class=\"ne-text\">线程规范</span></h3><ul class=\"ne-ul\"><li id=\"uf41004c3\"><span class=\"ne-text\" style=\"font-size: 14px\">创建新线程时指定名称</span></li><li id=\"u2d4c6fdb\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">不要依赖线程调度器、线程优先级和yield()方法</span></li><li id=\"u6b1f4ef0\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">采用Java1.5提供</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">新并发工具代替wait()和notify()</span></li></ul><h3 id=\"rCmIX\"><span class=\"ne-text\">线程管理</span></h3><ul class=\"ne-ul\"><li id=\"u80403307\"><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">禁用 Thread 的 run</span></li><li id=\"uc8018b56\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">避免不加控制地创建新线程，而应该使用线程池来管控资源</span></li><li id=\"ucdc8331a\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">线程中断有业务代码来协作完成，</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">慎用Thread.interrupt</span></li><li id=\"u6ecf46cb\"><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">禁用 Thread 的 stop</span></li></ul><h2 id=\"EkieI\"><span class=\"ne-text\">线程同步</span></h2><h3 id=\"LNP6r\"><span class=\"ne-text\">关键字</span></h3><ul class=\"ne-ul\"><li id=\"u48ef89ce\"><span class=\"ne-text\" style=\"font-size: 14px\">synchronized</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u7864c3a1\"><span class=\"ne-text\" style=\"font-size: 14px\">Jvm 对 synchronized 做了优化：</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">锁消除，锁粗化，偏向锁，轻量级锁</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u366457d2\"><span class=\"ne-text\" style=\"font-size: 14px\">volatile</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u062afc60\"><span class=\"ne-text\" style=\"font-size: 14px\">可见性</span></li><li id=\"u774c1a07\"><span class=\"ne-text\" style=\"font-size: 14px\">不保证原子性</span></li><li id=\"uefd00e81\"><span class=\"ne-text\" style=\"font-size: 14px\">禁止进行指令重排序（有序性）</span></li><li id=\"u79a33724\"><span class=\"ne-text\" style=\"font-size: 14px\">线程不安全性</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u0b6dba19\"><span class=\"ne-text\" style=\"font-size: 14px\">Atomic 类：保证原子操作</span></li></ul><h3 id=\"aBp1y\"><span class=\"ne-text\">线程同步类</span></h3><ul class=\"ne-ul\"><li id=\"uc8fbf39e\"><span class=\"ne-text\" style=\"font-size: 14px\">Semaphore（信号量）：控制并发线程的数量，通过配置信号量的个数，申请信号量来实现线程管理</span></li></ul><pre data-language=\"java\" id=\"JUaDP\" class=\"ne-codeblock language-java\">Semaphore semaphore = new Semaphore(3);\n\nThreadPoolExecutor poolExecutor = \n        new ThreadPoolExecutor(10, 20, \n                5000, TimeUnit.MILLISECONDS,\n                new LinkedBlockingDeque&lt;&gt;(100));\n\nfor (int i = 0; i &lt; 10; i++) {\n    int finalI = i;\n    poolExecutor.execute(new Thread() {\n        @Override\n        public void run() {\n            try {\n                //获取执行资格\n                semaphore.acquire(1);\n                System.out.println(finalI+&quot;=========&quot;);\n                //模拟每个线程运行的时间\n                Thread.sleep(1000);\n                //释放执行资格\n                semaphore.release(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n}</pre><ul class=\"ne-ul\"><li id=\"u1a3dbe28\"><span class=\"ne-text\" style=\"font-size: 14px\">CountDownLatch（计数器）：可以实现计数的功能，主要方法为 countDown() 和 await()</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uccd1c007\"><span class=\"ne-text\" style=\"font-size: 14px\">countDown() 使计数器减 1，计数器的数值无法重置。</span></li><li id=\"u78e2e256\"><span class=\"ne-text\" style=\"font-size: 14px\">await() 阻塞当前线程，直到计数器为0。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u70da72d5\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Exchanger</span></li><li id=\"u48a40cd0\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Phaser</span></li><li id=\"u6f4e9a94\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">CyclicBarrier</span></li></ul><h2 id=\"vmPSD\"><span class=\"ne-text\">线程方法</span></h2><ul class=\"ne-ul\"><li id=\"u1aace648\"><span class=\"ne-text\" style=\"font-size: 14px\">sleep()</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u15f39ee8\"><span class=\"ne-text\" style=\"font-size: 14px\">暂停线程的执行，但不释放锁。常用于一定时间内暂停线程执行。</span></li><li id=\"u632b2d94\"><span class=\"ne-text\" style=\"font-size: 14px\">唤醒：睡眠指定时间后，线程自动苏醒。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u91d61f57\"><span class=\"ne-text\" style=\"font-size: 14px\">wait()</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u98afd8b3\"><span class=\"ne-text\" style=\"font-size: 14px\">暂停线程的执行，同时释放锁。常用于线程间的交互和通信。</span></li><li id=\"u840223f9\"><span class=\"ne-text\" style=\"font-size: 14px\">唤醒：通过 notify() 或者 notifyAll() 来唤醒线程。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u7e873282\"><span class=\"ne-text\" style=\"font-size: 14px\">yield()：</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">让出cpu，从运行态转为就绪态</span><span class=\"ne-text\" style=\"font-size: 14px\">\t</span></li><li id=\"u69e173f9\"><span class=\"ne-text\" style=\"font-size: 14px\">interrupt()：不会直接中断线程，</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">而是给目标线程发送中止信号</span><span class=\"ne-text\" style=\"font-size: 14px\">，目标线程中断标记位设为true。</span></li><li id=\"u3bd523f2\"><span class=\"ne-text\" style=\"font-size: 14px\">resume()：恢复被suspend()挂起的线程。</span></li></ul><h2 id=\"EFjgt\"><span class=\"ne-text\">线程中断</span></h2><p id=\"ufee4a54f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">编写需要中止的多线程，需要使用响应interrput标准的库。如 </span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">Theread.sleep(), Thread.wait()</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">。</span></p><p id=\"u2699aa42\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">反例：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">java.net.Socket 类的方法阻塞时不响应 interrupt</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">。</span></p><ul class=\"ne-ul\"><li id=\"u69a8b3d4\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">检测到当前线程被interrupt后，应抛出InterruptedException，并在finally或try-with-resource中清理执行状态</span></li><li id=\"uab0c6198\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">调用线程的interrupt方法，只有当线程走到了sleep, wait, join等阻塞这些方法的时候，才会抛出InterruptedException</span></li></ul><h2 id=\"tBiz9\"><span class=\"ne-text\">锁</span></h2><h3 id=\"OuzFG\"><span class=\"ne-text\">死锁</span></h3><ul class=\"ne-ul\"><li id=\"u5bf97ad7\"><span class=\"ne-text\" style=\"font-size: 14px\">产生原因：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u35c62895\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">异常条件下没有正确释放锁</span></li><li id=\"u26317b9d\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">两个或多个线程以不同的顺序请求和释放锁</span></li><li id=\"u38f9c56d\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">在产生阻塞的操作中持有锁</span></li></ul></ul><h3 id=\"pW3yO\"><span class=\"ne-text\">全局锁</span></h3><ul class=\"ne-ul\"><li id=\"uaa813552\"><span class=\"ne-text\" style=\"font-size: 14px\">产生原因：</span></li></ul><p id=\"u9c98417c\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\" style=\"font-size: 14px\">可重用的变量，如常量池中的变量被用作锁，即可能导致全局锁。</span></p><h3 id=\"NdSXZ\"><span class=\"ne-text\">可重入锁</span></h3><p id=\"u78949de1\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">定义：</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">一个线程获取锁后</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">不用释放，可以重复的获取一个锁n次，只是在释放的时候，也需要相应的释放n次。</span></p><ul class=\"ne-ul\"><li id=\"ub132a2dc\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">synchronized</span></li><li id=\"u0d5e9149\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">ReentrantLock：使用灵活，拓展性好。</span></li></ul><h2 id=\"cRtoN\"><span class=\"ne-text\">线程池</span></h2><ul class=\"ne-ul\"><li id=\"uc8e44c9a\"><span class=\"ne-text\" style=\"font-size: 14px\">newFixedThreadPool: </span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">固定且稳定的线程池，不会出现由于线程数增长而导致的系统线程资源不足的问题。</span></li><li id=\"uab742211\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">newCachedThreadPool: 没有等待队列，任务总是通过创建或者复用线程的方式得到执行，对任务的时延友好。</span></li><li id=\"ucbaf9fb7\"><span class=\"ne-text\" style=\"font-size: 14px\">newWorkStealingPool: </span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">适合用于很耗时的任务。</span></li><li id=\"u3d348b59\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">newSingleThreadExecutor: 适合固定的单线程任务。</span></li><li id=\"ub6100295\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">newScheduledThreadPool: 适合执行周期性的任务。</span></li></ul><h2 id=\"u0hGV\"><span class=\"ne-text\">线程异常</span></h2><p id=\"u19474c19\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">在某个线程运行出现异常时，遵循以下处理原则：</span></p><ol class=\"ne-ol\"><li id=\"u0859c526\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">子线程须自己捕获异常处理</span></li><li id=\"u2d0e4dec\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录</span></li><li id=\"u63ab27ef\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理</span></li></ol><p id=\"ud9f6e605\" class=\"ne-p\"><br></p><p id=\"ua733e431\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"rG3ZD\" id=\"rG3ZD\"><span data-lake-id=\"u6099f9e8\" id=\"u6099f9e8\">集合</span></h2><h3 data-lake-id=\"iEFfh\" id=\"iEFfh\"><span data-lake-id=\"u11243f97\" id=\"u11243f97\">线程安全</span></h3><ul list=\"u16702b87\"><li fid=\"ud0621052\" data-lake-id=\"u06f1acd6\" id=\"u06f1acd6\"><span data-lake-id=\"u7d6c52e7\" id=\"u7d6c52e7\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashTable, CocurrentHashMap</span></li><li fid=\"ud0621052\" data-lake-id=\"u3a8a8f09\" id=\"u3a8a8f09\"><span data-lake-id=\"u8a03f7b6\" id=\"u8a03f7b6\" class=\"lake-fontsize-11\" style=\"color: #303030\">Vector, Stack</span></li><li fid=\"ud0621052\" data-lake-id=\"u524de74e\" id=\"u524de74e\"><span data-lake-id=\"ub486beb3\" id=\"ub486beb3\" class=\"lake-fontsize-11\" style=\"color: #303030\">StringBuffer</span></li></ul><h3 data-lake-id=\"ruHLe\" id=\"ruHLe\"><span data-lake-id=\"ud19d06eb\" id=\"ud19d06eb\">线程不安全</span></h3><ul list=\"u2af1fdba\"><li fid=\"u30ef0837\" data-lake-id=\"u56064834\" id=\"u56064834\"><span data-lake-id=\"u91b395b3\" id=\"u91b395b3\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashMap, TreeMap, LinkedHashMap</span></li><li fid=\"u30ef0837\" data-lake-id=\"u43de9a4f\" id=\"u43de9a4f\"><span data-lake-id=\"u5b01390c\" id=\"u5b01390c\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashSet, TreeSet, LinkedHashSet</span></li><li fid=\"u30ef0837\" data-lake-id=\"u90a54e59\" id=\"u90a54e59\"><span data-lake-id=\"uc845d839\" id=\"uc845d839\" class=\"lake-fontsize-11\" style=\"color: #303030\">ArrayList, LinkedList</span></li><li fid=\"u30ef0837\" data-lake-id=\"u9635f9a4\" id=\"u9635f9a4\"><span data-lake-id=\"uce4b046e\" id=\"uce4b046e\" class=\"lake-fontsize-11\" style=\"color: #303030\">StringBuilder</span></li></ul><h2 data-lake-id=\"IYF8G\" id=\"IYF8G\"><span data-lake-id=\"uafeee6af\" id=\"uafeee6af\" class=\"lake-fontsize-12\">线程规范与管理</span></h2><h3 data-lake-id=\"isw47\" id=\"isw47\"><span data-lake-id=\"ube79d1ed\" id=\"ube79d1ed\">线程规范</span></h3><ul list=\"u5222a716\"><li fid=\"u5869ccc4\" data-lake-id=\"uf41004c3\" id=\"uf41004c3\"><span data-lake-id=\"ue3c17cdd\" id=\"ue3c17cdd\" class=\"lake-fontsize-11\">创建新线程时指定名称</span></li><li fid=\"u5869ccc4\" data-lake-id=\"u2d4c6fdb\" id=\"u2d4c6fdb\"><span data-lake-id=\"u06ec60ef\" id=\"u06ec60ef\" class=\"lake-fontsize-11\" style=\"color: #303030\">不要依赖线程调度器、线程优先级和yield()方法</span></li><li fid=\"u5869ccc4\" data-lake-id=\"u6b1f4ef0\" id=\"u6b1f4ef0\"><span data-lake-id=\"u6c51f40b\" id=\"u6c51f40b\" class=\"lake-fontsize-11\" style=\"color: #303030\">采用Java1.5提供</span><span data-lake-id=\"ub74874b9\" id=\"ub74874b9\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">新并发工具代替wait()和notify()</span></li></ul><h3 data-lake-id=\"rCmIX\" id=\"rCmIX\"><span data-lake-id=\"u3fadc4da\" id=\"u3fadc4da\">线程管理</span></h3><ul list=\"u8ef5832e\"><li fid=\"u6f63aa5d\" data-lake-id=\"u80403307\" id=\"u80403307\"><span data-lake-id=\"u891ebb40\" id=\"u891ebb40\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">禁用 Thread 的 run</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"uc8018b56\" id=\"uc8018b56\"><span data-lake-id=\"u1d31f23c\" id=\"u1d31f23c\" class=\"lake-fontsize-11\" style=\"color: #303030\">避免不加控制地创建新线程，而应该使用线程池来管控资源</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"ucdc8331a\" id=\"ucdc8331a\"><span data-lake-id=\"uc52d265c\" id=\"uc52d265c\" class=\"lake-fontsize-11\" style=\"color: #303030\">线程中断有业务代码来协作完成，</span><span data-lake-id=\"u8554c7bf\" id=\"u8554c7bf\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">慎用Thread.interrupt</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"u6ecf46cb\" id=\"u6ecf46cb\"><span data-lake-id=\"ub948399e\" id=\"ub948399e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">禁用 Thread 的 stop</span></li></ul><h2 data-lake-id=\"EkieI\" id=\"EkieI\"><span data-lake-id=\"u55073114\" id=\"u55073114\">线程同步</span></h2><h3 data-lake-id=\"LNP6r\" id=\"LNP6r\"><span data-lake-id=\"u1cca03eb\" id=\"u1cca03eb\">关键字</span></h3><ul list=\"uc64fca63\"><li fid=\"u7d327feb\" data-lake-id=\"u48ef89ce\" id=\"u48ef89ce\"><span data-lake-id=\"u994327ef\" id=\"u994327ef\" class=\"lake-fontsize-11\">synchronized</span></li></ul><ul list=\"uc64fca63\" data-lake-indent=\"1\"><li fid=\"u7d327feb\" data-lake-id=\"u7864c3a1\" id=\"u7864c3a1\"><span data-lake-id=\"u807a7816\" id=\"u807a7816\" class=\"lake-fontsize-11\">Jvm 对 synchronized 做了优化：</span><span data-lake-id=\"u1ac03400\" id=\"u1ac03400\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">锁消除，锁粗化，偏向锁，轻量级锁</span></li></ul><ul list=\"uc64fca63\" start=\"2\"><li fid=\"u7d327feb\" data-lake-id=\"u366457d2\" id=\"u366457d2\"><span data-lake-id=\"uc5ebf86e\" id=\"uc5ebf86e\" class=\"lake-fontsize-11\">volatile</span></li></ul><ul list=\"uc64fca63\" data-lake-indent=\"1\"><li fid=\"u7d327feb\" data-lake-id=\"u062afc60\" id=\"u062afc60\"><span data-lake-id=\"uc1ec508a\" id=\"uc1ec508a\" class=\"lake-fontsize-11\">可见性</span></li><li fid=\"u7d327feb\" data-lake-id=\"u774c1a07\" id=\"u774c1a07\"><span data-lake-id=\"u0891ed7e\" id=\"u0891ed7e\" class=\"lake-fontsize-11\">不保证原子性</span></li><li fid=\"u7d327feb\" data-lake-id=\"uefd00e81\" id=\"uefd00e81\"><span data-lake-id=\"ua9ff09a0\" id=\"ua9ff09a0\" class=\"lake-fontsize-11\">禁止进行指令重排序（有序性）</span></li><li fid=\"u7d327feb\" data-lake-id=\"u79a33724\" id=\"u79a33724\"><span data-lake-id=\"u3f4e6b7a\" id=\"u3f4e6b7a\" class=\"lake-fontsize-11\">线程不安全性</span></li></ul><ul list=\"uc64fca63\" start=\"3\"><li fid=\"u7d327feb\" data-lake-id=\"u0b6dba19\" id=\"u0b6dba19\"><span data-lake-id=\"u2584cc49\" id=\"u2584cc49\" class=\"lake-fontsize-11\">Atomic 类：保证原子操作</span></li></ul><h3 data-lake-id=\"aBp1y\" id=\"aBp1y\"><span data-lake-id=\"uc6862344\" id=\"uc6862344\">线程同步类</span></h3><ul list=\"u1dca3db3\"><li fid=\"uaef2ee9b\" data-lake-id=\"uc8fbf39e\" id=\"uc8fbf39e\"><span data-lake-id=\"ub45ae194\" id=\"ub45ae194\" class=\"lake-fontsize-11\">Semaphore（信号量）：控制并发线程的数量，通过配置信号量的个数，申请信号量来实现线程管理</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22Semaphore%20semaphore%20%3D%20new%20Semaphore(3)%3B%5Cn%5CnThreadPoolExecutor%20poolExecutor%20%3D%20%5Cn%20%20%20%20%20%20%20%20new%20ThreadPoolExecutor(10%2C%2020%2C%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%205000%2C%20TimeUnit.MILLISECONDS%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20LinkedBlockingDeque%3C%3E(100))%3B%5Cn%5Cnfor%20(int%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20int%20finalI%20%3D%20i%3B%5Cn%20%20%20%20poolExecutor.execute(new%20Thread()%20%7B%5Cn%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20public%20void%20run()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E6%89%A7%E8%A1%8C%E8%B5%84%E6%A0%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20semaphore.acquire(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(finalI%2B%5C%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%A8%A1%E6%8B%9F%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Thread.sleep(1000)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E9%87%8A%E6%94%BE%E6%89%A7%E8%A1%8C%E8%B5%84%E6%A0%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20semaphore.release(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22Semaphore%20%E4%BD%BF%E7%94%A8%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__height%22%3A240.015625%2C%22__spacing%22%3A%22both%22%2C%22__widthMode%22%3A%22normal%22%2C%22id%22%3A%22JUaDP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A240.015625%2C%22widthMode%22%3A%22normal%22%7D\"></card><ul list=\"uc5fd89a6\"><li fid=\"u6656ab7f\" data-lake-id=\"u1a3dbe28\" id=\"u1a3dbe28\"><span data-lake-id=\"u03fe2fc7\" id=\"u03fe2fc7\" class=\"lake-fontsize-11\">CountDownLatch（计数器）：可以实现计数的功能，主要方法为 countDown() 和 await()</span></li></ul><ul list=\"uc5fd89a6\" data-lake-indent=\"1\"><li fid=\"u6656ab7f\" data-lake-id=\"uccd1c007\" id=\"uccd1c007\"><span data-lake-id=\"u7e776268\" id=\"u7e776268\" class=\"lake-fontsize-11\">countDown() 使计数器减 1，计数器的数值无法重置。</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u78e2e256\" id=\"u78e2e256\"><span data-lake-id=\"u44decf13\" id=\"u44decf13\" class=\"lake-fontsize-11\">await() 阻塞当前线程，直到计数器为0。</span></li></ul><ul list=\"uc5fd89a6\" start=\"2\"><li fid=\"u6656ab7f\" data-lake-id=\"u70da72d5\" id=\"u70da72d5\"><span data-lake-id=\"u65f932e2\" id=\"u65f932e2\" class=\"lake-fontsize-11\" style=\"color: #303030\">Exchanger</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u48a40cd0\" id=\"u48a40cd0\"><span data-lake-id=\"u476074eb\" id=\"u476074eb\" class=\"lake-fontsize-11\" style=\"color: #303030\">Phaser</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u6f4e9a94\" id=\"u6f4e9a94\"><span data-lake-id=\"u7718490c\" id=\"u7718490c\" class=\"lake-fontsize-11\" style=\"color: #303030\">CyclicBarrier</span></li></ul><h2 data-lake-id=\"vmPSD\" id=\"vmPSD\"><span data-lake-id=\"uc3e0ce67\" id=\"uc3e0ce67\">线程方法</span></h2><ul list=\"udc127427\"><li fid=\"u7ec0eec6\" data-lake-id=\"u1aace648\" id=\"u1aace648\"><span data-lake-id=\"ufca822a3\" id=\"ufca822a3\" class=\"lake-fontsize-11\">sleep()</span></li></ul><ul list=\"udc127427\" data-lake-indent=\"1\"><li fid=\"u7ec0eec6\" data-lake-id=\"u15f39ee8\" id=\"u15f39ee8\"><span data-lake-id=\"uf4410dde\" id=\"uf4410dde\" class=\"lake-fontsize-11\">暂停线程的执行，但不释放锁。常用于一定时间内暂停线程执行。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u632b2d94\" id=\"u632b2d94\"><span data-lake-id=\"u70539eb2\" id=\"u70539eb2\" class=\"lake-fontsize-11\">唤醒：睡眠指定时间后，线程自动苏醒。</span></li></ul><ul list=\"udc127427\" start=\"2\"><li fid=\"u7ec0eec6\" data-lake-id=\"u91d61f57\" id=\"u91d61f57\"><span data-lake-id=\"ud267e61c\" id=\"ud267e61c\" class=\"lake-fontsize-11\">wait()</span></li></ul><ul list=\"udc127427\" data-lake-indent=\"1\"><li fid=\"u7ec0eec6\" data-lake-id=\"u98afd8b3\" id=\"u98afd8b3\"><span data-lake-id=\"ua5052637\" id=\"ua5052637\" class=\"lake-fontsize-11\">暂停线程的执行，同时释放锁。常用于线程间的交互和通信。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u840223f9\" id=\"u840223f9\"><span data-lake-id=\"u24a4c151\" id=\"u24a4c151\" class=\"lake-fontsize-11\">唤醒：通过 notify() 或者 notifyAll() 来唤醒线程。</span></li></ul><ul list=\"udc127427\" start=\"3\"><li fid=\"u7ec0eec6\" data-lake-id=\"u7e873282\" id=\"u7e873282\"><span data-lake-id=\"uf186d099\" id=\"uf186d099\" class=\"lake-fontsize-11\">yield()：</span><span data-lake-id=\"u59212a65\" id=\"u59212a65\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">让出cpu，从运行态转为就绪态</span><span data-lake-id=\"u876737a2\" id=\"u876737a2\" class=\"lake-fontsize-11\">\t</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u69e173f9\" id=\"u69e173f9\"><span data-lake-id=\"uc570b023\" id=\"uc570b023\" class=\"lake-fontsize-11\">interrupt()：不会直接中断线程，</span><span data-lake-id=\"u504b7a89\" id=\"u504b7a89\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">而是给目标线程发送中止信号</span><span data-lake-id=\"ue9060afd\" id=\"ue9060afd\" class=\"lake-fontsize-11\">，目标线程中断标记位设为true。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u3bd523f2\" id=\"u3bd523f2\"><span data-lake-id=\"u69bd0d93\" id=\"u69bd0d93\" class=\"lake-fontsize-11\">resume()：恢复被suspend()挂起的线程。</span></li></ul><h2 data-lake-id=\"EFjgt\" id=\"EFjgt\"><span data-lake-id=\"u63b2a5a1\" id=\"u63b2a5a1\">线程中断</span></h2><p data-lake-id=\"ufee4a54f\" id=\"ufee4a54f\"><span data-lake-id=\"u9c3e97fd\" id=\"u9c3e97fd\" class=\"lake-fontsize-11\" style=\"color: #303030\">编写需要中止的多线程，需要使用响应interrput标准的库。如 </span><span data-lake-id=\"uab2177eb\" id=\"uab2177eb\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">Theread.sleep(), Thread.wait()</span><span data-lake-id=\"uaeb567f0\" id=\"uaeb567f0\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><p data-lake-id=\"u2699aa42\" id=\"u2699aa42\"><span data-lake-id=\"ua398ea3b\" id=\"ua398ea3b\" class=\"lake-fontsize-11\" style=\"color: #303030\">反例：</span><span data-lake-id=\"u47947e2f\" id=\"u47947e2f\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">java.net.Socket 类的方法阻塞时不响应 interrupt</span><span data-lake-id=\"u7e8bdf50\" id=\"u7e8bdf50\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><ul list=\"uccf6fa29\"><li fid=\"uf65b4d3f\" data-lake-id=\"u69a8b3d4\" id=\"u69a8b3d4\"><span data-lake-id=\"u58e33dfe\" id=\"u58e33dfe\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">检测到当前线程被interrupt后，应抛出InterruptedException，并在finally或try-with-resource中清理执行状态</span></li><li fid=\"uf65b4d3f\" data-lake-id=\"uab0c6198\" id=\"uab0c6198\"><span data-lake-id=\"u738d4aa9\" id=\"u738d4aa9\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">调用线程的interrupt方法，只有当线程走到了sleep, wait, join等阻塞这些方法的时候，才会抛出InterruptedException</span></li></ul><h2 data-lake-id=\"tBiz9\" id=\"tBiz9\"><span data-lake-id=\"u8d8109f0\" id=\"u8d8109f0\">锁</span></h2><h3 data-lake-id=\"OuzFG\" id=\"OuzFG\"><span data-lake-id=\"uc8308269\" id=\"uc8308269\">死锁</span></h3><ul list=\"u11707d65\"><li fid=\"uce05842c\" data-lake-id=\"u5bf97ad7\" id=\"u5bf97ad7\"><span data-lake-id=\"ud56b5b76\" id=\"ud56b5b76\" class=\"lake-fontsize-11\">产生原因：</span></li></ul><ul list=\"u11707d65\" data-lake-indent=\"1\"><li fid=\"uce05842c\" data-lake-id=\"u35c62895\" id=\"u35c62895\"><span data-lake-id=\"ue5e3d26a\" id=\"ue5e3d26a\" class=\"lake-fontsize-11\" style=\"color: #303030\">异常条件下没有正确释放锁</span></li><li fid=\"uce05842c\" data-lake-id=\"u26317b9d\" id=\"u26317b9d\"><span data-lake-id=\"u092f8326\" id=\"u092f8326\" class=\"lake-fontsize-11\" style=\"color: #303030\">两个或多个线程以不同的顺序请求和释放锁</span></li><li fid=\"uce05842c\" data-lake-id=\"u38f9c56d\" id=\"u38f9c56d\"><span data-lake-id=\"u97749f0c\" id=\"u97749f0c\" class=\"lake-fontsize-11\" style=\"color: #303030\">在产生阻塞的操作中持有锁</span></li></ul><h3 data-lake-id=\"pW3yO\" id=\"pW3yO\"><span data-lake-id=\"u0fecb326\" id=\"u0fecb326\">全局锁</span></h3><ul list=\"u03e3f2d2\"><li fid=\"uad5913ac\" data-lake-id=\"uaa813552\" id=\"uaa813552\"><span data-lake-id=\"u64983ed2\" id=\"u64983ed2\" class=\"lake-fontsize-11\">产生原因：</span></li></ul><p data-lake-id=\"u9c98417c\" id=\"u9c98417c\" style=\"text-indent: 2em\"><span data-lake-id=\"u25eb4d4e\" id=\"u25eb4d4e\" class=\"lake-fontsize-11\">可重用的变量，如常量池中的变量被用作锁，即可能导致全局锁。</span></p><h3 data-lake-id=\"NdSXZ\" id=\"NdSXZ\"><span data-lake-id=\"ud3962120\" id=\"ud3962120\">可重入锁</span></h3><p data-lake-id=\"u78949de1\" id=\"u78949de1\"><span data-lake-id=\"ucc042487\" id=\"ucc042487\" class=\"lake-fontsize-11\">定义：</span><span data-lake-id=\"ufdc995f0\" id=\"ufdc995f0\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">一个线程获取锁后</span><span data-lake-id=\"u08999899\" id=\"u08999899\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">不用释放，可以重复的获取一个锁n次，只是在释放的时候，也需要相应的释放n次。</span></p><ul list=\"uc725286b\"><li fid=\"u879f1787\" data-lake-id=\"ub132a2dc\" id=\"ub132a2dc\"><span data-lake-id=\"u3611b649\" id=\"u3611b649\" class=\"lake-fontsize-11\" style=\"color: #303030\">synchronized</span></li><li fid=\"u879f1787\" data-lake-id=\"u0d5e9149\" id=\"u0d5e9149\"><span data-lake-id=\"u3bba64d9\" id=\"u3bba64d9\" class=\"lake-fontsize-11\" style=\"color: #303030\">ReentrantLock：使用灵活，拓展性好。</span></li></ul><h2 data-lake-id=\"cRtoN\" id=\"cRtoN\"><span data-lake-id=\"ua1e8a2ef\" id=\"ua1e8a2ef\">线程池</span></h2><ul list=\"ub6ab9959\"><li fid=\"u0a63d81d\" data-lake-id=\"uc8e44c9a\" id=\"uc8e44c9a\"><span data-lake-id=\"u7cbb5d48\" id=\"u7cbb5d48\" class=\"lake-fontsize-11\">newFixedThreadPool: </span><span data-lake-id=\"u05f87a51\" id=\"u05f87a51\" class=\"lake-fontsize-11\" style=\"color: #303030\">固定且稳定的线程池，不会出现由于线程数增长而导致的系统线程资源不足的问题。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"uab742211\" id=\"uab742211\"><span data-lake-id=\"ub37636ef\" id=\"ub37636ef\" class=\"lake-fontsize-11\" style=\"color: #303030\">newCachedThreadPool: 没有等待队列，任务总是通过创建或者复用线程的方式得到执行，对任务的时延友好。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"ucbaf9fb7\" id=\"ucbaf9fb7\"><span data-lake-id=\"uc8600fa8\" id=\"uc8600fa8\" class=\"lake-fontsize-11\">newWorkStealingPool: </span><span data-lake-id=\"u0532de63\" id=\"u0532de63\" class=\"lake-fontsize-11\" style=\"color: #303030\">适合用于很耗时的任务。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"u3d348b59\" id=\"u3d348b59\"><span data-lake-id=\"u42875d07\" id=\"u42875d07\" class=\"lake-fontsize-11\" style=\"color: #303030\">newSingleThreadExecutor: 适合固定的单线程任务。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"ub6100295\" id=\"ub6100295\"><span data-lake-id=\"u82b389fe\" id=\"u82b389fe\" class=\"lake-fontsize-11\" style=\"color: #303030\">newScheduledThreadPool: 适合执行周期性的任务。</span></li></ul><h2 data-lake-id=\"u0hGV\" id=\"u0hGV\"><span data-lake-id=\"uc8d38838\" id=\"uc8d38838\">线程异常</span></h2><p data-lake-id=\"u19474c19\" id=\"u19474c19\"><span data-lake-id=\"u5a474437\" id=\"u5a474437\" class=\"lake-fontsize-11\">在某个线程运行出现异常时，遵循以下处理原则：</span></p><ol list=\"u76c3a1a6\"><li fid=\"u8fc10ee7\" data-lake-id=\"u0859c526\" id=\"u0859c526\"><span data-lake-id=\"u8173a4f7\" id=\"u8173a4f7\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">子线程须自己捕获异常处理</span></li><li fid=\"u8fc10ee7\" data-lake-id=\"u2d0e4dec\" id=\"u2d0e4dec\"><span data-lake-id=\"u9c10f77e\" id=\"u9c10f77e\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录</span></li><li fid=\"u8fc10ee7\" data-lake-id=\"u63ab27ef\" id=\"u63ab27ef\"><span data-lake-id=\"ua2c1e00f\" id=\"ua2c1e00f\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理</span></li></ol><p data-lake-id=\"ud9f6e605\" id=\"ud9f6e605\"><br></p><p data-lake-id=\"ua733e431\" id=\"ua733e431\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"rG3ZD\" id=\"rG3ZD\"><span data-lake-id=\"u6099f9e8\" id=\"u6099f9e8\">集合</span></h2><h3 data-lake-id=\"iEFfh\" id=\"iEFfh\"><span data-lake-id=\"u11243f97\" id=\"u11243f97\">线程安全</span></h3><ul list=\"u16702b87\"><li fid=\"ud0621052\" data-lake-id=\"u06f1acd6\" id=\"u06f1acd6\"><span data-lake-id=\"u7d6c52e7\" id=\"u7d6c52e7\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashTable, CocurrentHashMap</span></li><li fid=\"ud0621052\" data-lake-id=\"u3a8a8f09\" id=\"u3a8a8f09\"><span data-lake-id=\"u8a03f7b6\" id=\"u8a03f7b6\" class=\"lake-fontsize-11\" style=\"color: #303030\">Vector, Stack</span></li><li fid=\"ud0621052\" data-lake-id=\"u524de74e\" id=\"u524de74e\"><span data-lake-id=\"ub486beb3\" id=\"ub486beb3\" class=\"lake-fontsize-11\" style=\"color: #303030\">StringBuffer</span></li></ul><h3 data-lake-id=\"ruHLe\" id=\"ruHLe\"><span data-lake-id=\"ud19d06eb\" id=\"ud19d06eb\">线程不安全</span></h3><ul list=\"u2af1fdba\"><li fid=\"u30ef0837\" data-lake-id=\"u56064834\" id=\"u56064834\"><span data-lake-id=\"u91b395b3\" id=\"u91b395b3\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashMap, TreeMap, LinkedHashMap</span></li><li fid=\"u30ef0837\" data-lake-id=\"u43de9a4f\" id=\"u43de9a4f\"><span data-lake-id=\"u5b01390c\" id=\"u5b01390c\" class=\"lake-fontsize-11\" style=\"color: #303030\">HashSet, TreeSet, LinkedHashSet</span></li><li fid=\"u30ef0837\" data-lake-id=\"u90a54e59\" id=\"u90a54e59\"><span data-lake-id=\"uc845d839\" id=\"uc845d839\" class=\"lake-fontsize-11\" style=\"color: #303030\">ArrayList, LinkedList</span></li><li fid=\"u30ef0837\" data-lake-id=\"u9635f9a4\" id=\"u9635f9a4\"><span data-lake-id=\"uce4b046e\" id=\"uce4b046e\" class=\"lake-fontsize-11\" style=\"color: #303030\">StringBuilder</span></li></ul><h2 data-lake-id=\"IYF8G\" id=\"IYF8G\"><span data-lake-id=\"uafeee6af\" id=\"uafeee6af\" class=\"lake-fontsize-12\">线程规范与管理</span></h2><h3 data-lake-id=\"isw47\" id=\"isw47\"><span data-lake-id=\"ube79d1ed\" id=\"ube79d1ed\">线程规范</span></h3><ul list=\"u5222a716\"><li fid=\"u5869ccc4\" data-lake-id=\"uf41004c3\" id=\"uf41004c3\"><span data-lake-id=\"ue3c17cdd\" id=\"ue3c17cdd\" class=\"lake-fontsize-11\">创建新线程时指定名称</span></li><li fid=\"u5869ccc4\" data-lake-id=\"u2d4c6fdb\" id=\"u2d4c6fdb\"><span data-lake-id=\"u06ec60ef\" id=\"u06ec60ef\" class=\"lake-fontsize-11\" style=\"color: #303030\">不要依赖线程调度器、线程优先级和yield()方法</span></li><li fid=\"u5869ccc4\" data-lake-id=\"u6b1f4ef0\" id=\"u6b1f4ef0\"><span data-lake-id=\"u6c51f40b\" id=\"u6c51f40b\" class=\"lake-fontsize-11\" style=\"color: #303030\">采用Java1.5提供</span><span data-lake-id=\"ub74874b9\" id=\"ub74874b9\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">新并发工具代替wait()和notify()</span></li></ul><h3 data-lake-id=\"rCmIX\" id=\"rCmIX\"><span data-lake-id=\"u3fadc4da\" id=\"u3fadc4da\">线程管理</span></h3><ul list=\"u8ef5832e\"><li fid=\"u6f63aa5d\" data-lake-id=\"u80403307\" id=\"u80403307\"><span data-lake-id=\"u891ebb40\" id=\"u891ebb40\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">禁用 Thread 的 run</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"uc8018b56\" id=\"uc8018b56\"><span data-lake-id=\"u1d31f23c\" id=\"u1d31f23c\" class=\"lake-fontsize-11\" style=\"color: #303030\">避免不加控制地创建新线程，而应该使用线程池来管控资源</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"ucdc8331a\" id=\"ucdc8331a\"><span data-lake-id=\"uc52d265c\" id=\"uc52d265c\" class=\"lake-fontsize-11\" style=\"color: #303030\">线程中断有业务代码来协作完成，</span><span data-lake-id=\"u8554c7bf\" id=\"u8554c7bf\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">慎用Thread.interrupt</span></li><li fid=\"u6f63aa5d\" data-lake-id=\"u6ecf46cb\" id=\"u6ecf46cb\"><span data-lake-id=\"ub948399e\" id=\"ub948399e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">禁用 Thread 的 stop</span></li></ul><h2 data-lake-id=\"EkieI\" id=\"EkieI\"><span data-lake-id=\"u55073114\" id=\"u55073114\">线程同步</span></h2><h3 data-lake-id=\"LNP6r\" id=\"LNP6r\"><span data-lake-id=\"u1cca03eb\" id=\"u1cca03eb\">关键字</span></h3><ul list=\"uc64fca63\"><li fid=\"u7d327feb\" data-lake-id=\"u48ef89ce\" id=\"u48ef89ce\"><span data-lake-id=\"u994327ef\" id=\"u994327ef\" class=\"lake-fontsize-11\">synchronized</span></li></ul><ul list=\"uc64fca63\" data-lake-indent=\"1\"><li fid=\"u7d327feb\" data-lake-id=\"u7864c3a1\" id=\"u7864c3a1\"><span data-lake-id=\"u807a7816\" id=\"u807a7816\" class=\"lake-fontsize-11\">Jvm 对 synchronized 做了优化：</span><span data-lake-id=\"u1ac03400\" id=\"u1ac03400\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">锁消除，锁粗化，偏向锁，轻量级锁</span></li></ul><ul list=\"uc64fca63\" start=\"2\"><li fid=\"u7d327feb\" data-lake-id=\"u366457d2\" id=\"u366457d2\"><span data-lake-id=\"uc5ebf86e\" id=\"uc5ebf86e\" class=\"lake-fontsize-11\">volatile</span></li></ul><ul list=\"uc64fca63\" data-lake-indent=\"1\"><li fid=\"u7d327feb\" data-lake-id=\"u062afc60\" id=\"u062afc60\"><span data-lake-id=\"uc1ec508a\" id=\"uc1ec508a\" class=\"lake-fontsize-11\">可见性</span></li><li fid=\"u7d327feb\" data-lake-id=\"u774c1a07\" id=\"u774c1a07\"><span data-lake-id=\"u0891ed7e\" id=\"u0891ed7e\" class=\"lake-fontsize-11\">不保证原子性</span></li><li fid=\"u7d327feb\" data-lake-id=\"uefd00e81\" id=\"uefd00e81\"><span data-lake-id=\"ua9ff09a0\" id=\"ua9ff09a0\" class=\"lake-fontsize-11\">禁止进行指令重排序（有序性）</span></li><li fid=\"u7d327feb\" data-lake-id=\"u79a33724\" id=\"u79a33724\"><span data-lake-id=\"u3f4e6b7a\" id=\"u3f4e6b7a\" class=\"lake-fontsize-11\">线程不安全性</span></li></ul><ul list=\"uc64fca63\" start=\"3\"><li fid=\"u7d327feb\" data-lake-id=\"u0b6dba19\" id=\"u0b6dba19\"><span data-lake-id=\"u2584cc49\" id=\"u2584cc49\" class=\"lake-fontsize-11\">Atomic 类：保证原子操作</span></li></ul><h3 data-lake-id=\"aBp1y\" id=\"aBp1y\"><span data-lake-id=\"uc6862344\" id=\"uc6862344\">线程同步类</span></h3><ul list=\"u1dca3db3\"><li fid=\"uaef2ee9b\" data-lake-id=\"uc8fbf39e\" id=\"uc8fbf39e\"><span data-lake-id=\"ub45ae194\" id=\"ub45ae194\" class=\"lake-fontsize-11\">Semaphore（信号量）：控制并发线程的数量，通过配置信号量的个数，申请信号量来实现线程管理</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22Semaphore%20semaphore%20%3D%20new%20Semaphore(3)%3B%5Cn%5CnThreadPoolExecutor%20poolExecutor%20%3D%20%5Cn%20%20%20%20%20%20%20%20new%20ThreadPoolExecutor(10%2C%2020%2C%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%205000%2C%20TimeUnit.MILLISECONDS%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20LinkedBlockingDeque%3C%3E(100))%3B%5Cn%5Cnfor%20(int%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20int%20finalI%20%3D%20i%3B%5Cn%20%20%20%20poolExecutor.execute(new%20Thread()%20%7B%5Cn%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20public%20void%20run()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E6%89%A7%E8%A1%8C%E8%B5%84%E6%A0%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20semaphore.acquire(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(finalI%2B%5C%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%A8%A1%E6%8B%9F%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Thread.sleep(1000)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E9%87%8A%E6%94%BE%E6%89%A7%E8%A1%8C%E8%B5%84%E6%A0%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20semaphore.release(1)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22Semaphore%20%E4%BD%BF%E7%94%A8%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__height%22%3A240.015625%2C%22__spacing%22%3A%22both%22%2C%22__widthMode%22%3A%22normal%22%2C%22id%22%3A%22JUaDP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A240.015625%2C%22widthMode%22%3A%22normal%22%7D\"></card><ul list=\"uc5fd89a6\"><li fid=\"u6656ab7f\" data-lake-id=\"u1a3dbe28\" id=\"u1a3dbe28\"><span data-lake-id=\"u03fe2fc7\" id=\"u03fe2fc7\" class=\"lake-fontsize-11\">CountDownLatch（计数器）：可以实现计数的功能，主要方法为 countDown() 和 await()</span></li></ul><ul list=\"uc5fd89a6\" data-lake-indent=\"1\"><li fid=\"u6656ab7f\" data-lake-id=\"uccd1c007\" id=\"uccd1c007\"><span data-lake-id=\"u7e776268\" id=\"u7e776268\" class=\"lake-fontsize-11\">countDown() 使计数器减 1，计数器的数值无法重置。</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u78e2e256\" id=\"u78e2e256\"><span data-lake-id=\"u44decf13\" id=\"u44decf13\" class=\"lake-fontsize-11\">await() 阻塞当前线程，直到计数器为0。</span></li></ul><ul list=\"uc5fd89a6\" start=\"2\"><li fid=\"u6656ab7f\" data-lake-id=\"u70da72d5\" id=\"u70da72d5\"><span data-lake-id=\"u65f932e2\" id=\"u65f932e2\" class=\"lake-fontsize-11\" style=\"color: #303030\">Exchanger</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u48a40cd0\" id=\"u48a40cd0\"><span data-lake-id=\"u476074eb\" id=\"u476074eb\" class=\"lake-fontsize-11\" style=\"color: #303030\">Phaser</span></li><li fid=\"u6656ab7f\" data-lake-id=\"u6f4e9a94\" id=\"u6f4e9a94\"><span data-lake-id=\"u7718490c\" id=\"u7718490c\" class=\"lake-fontsize-11\" style=\"color: #303030\">CyclicBarrier</span></li></ul><h2 data-lake-id=\"vmPSD\" id=\"vmPSD\"><span data-lake-id=\"uc3e0ce67\" id=\"uc3e0ce67\">线程方法</span></h2><ul list=\"udc127427\"><li fid=\"u7ec0eec6\" data-lake-id=\"u1aace648\" id=\"u1aace648\"><span data-lake-id=\"ufca822a3\" id=\"ufca822a3\" class=\"lake-fontsize-11\">sleep()</span></li></ul><ul list=\"udc127427\" data-lake-indent=\"1\"><li fid=\"u7ec0eec6\" data-lake-id=\"u15f39ee8\" id=\"u15f39ee8\"><span data-lake-id=\"uf4410dde\" id=\"uf4410dde\" class=\"lake-fontsize-11\">暂停线程的执行，但不释放锁。常用于一定时间内暂停线程执行。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u632b2d94\" id=\"u632b2d94\"><span data-lake-id=\"u70539eb2\" id=\"u70539eb2\" class=\"lake-fontsize-11\">唤醒：睡眠指定时间后，线程自动苏醒。</span></li></ul><ul list=\"udc127427\" start=\"2\"><li fid=\"u7ec0eec6\" data-lake-id=\"u91d61f57\" id=\"u91d61f57\"><span data-lake-id=\"ud267e61c\" id=\"ud267e61c\" class=\"lake-fontsize-11\">wait()</span></li></ul><ul list=\"udc127427\" data-lake-indent=\"1\"><li fid=\"u7ec0eec6\" data-lake-id=\"u98afd8b3\" id=\"u98afd8b3\"><span data-lake-id=\"ua5052637\" id=\"ua5052637\" class=\"lake-fontsize-11\">暂停线程的执行，同时释放锁。常用于线程间的交互和通信。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u840223f9\" id=\"u840223f9\"><span data-lake-id=\"u24a4c151\" id=\"u24a4c151\" class=\"lake-fontsize-11\">唤醒：通过 notify() 或者 notifyAll() 来唤醒线程。</span></li></ul><ul list=\"udc127427\" start=\"3\"><li fid=\"u7ec0eec6\" data-lake-id=\"u7e873282\" id=\"u7e873282\"><span data-lake-id=\"uf186d099\" id=\"uf186d099\" class=\"lake-fontsize-11\">yield()：</span><span data-lake-id=\"u59212a65\" id=\"u59212a65\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">让出cpu，从运行态转为就绪态</span><span data-lake-id=\"u876737a2\" id=\"u876737a2\" class=\"lake-fontsize-11\">\t</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u69e173f9\" id=\"u69e173f9\"><span data-lake-id=\"uc570b023\" id=\"uc570b023\" class=\"lake-fontsize-11\">interrupt()：不会直接中断线程，</span><span data-lake-id=\"u504b7a89\" id=\"u504b7a89\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">而是给目标线程发送中止信号</span><span data-lake-id=\"ue9060afd\" id=\"ue9060afd\" class=\"lake-fontsize-11\">，目标线程中断标记位设为true。</span></li><li fid=\"u7ec0eec6\" data-lake-id=\"u3bd523f2\" id=\"u3bd523f2\"><span data-lake-id=\"u69bd0d93\" id=\"u69bd0d93\" class=\"lake-fontsize-11\">resume()：恢复被suspend()挂起的线程。</span></li></ul><h2 data-lake-id=\"EFjgt\" id=\"EFjgt\"><span data-lake-id=\"u63b2a5a1\" id=\"u63b2a5a1\">线程中断</span></h2><p data-lake-id=\"ufee4a54f\" id=\"ufee4a54f\"><span data-lake-id=\"u9c3e97fd\" id=\"u9c3e97fd\" class=\"lake-fontsize-11\" style=\"color: #303030\">编写需要中止的多线程，需要使用响应interrput标准的库。如 </span><span data-lake-id=\"uab2177eb\" id=\"uab2177eb\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">Theread.sleep(), Thread.wait()</span><span data-lake-id=\"uaeb567f0\" id=\"uaeb567f0\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><p data-lake-id=\"u2699aa42\" id=\"u2699aa42\"><span data-lake-id=\"ua398ea3b\" id=\"ua398ea3b\" class=\"lake-fontsize-11\" style=\"color: #303030\">反例：</span><span data-lake-id=\"u47947e2f\" id=\"u47947e2f\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">java.net.Socket 类的方法阻塞时不响应 interrupt</span><span data-lake-id=\"u7e8bdf50\" id=\"u7e8bdf50\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><ul list=\"uccf6fa29\"><li fid=\"uf65b4d3f\" data-lake-id=\"u69a8b3d4\" id=\"u69a8b3d4\"><span data-lake-id=\"u58e33dfe\" id=\"u58e33dfe\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">检测到当前线程被interrupt后，应抛出InterruptedException，并在finally或try-with-resource中清理执行状态</span></li><li fid=\"uf65b4d3f\" data-lake-id=\"uab0c6198\" id=\"uab0c6198\"><span data-lake-id=\"u738d4aa9\" id=\"u738d4aa9\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">调用线程的interrupt方法，只有当线程走到了sleep, wait, join等阻塞这些方法的时候，才会抛出InterruptedException</span></li></ul><h2 data-lake-id=\"tBiz9\" id=\"tBiz9\"><span data-lake-id=\"u8d8109f0\" id=\"u8d8109f0\">锁</span></h2><h3 data-lake-id=\"OuzFG\" id=\"OuzFG\"><span data-lake-id=\"uc8308269\" id=\"uc8308269\">死锁</span></h3><ul list=\"u11707d65\"><li fid=\"uce05842c\" data-lake-id=\"u5bf97ad7\" id=\"u5bf97ad7\"><span data-lake-id=\"ud56b5b76\" id=\"ud56b5b76\" class=\"lake-fontsize-11\">产生原因：</span></li></ul><ul list=\"u11707d65\" data-lake-indent=\"1\"><li fid=\"uce05842c\" data-lake-id=\"u35c62895\" id=\"u35c62895\"><span data-lake-id=\"ue5e3d26a\" id=\"ue5e3d26a\" class=\"lake-fontsize-11\" style=\"color: #303030\">异常条件下没有正确释放锁</span></li><li fid=\"uce05842c\" data-lake-id=\"u26317b9d\" id=\"u26317b9d\"><span data-lake-id=\"u092f8326\" id=\"u092f8326\" class=\"lake-fontsize-11\" style=\"color: #303030\">两个或多个线程以不同的顺序请求和释放锁</span></li><li fid=\"uce05842c\" data-lake-id=\"u38f9c56d\" id=\"u38f9c56d\"><span data-lake-id=\"u97749f0c\" id=\"u97749f0c\" class=\"lake-fontsize-11\" style=\"color: #303030\">在产生阻塞的操作中持有锁</span></li></ul><h3 data-lake-id=\"pW3yO\" id=\"pW3yO\"><span data-lake-id=\"u0fecb326\" id=\"u0fecb326\">全局锁</span></h3><ul list=\"u03e3f2d2\"><li fid=\"uad5913ac\" data-lake-id=\"uaa813552\" id=\"uaa813552\"><span data-lake-id=\"u64983ed2\" id=\"u64983ed2\" class=\"lake-fontsize-11\">产生原因：</span></li></ul><p data-lake-id=\"u9c98417c\" id=\"u9c98417c\" style=\"text-indent: 2em\"><span data-lake-id=\"u25eb4d4e\" id=\"u25eb4d4e\" class=\"lake-fontsize-11\">可重用的变量，如常量池中的变量被用作锁，即可能导致全局锁。</span></p><h3 data-lake-id=\"NdSXZ\" id=\"NdSXZ\"><span data-lake-id=\"ud3962120\" id=\"ud3962120\">可重入锁</span></h3><p data-lake-id=\"u78949de1\" id=\"u78949de1\"><span data-lake-id=\"ucc042487\" id=\"ucc042487\" class=\"lake-fontsize-11\">定义：</span><span data-lake-id=\"ufdc995f0\" id=\"ufdc995f0\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">一个线程获取锁后</span><span data-lake-id=\"u08999899\" id=\"u08999899\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">不用释放，可以重复的获取一个锁n次，只是在释放的时候，也需要相应的释放n次。</span></p><ul list=\"uc725286b\"><li fid=\"u879f1787\" data-lake-id=\"ub132a2dc\" id=\"ub132a2dc\"><span data-lake-id=\"u3611b649\" id=\"u3611b649\" class=\"lake-fontsize-11\" style=\"color: #303030\">synchronized</span></li><li fid=\"u879f1787\" data-lake-id=\"u0d5e9149\" id=\"u0d5e9149\"><span data-lake-id=\"u3bba64d9\" id=\"u3bba64d9\" class=\"lake-fontsize-11\" style=\"color: #303030\">ReentrantLock：使用灵活，拓展性好。</span></li></ul><h2 data-lake-id=\"cRtoN\" id=\"cRtoN\"><span data-lake-id=\"ua1e8a2ef\" id=\"ua1e8a2ef\">线程池</span></h2><ul list=\"ub6ab9959\"><li fid=\"u0a63d81d\" data-lake-id=\"uc8e44c9a\" id=\"uc8e44c9a\"><span data-lake-id=\"u7cbb5d48\" id=\"u7cbb5d48\" class=\"lake-fontsize-11\">newFixedThreadPool: </span><span data-lake-id=\"u05f87a51\" id=\"u05f87a51\" class=\"lake-fontsize-11\" style=\"color: #303030\">固定且稳定的线程池，不会出现由于线程数增长而导致的系统线程资源不足的问题。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"uab742211\" id=\"uab742211\"><span data-lake-id=\"ub37636ef\" id=\"ub37636ef\" class=\"lake-fontsize-11\" style=\"color: #303030\">newCachedThreadPool: 没有等待队列，任务总是通过创建或者复用线程的方式得到执行，对任务的时延友好。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"ucbaf9fb7\" id=\"ucbaf9fb7\"><span data-lake-id=\"uc8600fa8\" id=\"uc8600fa8\" class=\"lake-fontsize-11\">newWorkStealingPool: </span><span data-lake-id=\"u0532de63\" id=\"u0532de63\" class=\"lake-fontsize-11\" style=\"color: #303030\">适合用于很耗时的任务。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"u3d348b59\" id=\"u3d348b59\"><span data-lake-id=\"u42875d07\" id=\"u42875d07\" class=\"lake-fontsize-11\" style=\"color: #303030\">newSingleThreadExecutor: 适合固定的单线程任务。</span></li><li fid=\"u0a63d81d\" data-lake-id=\"ub6100295\" id=\"ub6100295\"><span data-lake-id=\"u82b389fe\" id=\"u82b389fe\" class=\"lake-fontsize-11\" style=\"color: #303030\">newScheduledThreadPool: 适合执行周期性的任务。</span></li></ul><h2 data-lake-id=\"u0hGV\" id=\"u0hGV\"><span data-lake-id=\"uc8d38838\" id=\"uc8d38838\">线程异常</span></h2><p data-lake-id=\"u19474c19\" id=\"u19474c19\"><span data-lake-id=\"u5a474437\" id=\"u5a474437\" class=\"lake-fontsize-11\">在某个线程运行出现异常时，遵循以下处理原则：</span></p><ol list=\"u76c3a1a6\"><li fid=\"u8fc10ee7\" data-lake-id=\"u0859c526\" id=\"u0859c526\"><span data-lake-id=\"u8173a4f7\" id=\"u8173a4f7\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">子线程须自己捕获异常处理</span></li><li fid=\"u8fc10ee7\" data-lake-id=\"u2d0e4dec\" id=\"u2d0e4dec\"><span data-lake-id=\"u9c10f77e\" id=\"u9c10f77e\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录</span></li><li fid=\"u8fc10ee7\" data-lake-id=\"u63ab27ef\" id=\"u63ab27ef\"><span data-lake-id=\"ua2c1e00f\" id=\"ua2c1e00f\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理</span></li></ol><p data-lake-id=\"ud9f6e605\" id=\"ud9f6e605\"><br></p><p data-lake-id=\"ua733e431\" id=\"ua733e431\"><br></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-13T15:49:07.000Z",
    "deleted_at": null,
    "created_at": "2023-01-28T07:57:02.000Z",
    "updated_at": "2023-02-13T16:03:07.000Z",
    "published_at": "2023-02-13T15:49:07.000Z",
    "first_published_at": "2023-01-28T07:57:50.193Z",
    "word_count": 1032,
    "cover": null,
    "description": "集合线程安全HashTable, CocurrentHashMapVector, StackStringBuffer线程不安全HashMap, TreeMap, LinkedHashMapHashSet, TreeSet, LinkedHashSetArrayList, LinkedListS...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 112537296,
    "slug": "moefchr9cq75w2fc",
    "title": "Java 基础",
    "book_id": 35992233,
    "book": {
      "id": 35992233,
      "type": "Book",
      "slug": "lucdre",
      "name": "软件编程知识与应用",
      "user_id": 34997132,
      "description": null,
      "creator_id": 34997132,
      "public": 0,
      "items_count": 8,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-02-14T08:45:34.465Z",
      "updated_at": "2023-02-14T08:45:34.000Z",
      "created_at": "2023-01-28T07:32:10.000Z",
      "namespace": "kanye1005/lucdre",
      "user": {
        "id": 34997132,
        "type": "User",
        "login": "kanye1005",
        "name": "Kanye",
        "description": null,
        "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
        "books_count": 3,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2023-01-28T07:29:47.000Z",
        "updated_at": "2023-02-19T15:37:20.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 34997132,
    "creator": {
      "id": 34997132,
      "type": "User",
      "login": "kanye1005",
      "name": "Kanye",
      "description": null,
      "avatar_url": "https://mdn.alipayobjects.com/huamei_0prmtq/afts/img/A*khrYRYi6VN0AAAAAAAAAAAAADvuFAQ/original",
      "books_count": 3,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2023-01-28T07:29:47.000Z",
      "updated_at": "2023-02-19T15:37:20.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"u1H7p\"></a>\n## 基本数据类型\n- byte：字节，1 byte，8 bits （-128~127）\n- char：字符，2 bytes，如 '\\n', '\\u0012', '我'\n   - 字符是字节通过不同编码的包装\n   - 字符向字节转换时，需要注意编码问题\n- short：短整型，2 bytes\n- int：整型，4 bytes\n- long：长整型，8 bytes\n- float：短浮点型，4 bytes\n- double：浮点型，8 bytes （默认浮点）\n\n类型转换：低到高<br />低  -------------------------------------------------->  高 <br />byte,short,char—> int —> long—> float —> double \n\n- 注意 final 修饰的变量不会自动转型。\n<a name=\"RF4OV\"></a>\n## Class and Interface\n<a name=\"t1Bwg\"></a>\n### Interface\n\n- Interface 也可以有成员变量，默认修饰符：public static final，interface 不能有构造方法。\n- Interface 可以用 public，protected，default 来修饰，不能用 private\n<a name=\"qU8SN\"></a>\n### Class\n\n- abstract class：用 abstract 修饰的就是抽象类，可以拥有构造方法\n- extends\n   - final 修饰的成员变量/方法，可以被继承，但不能被重写\n   - static，private 修饰的方法，不可以被继承\n   - 子类继承父类时，如果父类的构造函数有参数，则需要显式调用\n   - 如果一个子类 override 了父类的某个方法，不要在父类的构造方法中调用该函数。\n   - 对父类的四种操作：\n      - 重写 (overload)：子类对父类接口的重写，相同的返回值和形参，使用@override注解。\n      - 隐藏 (hide)：父类同名的成员变量和静态方法只会被隐藏（静态绑定导致），只有成员方法享有动态绑定。\n      - 重载 (override)：同类之间函数的不通返回值和形参\n- class 的生命周期\n   - 用户自定义的类：类的对象不在被引用，即被卸载\n   - Java虚拟机自带的类：保持整个JVM的生命周期，加载顺序：\n      - Bootstrap ClassLoader：加载 %JAVA_HOME%/lib 下的所有 jar 包\n      - Extention ClassLoader ：加载 %JAVA_HOME%/lib/ext 下的所有 jar 包\n      - AppClassLoader：加载当前 classpath 下的所有 jar 包\n- 类加载机制\n   - 双亲委派模型：加载类的时候，首先委托加载父类一直到顶。\n- 类加载器\n   - 自定义类加载器复写`getPermissions()`方法的时候，需要调用父类的`getPermissions()`方法来获取默认系统规则。否则：\n      - 该自定义类加载器加载的类具有的权限就会完全独立于系统全局策略文件规定的权限\n      - 该类的权限覆盖了这些系统全局文件规定的权限。\n- 对象初始化顺序：依次是（静态变量、静态初始化块）>（变量、初始化块）> 构造器\n<a name=\"hnWWv\"></a>\n## Immutable (不可变类)\n**不可变类**：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：Boolean, Byte, Character, Double, Float, Integer, Long, Short, String, BigDecimal。 <br />**可变类**：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。\n<a name=\"xWHPE\"></a>\n## 集合\n<a name=\"UsAL6\"></a>\n#### Size and capacity extension\n\n- Initial Capacity：ArrayList(10), Vector(10), StringBuilder(16), StringBuffer(16), HashMap(16), HashSet(16)，HashTable(11)\n- 动态扩容\n   - HashTable =  2 * size + 1\n   - 2 * size  : HashMap, vector, Stack, LinkedHashMap\n   - 1.5 * size : ArrayList\n<a name=\"fkIS4\"></a>\n#### List and Arraye\n<a name=\"eWz2h\"></a>\n##### List\nsublist()方法生成的子list与原list存在关联\n\n- LinkedList\n   - 迭代的时候使用 remove 方法会导致迭代出现预期之外的情况\n<a name=\"LbC9u\"></a>\n##### Array\n数组复制：System.array.copy (效率最高)\n<a name=\"uo076\"></a>\n#### Map   \n\n- HashMap\n   - 不可保证元素的顺序，key，value 均可为 null。\n- LinkedHashMap\n   - 调用 get() 方法会打乱 keySet 的顺序，将访问的 key 放到最后\n   - 有 removeEldestEntry 方法，可以简单控制 map size\n- TreeMap\n   - key 不可以为 null，value 可以。\n- ConcurrentHashMap\n   - key, value 都不可以为 null\n   - 线程安全且全程不需要手动加锁，Map中效率最高。 \n- 注：HashTable 中的 key, value 也都不可以为 null\n<a name=\"lAnxE\"></a>\n## Reflection\n反射机制允许程序获取指定对象的类的相关方法与字段。\n\n- getDeclaredFields()：获取所有声明的成员变量，包括 private\n- getFields()：获取所有的public变量，包括父类的 public 变量。\n- getDeclaredMethods(): 获取所有声明的成员方法。\n- getDeclaredConstructors(): 获取所有构造函数。\n<a name=\"Zhqnu\"></a>\n## 注解 （Annotation）\n<a name=\"EfOIN\"></a>\n### 元注解 （java.annotations）\n@Documented ：该注解标记的内容会被 JavaDoc 工具提取成文档<br />@Target ：用于注解一个注解的使用范围，用成员变量 value 来指定范围<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png#averageHue=%23f2f2f2&clientId=u6a707b01-3786-4&from=paste&height=293&id=ue809fee9&name=image.png&originHeight=586&originWidth=894&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76157&status=done&style=none&taskId=ucb5f28f2-9757-4445-8b53-2bb833eec56&title=&width=447)<br />@Rentation 用于描述注解的生命周期\n\n- SOURCE: 仅在源文件中有效\n- CLASS：在 Class 文件中有效\n- RUNTIME：在运行中有效\n\n@Inherited 表示该注解可以被继承<br />@Native 修饰成员变量，表示该变量可以被本地代码引用\n<a name=\"TfZV1\"></a>\n### 其他注解（java.lang）\n\n- @Override\n- @Deprecated\n- @SuppressWarnings\n<a name=\"TqcJ8\"></a>\n### 自定义注解\n可以开发一个注解类，但是需要使用 @interface 关键字来声明。\n<a name=\"xPHqK\"></a>\n## Exception 异常\n<a name=\"wpBkX\"></a>\n### 敏感异常\n\n- InsufficientResourcesException：服务器资源不足，可能会造成dos攻击\n- OutOfMemoryError：dos攻击\n- StackOverflowError：dos攻击\n- JarException：泄露文件系统结构\n- FileNotFoundException：泄露文件系统结构和文件名列举\n- SQLException：暴露数据库结构，并造成用户名列举\n- MissingResourceException，造成资源列举\n- NotOwnerException：所有人列举\n- BindException：当不信任客户端能够选择服务器端口时造成开放端口列举\n- ConcurrentModificationException：可能提供线程不安全的代码信息\n<a name=\"x4qxD\"></a>\n### 是否受检\n受检异常需要在代码中明确使用 throw 抛出异常，否则编译不通过。\n\n- 受检：FileNotFoundException, IOException, SQLException，ClassNotFoundException, InterruptedException, NoSuchFieldException\n- 非受检：NullPointerException, ClassCastException, IllegalArgumentException, ArrayIndexsOutOfBoundsException, ArithmeticException\n<a name=\"wdKOt\"></a>\n### 异常处理\n\n- 不要直接捕获基类 Exception 来处理异常，可以使用并语句明确指出需要捕获的异常\n- 打开文件流有异常，必须进行处理(输入流，输出流，错误流)；在 finally 语句中关闭流，抛出异常时可以忽略异常，仅记录日志。\n- 不要直接抛出 NullPointerException 异常，而是使用空引用判断。\n<a name=\"W0BfX\"></a>\n## GC\n垃圾回收（GC）是由 Java 虚拟机（JVM）垃圾回收器提供的一种对内存回收的一种机制，它一般会在内存空闲或者内存占用过高的时候对那些没有任何引用的对象不定时地进行回收。\n<a name=\"Lp6x5\"></a>\n### GC使用\n\n- 在频率/周期性的逻辑中更要尽量避免主动GC的调用。因为在 GC 过程中的某些阶段程序会完全停顿，这会让程序失去响应，对系统造成非常大的风险。\n- 即使调用主动GC方法后，系统也不会立即进行垃圾回收操作。\n<a name=\"jKVTV\"></a>\n### GC算法\n\n- 后台运算而不需要太多交互的任务\n   - Parallel Scavenge（吞吐量优先）\n- 对响应速度有较高要求的服务\n   - CMS（响应速度优先）\n   - G1（响应速度优先）\n   - ZGC（STW小于10ms）\n<a name=\"kdGpG\"></a>\n## 编译\n使用 javac 进行编译时，包含以下几个过程：\n\n- 语义分析及生成字节码\n- 词法分析及填充符号表\n- 注解处理\n<a name=\"W8KiR\"></a>\n### JVM 代码优化\nJVM 在对代码执行的优化可分为运行时（runtime）优化和即时编译器（JIT）优化。运行时优化主要是解释执行和动态编译通用的一些机制，比如说模版解释器、内联缓存（inline cache，用于优化虚方法调用的动态绑定）。\n\n- JITTest.doubleIndex被内联\n- JITTest.doubleIndex会被编译成机器码执行\n<a name=\"Q5ABo\"></a>\n## 序列化\nJava 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列用于网络传输。但是，序列化只能保存对象的非静态成员变量，不能保存任何的成员方法和静态的成员变量。\n<a name=\"Gqv8s\"></a>\n### 安全问题\n\n- 可以通过定义serialPersistentFields数组字段来确保敏感字段被排除在序列化之外，除此之外，也可以通过自定义writeObject()、writeReplace()、writeExternal()这些函数，不将包含敏感信息的字段写到序列化字节流中。\n- 通过将敏感字段声明为 transient，可以使它们不包括在依照默认的序列化机制应该被序列化的字段列表中。\n",
    "body_draft": "<a name=\"u1H7p\"></a>\n## 基本数据类型\n- byte：字节，1 byte，8 bits （-128~127）\n- char：字符，2 bytes，如 '\\n', '\\u0012', '我'\n   - 字符是字节通过不同编码的包装\n   - 字符向字节转换时，需要注意编码问题\n- short：短整型，2 bytes\n- int：整型，4 bytes\n- long：长整型，8 bytes\n- float：短浮点型，4 bytes\n- double：浮点型，8 bytes （默认浮点）\n\n类型转换：低到高<br />低  -------------------------------------------------->  高 <br />byte,short,char—> int —> long—> float —> double \n\n- 注意 final 修饰的变量不会自动转型。\n<a name=\"RF4OV\"></a>\n## Class and Interface\n<a name=\"t1Bwg\"></a>\n### Interface\n\n- Interface 也可以有成员变量，默认修饰符：public static final，interface 不能有构造方法。\n- Interface 可以用 public，protected，default 来修饰，不能用 private\n<a name=\"qU8SN\"></a>\n### Class\n\n- abstract class：用 abstract 修饰的就是抽象类，可以拥有构造方法\n- extends\n   - final 修饰的成员变量/方法，可以被继承，但不能被重写\n   - static，private 修饰的方法，不可以被继承\n   - 子类继承父类时，如果父类的构造函数有参数，则需要显式调用\n   - 如果一个子类 override 了父类的某个方法，不要在父类的构造方法中调用该函数。\n   - 对父类的四种操作：\n      - 重写 (overload)：子类对父类接口的重写，相同的返回值和形参，使用@override注解。\n      - 隐藏 (hide)：父类同名的成员变量和静态方法只会被隐藏（静态绑定导致），只有成员方法享有动态绑定。\n      - 重载 (override)：同类之间函数的不通返回值和形参\n- class 的生命周期\n   - 用户自定义的类：类的对象不在被引用，即被卸载\n   - Java虚拟机自带的类：保持整个JVM的生命周期，加载顺序：\n      - Bootstrap ClassLoader：加载 %JAVA_HOME%/lib 下的所有 jar 包\n      - Extention ClassLoader ：加载 %JAVA_HOME%/lib/ext 下的所有 jar 包\n      - AppClassLoader：加载当前 classpath 下的所有 jar 包\n- 类加载机制\n   - 双亲委派模型：加载类的时候，首先委托加载父类一直到顶。\n- 类加载器\n   - 自定义类加载器复写`getPermissions()`方法的时候，需要调用父类的`getPermissions()`方法来获取默认系统规则。否则：\n      - 该自定义类加载器加载的类具有的权限就会完全独立于系统全局策略文件规定的权限\n      - 该类的权限覆盖了这些系统全局文件规定的权限。\n- 对象初始化顺序：依次是（静态变量、静态初始化块）>（变量、初始化块）> 构造器\n<a name=\"hnWWv\"></a>\n## Immutable (不可变类)\n**不可变类**：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：Boolean, Byte, Character, Double, Float, Integer, Long, Short, String, BigDecimal。 <br />**可变类**：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。\n<a name=\"xWHPE\"></a>\n## 集合\n<a name=\"UsAL6\"></a>\n#### Size and capacity extension\n\n- Initial Capacity：ArrayList(10), Vector(10), StringBuilder(16), StringBuffer(16), HashMap(16), HashSet(16)，HashTable(11)\n- 动态扩容\n   - HashTable =  2 * size + 1\n   - 2 * size  : HashMap, vector, Stack, LinkedHashMap\n   - 1.5 * size : ArrayList\n<a name=\"fkIS4\"></a>\n#### List and Arraye\n<a name=\"eWz2h\"></a>\n##### List\nsublist()方法生成的子list与原list存在关联\n\n- LinkedList\n   - 迭代的时候使用 remove 方法会导致迭代出现预期之外的情况\n<a name=\"LbC9u\"></a>\n##### Array\n数组复制：System.array.copy (效率最高)\n<a name=\"uo076\"></a>\n#### Map   \n\n- HashMap\n   - 不可保证元素的顺序，key，value 均可为 null。\n- LinkedHashMap\n   - 调用 get() 方法会打乱 keySet 的顺序，将访问的 key 放到最后\n   - 有 removeEldestEntry 方法，可以简单控制 map size\n- TreeMap\n   - key 不可以为 null，value 可以。\n- ConcurrentHashMap\n   - key, value 都不可以为 null\n   - 线程安全且全程不需要手动加锁，Map中效率最高。 \n- 注：HashTable 中的 key, value 也都不可以为 null\n<a name=\"lAnxE\"></a>\n## Reflection\n反射机制允许程序获取指定对象的类的相关方法与字段。\n\n- getDeclaredFields()：获取所有声明的成员变量，包括 private\n- getFields()：获取所有的public变量，包括父类的 public 变量。\n- getDeclaredMethods(): 获取所有声明的成员方法。\n- getDeclaredConstructors(): 获取所有构造函数。\n<a name=\"Zhqnu\"></a>\n## 注解 （Annotation）\n<a name=\"EfOIN\"></a>\n### 元注解 （java.annotations）\n@Documented ：该注解标记的内容会被 JavaDoc 工具提取成文档<br />@Target ：用于注解一个注解的使用范围，用成员变量 value 来指定范围<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/34997132/1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png#averageHue=%23f2f2f2&clientId=u6a707b01-3786-4&from=paste&height=293&id=ue809fee9&name=image.png&originHeight=586&originWidth=894&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76157&status=done&style=none&taskId=ucb5f28f2-9757-4445-8b53-2bb833eec56&title=&width=447)<br />@Rentation 用于描述注解的生命周期\n\n- SOURCE: 仅在源文件中有效\n- CLASS：在 Class 文件中有效\n- RUNTIME：在运行中有效\n\n@Inherited 表示该注解可以被继承<br />@Native 修饰成员变量，表示该变量可以被本地代码引用\n<a name=\"TfZV1\"></a>\n### 其他注解（java.lang）\n\n- @Override\n- @Deprecated\n- @SuppressWarnings\n<a name=\"TqcJ8\"></a>\n### 自定义注解\n可以开发一个注解类，但是需要使用 @interface 关键字来声明。\n<a name=\"xPHqK\"></a>\n## Exception 异常\n<a name=\"wpBkX\"></a>\n### 敏感异常\n\n- InsufficientResourcesException：服务器资源不足，可能会造成dos攻击\n- OutOfMemoryError：dos攻击\n- StackOverflowError：dos攻击\n- JarException：泄露文件系统结构\n- FileNotFoundException：泄露文件系统结构和文件名列举\n- SQLException：暴露数据库结构，并造成用户名列举\n- MissingResourceException，造成资源列举\n- NotOwnerException：所有人列举\n- BindException：当不信任客户端能够选择服务器端口时造成开放端口列举\n- ConcurrentModificationException：可能提供线程不安全的代码信息\n<a name=\"x4qxD\"></a>\n### 是否受检\n受检异常需要在代码中明确使用 throw 抛出异常，否则编译不通过。\n\n- 受检：FileNotFoundException, IOException, SQLException，ClassNotFoundException, InterruptedException, NoSuchFieldException\n- 非受检：NullPointerException, ClassCastException, IllegalArgumentException, ArrayIndexsOutOfBoundsException, ArithmeticException\n<a name=\"wdKOt\"></a>\n### 异常处理\n\n- 不要直接捕获基类 Exception 来处理异常，可以使用并语句明确指出需要捕获的异常\n- 打开文件流有异常，必须进行处理(输入流，输出流，错误流)；在 finally 语句中关闭流，抛出异常时可以忽略异常，仅记录日志。\n- 不要直接抛出 NullPointerException 异常，而是使用空引用判断。\n<a name=\"W0BfX\"></a>\n## GC\n垃圾回收（GC）是由 Java 虚拟机（JVM）垃圾回收器提供的一种对内存回收的一种机制，它一般会在内存空闲或者内存占用过高的时候对那些没有任何引用的对象不定时地进行回收。\n<a name=\"Lp6x5\"></a>\n### GC使用\n\n- 在频率/周期性的逻辑中更要尽量避免主动GC的调用。因为在 GC 过程中的某些阶段程序会完全停顿，这会让程序失去响应，对系统造成非常大的风险。\n- 即使调用主动GC方法后，系统也不会立即进行垃圾回收操作。\n<a name=\"jKVTV\"></a>\n### GC算法\n\n- 后台运算而不需要太多交互的任务\n   - Parallel Scavenge（吞吐量优先）\n- 对响应速度有较高要求的服务\n   - CMS（响应速度优先）\n   - G1（响应速度优先）\n   - ZGC（STW小于10ms）\n<a name=\"kdGpG\"></a>\n## 编译\n使用 javac 进行编译时，包含以下几个过程：\n\n- 语义分析及生成字节码\n- 词法分析及填充符号表\n- 注解处理\n<a name=\"W8KiR\"></a>\n### JVM 代码优化\nJVM 在对代码执行的优化可分为运行时（runtime）优化和即时编译器（JIT）优化。运行时优化主要是解释执行和动态编译通用的一些机制，比如说模版解释器、内联缓存（inline cache，用于优化虚方法调用的动态绑定）。\n\n- JITTest.doubleIndex被内联\n- JITTest.doubleIndex会被编译成机器码执行\n<a name=\"Q5ABo\"></a>\n## 序列化\nJava 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列用于网络传输。但是，序列化只能保存对象的非静态成员变量，不能保存任何的成员方法和静态的成员变量。\n<a name=\"Gqv8s\"></a>\n### 安全问题\n\n- 可以通过定义serialPersistentFields数组字段来确保敏感字段被排除在序列化之外，除此之外，也可以通过自定义writeObject()、writeReplace()、writeExternal()这些函数，不将包含敏感信息的字段写到序列化字节流中。\n- 通过将敏感字段声明为 transient，可以使它们不包括在依照默认的序列化机制应该被序列化的字段列表中。\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"u1H7p\"><span class=\"ne-text\">基本数据类型</span></h2><ul class=\"ne-ul\"><li id=\"ubb39c437\"><span class=\"ne-text\" style=\"font-size: 14px\">byte：字节，1 byte，8 bits （-128~127）</span></li><li id=\"udd93e4b5\"><span class=\"ne-text\" style=\"font-size: 14px\">char：字符，2 bytes，如 '\\n', '\\u0012', '我'</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u44e74168\"><span class=\"ne-text\" style=\"font-size: 14px\">字符是字节通过不同编码的包装</span></li><li id=\"u311d63e9\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">字符向字节转换时，需要注意编码问题</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u031618eb\"><span class=\"ne-text\" style=\"font-size: 14px\">short：短整型，2 bytes</span></li><li id=\"u0f793785\"><span class=\"ne-text\" style=\"font-size: 14px\">int：整型，4 bytes</span></li><li id=\"u19ade4c1\"><span class=\"ne-text\" style=\"font-size: 14px\">long：长整型，8 bytes</span></li><li id=\"uf3e443f5\"><span class=\"ne-text\" style=\"font-size: 14px\">float：短浮点型，4 bytes</span></li><li id=\"u1f2149eb\"><span class=\"ne-text\" style=\"font-size: 14px\">double：浮点型，8 bytes （</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">默认浮点</span><span class=\"ne-text\" style=\"font-size: 14px\">）</span></li></ul><p id=\"u1050348e\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">类型转换：低到高</span></p><p id=\"u40d76303\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">低  --------------------------------------------------&gt;  高 </span></p><p id=\"u1fe7ae5c\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double </span></p><ul class=\"ne-ul\"><li id=\"u752f5ffd\"><span class=\"ne-text\" style=\"font-size: 14px; background-color: #FBDE28\">注意 final 修饰的变量不会自动转型</span><span class=\"ne-text\" style=\"font-size: 14px\">。</span></li></ul><h2 id=\"RF4OV\"><span class=\"ne-text\">Class and Interface</span></h2><h3 id=\"t1Bwg\"><span class=\"ne-text\">Interface</span></h3><ul class=\"ne-ul\"><li id=\"u604fe436\"><span class=\"ne-text\" style=\"font-size: 14px\">Interface 也可以有成员变量，默认修饰符：public static final，interface 不能有构造方法。</span></li><li id=\"ud4b4e84f\"><span class=\"ne-text\" style=\"font-size: 14px\">Interface 可以用 public，protected，default 来修饰，不能用 private</span></li></ul><h3 id=\"qU8SN\"><span class=\"ne-text\">Class</span></h3><ul class=\"ne-ul\"><li id=\"ue57d7cd1\"><span class=\"ne-text\" style=\"font-size: 14px\">abstract class：用 abstract 修饰的就是抽象类，</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #CEF5F7\">可以拥有构造方法</span></li><li id=\"ue2e877fd\"><span class=\"ne-text\" style=\"font-size: 14px\">extends</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u22702ef5\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">final 修饰的成员变量/方法，可以被继承，但不能被重写</span></li><li id=\"u7b98d6f6\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">static，private 修饰的方法，不可以被继承</span></li><li id=\"uea5c7508\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">子类继承父类时，如果父类的构造函数有参数，</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">则需要显式调用</span></li><li id=\"u26daeddd\"><span class=\"ne-text\" style=\"font-size: 14px\">如果一个子类 override 了父类的某个方法，</span><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">不要在父类的构造方法中调用该函数</span><span class=\"ne-text\" style=\"font-size: 14px\">。</span></li><li id=\"u650cad55\"><span class=\"ne-text\" style=\"font-size: 14px\">对父类的四种操作：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u7d2dee18\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">重写 (overload)：子类对父类接口的</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7; font-size: 14px\">重写，相同的返回值和形参</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">，使用@override注解。</span></li><li id=\"u281bd922\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">隐藏 (hide)：父类同名的</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7; font-size: 14px\">成员变量和静态方法只会被隐藏</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">（静态绑定导致），只有成员方法享有动态绑定。</span></li><li id=\"ub2ced5c4\" style=\"text-align: justify\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">重载 (override)：同类之间函数的不通返回值和形参</span></li></ul></ul></ul><ul class=\"ne-ul\"><li id=\"ub159990c\"><span class=\"ne-text\" style=\"font-size: 14px\">class 的生命周期</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u2442971f\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">用户自定义的类：类的对象不在被引用，即被卸载</span></li><li id=\"u663be6cc\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Java虚拟机自带的类：保持整个JVM的生命周期，加载顺序：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u1cc2816f\"><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">Bootstrap ClassLoader：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">加载 %JAVA_HOME%/lib 下的所有 jar 包</span></li><li id=\"ubeef563d\"><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">Extention ClassLoader ：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">加载 %JAVA_HOME%/lib/ext 下的所有 jar 包</span></li><li id=\"ub6e63688\"><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">AppClassLoader：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">加载当前 classpath 下的所有 jar 包</span></li></ul></ul></ul><ul class=\"ne-ul\"><li id=\"u0676fa8a\"><span class=\"ne-text\" style=\"font-size: 14px\">类加载机制</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u4c6dac0b\"><span class=\"ne-text\" style=\"font-size: 14px\">双亲委派模型：加载类的时候，首先委托加载父类一直到顶。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"uadf078fa\"><span class=\"ne-text\" style=\"font-size: 14px\">类加载器</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u1202c3cb\"><span class=\"ne-text\" style=\"font-size: 14px\">自定义类加载器复写</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"font-size: 14px\">getPermissions()</span></code><span class=\"ne-text\" style=\"font-size: 14px\">方法的时候，需要调用父类的</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"font-size: 14px\">getPermissions()</span></code><span class=\"ne-text\" style=\"font-size: 14px\">方法来获取默认系统规则。否则：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"ue640de44\"><span class=\"ne-text\" style=\"font-size: 14px\">该自定义类加载器加载的类具有的权限就会完全独立于系统全局策略文件规定的权限</span></li><li id=\"u5f3fb599\"><span class=\"ne-text\" style=\"font-size: 14px\">该类的权限覆盖了这些系统全局文件规定的权限。</span></li></ul></ul></ul><ul class=\"ne-ul\"><li id=\"u3c245605\"><span class=\"ne-text\" style=\"font-size: 14px\">对象初始化顺序：</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">依次是（静态变量、静态初始化块）&gt;（变量、初始化块）&gt; 构造器</span></li></ul><h2 id=\"hnWWv\"><span class=\"ne-text\">Immutable (不可变类)</span></h2><p id=\"u8bcebc03\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">不可变类</span></strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：</span><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); background-color: #CEF5F7; font-size: 14px\">Boolean, Byte, Character, Double, Float, Integer, Long, Short, String, BigDecimal</span><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">。 </span></p><p id=\"u15d5e898\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">可变类</span></strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。</span></p><h2 id=\"xWHPE\"><span class=\"ne-text\" style=\"font-size: 14px\">集合</span></h2><h4 id=\"UsAL6\"><span class=\"ne-text\">Size and capacity extension</span></h4><ul class=\"ne-ul\"><li id=\"ua771b6c3\"><span class=\"ne-text\" style=\"font-size: 14px\">Initial Capacity：</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">ArrayList(10), Vector(10), StringBuilder(16), StringBuffer(16), HashMap(16), HashSet(16)，HashTable(11)</span></li><li id=\"ubbccf6f0\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">动态扩容</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u736789e0\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">HashTable =  2 * size + 1</span></li><li id=\"u4b097eb5\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">2 * size  : HashMap, vector, Stack, LinkedHashMap</span></li><li id=\"u65e89827\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">1.5 * size : ArrayList</span></li></ul></ul><h4 id=\"fkIS4\"><span class=\"ne-text\">List and Arraye</span></h4><h5 id=\"eWz2h\"><span class=\"ne-text\">List</span></h5><p id=\"uccbe39fe\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">sublist()方法生成的子list与原list存在关联</span></p><ul class=\"ne-ul\"><li id=\"ueadd5b77\"><span class=\"ne-text\" style=\"font-size: 14px\">LinkedList</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u8e49eb3c\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">迭代的时候使用 remove 方法会导致迭代出现预期之外的情况</span></li></ul></ul><h5 id=\"LbC9u\"><span class=\"ne-text\">Array</span></h5><p id=\"u31fbda06\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">数组复制：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">System.array.copy (效率最高)</span></p><h4 id=\"uo076\"><span class=\"ne-text\">Map   </span></h4><ul class=\"ne-ul\"><li id=\"u17db01be\"><span class=\"ne-text\" style=\"font-size: 14px\">HashMap</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ue67743bb\"><span class=\"ne-text\" style=\"font-size: 14px\">不可保证元素的顺序，</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">key，value 均可为 null</span><span class=\"ne-text\" style=\"font-size: 14px\">。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u3bb8d057\"><span class=\"ne-text\" style=\"font-size: 14px\">LinkedHashMap</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u1f9a9f75\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">调用 get() 方法会打乱 keySet 的顺序，</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">将访问的 key 放到最后</span></li><li id=\"u3a72be12\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">有 removeEldestEntry 方法，可以简单控制 map size</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u257cbecf\"><span class=\"ne-text\" style=\"font-size: 14px\">TreeMap</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc646e172\"><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">key 不可以为 null</span><span class=\"ne-text\" style=\"font-size: 14px\">，value 可以。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u7d7f9f9a\"><span class=\"ne-text\" style=\"font-size: 14px\">ConcurrentHashMap</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ua87398d0\"><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">key, value 都不可以为 null</span></li><li id=\"u1a2043d2\"><span class=\"ne-text\" style=\"font-size: 14px\">线程安全且全程不需要手动加锁，Map中效率最高。 </span></li></ul></ul><ul class=\"ne-ul\"><li id=\"udde09310\"><span class=\"ne-text\" style=\"font-size: 14px\">注：</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #FBDE28\">HashTable 中的 key, value 也都不可以为 null</span></li></ul><h2 id=\"lAnxE\"><span class=\"ne-text\">Reflection</span></h2><p id=\"u45ec183e\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">反射机制允许程序获取</span><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">指定对象的类的相关方法与字段</span><span class=\"ne-text\" style=\"font-size: 14px\">。</span></p><ul class=\"ne-ul\"><li id=\"ud5e9fa17\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">getDeclaredFields()：获取所有声明的成员变量，</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px; background-color: #CEF5F7\">包括 private</span></li><li id=\"u0a7b3a43\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">getFields()：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px; background-color: #CEF5F7\">获取所有的public变量</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">，包括父类的 public 变量。</span></li><li id=\"u57a1b5e7\"><span class=\"ne-text\" style=\"font-size: 14px\">getDeclaredMethods(): 获取所有声明的成员方法。</span></li><li id=\"u049e4836\"><span class=\"ne-text\" style=\"font-size: 14px\">getDeclaredConstructors(): 获取所有构造函数。</span></li></ul><h2 id=\"Zhqnu\"><span class=\"ne-text\">注解 （Annotation）</span></h2><h3 id=\"EfOIN\"><span class=\"ne-text\">元注解 （java.annotations）</span></h3><p id=\"ub87963b9\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">@Documented ：该注解标记的内容会被 JavaDoc 工具提取成文档</span></p><p id=\"ube36e4bf\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">@Target ：用于注解一个注解的使用范围，用成员变量 value 来指定范围</span></p><p id=\"u7d6c4248\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/34997132/1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png\" width=\"447\" id=\"ue809fee9\" class=\"ne-image\"></p><p id=\"ud760c720\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\">@Rentation 用于描述注解的生命周期</span></p><ul class=\"ne-ul\"><li id=\"udd2536df\" style=\"text-align: left\"><span class=\"ne-text\">SOURCE: 仅在源文件中有效</span></li><li id=\"u593a610c\" style=\"text-align: left\"><span class=\"ne-text\">CLASS：在 Class 文件中有效</span></li><li id=\"u3b993092\" style=\"text-align: left\"><span class=\"ne-text\">RUNTIME：在运行中有效</span></li></ul><p id=\"ub0eecd68\" class=\"ne-p\"><span class=\"ne-text\">@Inherited 表示该注解可以被继承</span></p><p id=\"u352cdb27\" class=\"ne-p\"><span class=\"ne-text\">@Native 修饰成员变量，表示该变量可以被本地代码引用</span></p><h3 id=\"TfZV1\"><span class=\"ne-text\">其他注解（java.lang）</span></h3><ul class=\"ne-ul\"><li id=\"uda215c3f\"><span class=\"ne-text\" style=\"font-size: 14px\">@Override</span></li><li id=\"u0f47623a\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">@Deprecated</span></li><li id=\"u5b6ec954\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">@SuppressWarnings</span></li></ul><h3 id=\"TqcJ8\"><span class=\"ne-text\">自定义注解</span></h3><p id=\"ubbf5f361\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">可以开发一个注解类，但是需要使用</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\"> @interface </span><span class=\"ne-text\" style=\"font-size: 14px\">关键字来声明。</span></p><h2 id=\"xPHqK\"><span class=\"ne-text\">Exception 异常</span></h2><h3 id=\"wpBkX\"><span class=\"ne-text\">敏感异常</span></h3><ul class=\"ne-ul\"><li id=\"u8b538b02\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">InsufficientResourcesException：服务器资源不足，可能会造成</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">dos攻击</span></li><li id=\"u067cfe4c\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">OutOfMemoryError：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">dos攻击</span></li><li id=\"u2999c95b\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">StackOverflowError：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">dos攻击</span></li><li id=\"u387a0413\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">JarException：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #E8F7CF; font-size: 14px\">泄露文件系统结构</span></li><li id=\"u4ef035b0\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">FileNotFoundException：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #E8F7CF; font-size: 14px\">泄露文件系统结构</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">和</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">文件名列举</span></li><li id=\"ucdea2b40\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">SQLException：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #E8F7CF; font-size: 14px\">暴露数据库结构</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">，并造成</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">用户名列举</span></li><li id=\"ufef1329f\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">MissingResourceException，造成</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">资源列举</span></li><li id=\"u24329c04\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">NotOwnerException：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">所有人列举</span></li><li id=\"ud1428474\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">BindException：当不信任客户端能够选择服务器端口时造成</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">开放端口列举</span></li><li id=\"u37e5d1a9\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">ConcurrentModificationException：可能提供线程不安全的代码信息</span></li></ul><h3 id=\"x4qxD\"><span class=\"ne-text\">是否受检</span></h3><p id=\"uecd0b7d3\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">受检异常需要在代码中明确使用 throw 抛出异常，否则编译不通过。</span></p><ul class=\"ne-ul\"><li id=\"uccad5d6a\"><span class=\"ne-text\" style=\"font-size: 14px\">受检：</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">FileNotFoundException, IOException, SQLException，ClassNotFoundException, InterruptedException, NoSuchFieldException</span></li><li id=\"u4ce067f9\"><span class=\"ne-text\" style=\"font-size: 14px\">非受检：</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">NullPointerException, ClassCastException, IllegalArgumentException, ArrayIndexsOutOfBoundsException, ArithmeticException</span></li></ul><h3 id=\"wdKOt\"><span class=\"ne-text\" style=\"color: #303030\">异常处理</span></h3><ul class=\"ne-ul\"><li id=\"ue863f578\"><span class=\"ne-text\" style=\"background-color: #FBDE28; font-size: 14px\">不要直接捕获基类 Exception 来处理异常</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">，可以使用并语句明确指出需要捕获的异常</span></li><li id=\"uff0524fd\"><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">打开文件流有异常，必须进行处理(输入流，输出流，错误流)</span><span class=\"ne-text\" style=\"font-size: 14px\">；</span><span class=\"ne-text\" style=\"font-size: 14px; background-color: #E8F7CF\">在 finally 语句中关闭流，抛出异常时可以忽略异常</span><span class=\"ne-text\" style=\"font-size: 14px\">，仅记录日志。</span></li><li id=\"ud1c7dc52\"><span class=\"ne-text\" style=\"font-size: 14px\">不要直接抛出 NullPointerException 异常，而是使用空引用判断。</span></li></ul><h2 id=\"W0BfX\"><span class=\"ne-text\">GC</span></h2><p id=\"ua2161da8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #000000; font-size: 14px\">垃圾回收（GC）是由 Java 虚拟机（JVM）垃圾回收器提供的一种对内存回收的一种机制，它一般会在内存空闲或者内存占用过高的时候对那些没有任何引用的对象不定时地进行回收。</span></p><h3 id=\"Lp6x5\"><span class=\"ne-text\" style=\"color: #000000\">GC使用</span></h3><ul class=\"ne-ul\"><li id=\"u127253bc\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">在频率/周期性的逻辑中更要尽量</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28; font-size: 14px\">避免主动GC的调用</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">。因为</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7; font-size: 14px\">在 GC 过程中的某些阶段程序会完全停顿</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">，这会让程序失去响应，对系统造成非常大的风险。</span></li><li id=\"ueb154946\"><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">即使调用主动GC方法后，</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28; font-size: 14px\">系统也不会立即进行垃圾回收操作</span><span class=\"ne-text\" style=\"color: rgb(36, 41, 46); font-size: 14px\">。</span></li></ul><h3 id=\"jKVTV\"><span class=\"ne-text\">GC算法</span></h3><ul class=\"ne-ul\"><li id=\"u52773171\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">后台运算而不需要太多交互的任务</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ub5711224\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">Parallel Scavenge（吞吐量优先）</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u377ba148\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">对响应速度有较高要求的服务</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc1e53549\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">CMS（响应速度优先）</span></li><li id=\"u3852f45b\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">G1（响应速度优先）</span></li><li id=\"uccc79f9c\"><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">ZGC（STW小于10ms）</span></li></ul></ul><h2 id=\"kdGpG\"><span class=\"ne-text\">编译</span></h2><p id=\"ud20bd39a\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 14px\">使用 javac 进行编译时，包含以下几个过程：</span></p><ul class=\"ne-ul\"><li id=\"u6d0588eb\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">语义分析及生成字节码</span></li><li id=\"ua8c98911\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">词法分析及填充符号表</span></li><li id=\"u27b47a76\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">注解处理</span></li></ul><h3 id=\"W8KiR\"><span class=\"ne-text\" style=\"color: #303030\">JVM 代码优化</span></h3><p id=\"u96451b04\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 14px\">JVM 在对代码执行的优化可分为运行时（runtime）优化和即时编译器（JIT）优化。运行时优化主要是解释执行和动态编译通用的一些机制，</span><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); background-color: #CEF5F7; font-size: 14px\">比如说模版解释器、内联缓存（inline cache，用于优化虚方法调用的动态绑定）</span><span class=\"ne-text\" style=\"color: rgb(77, 77, 77); font-size: 14px\">。</span></p><ul class=\"ne-ul\"><li id=\"u4dc2a0d2\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">JITTest.doubleIndex被内联</span></li><li id=\"u82d979ce\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">JITTest.doubleIndex会被编译成机器码执行</span></li></ul><h2 id=\"Q5ABo\"><span class=\"ne-text\">序列化</span></h2><p id=\"u3bc5b6d2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 14px\">Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列用于网络传输。</span><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 13px\">但是，</span><span class=\"ne-text\" style=\"color: #303030; background-color: #CEF5F7; font-size: 14px\">序列化只能保存对象的非静态成员变量</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">，</span><span class=\"ne-text\" style=\"color: #303030; background-color: #FBDE28; font-size: 14px\">不能保存任何的成员方法和静态的成员变量</span><span class=\"ne-text\" style=\"color: #303030; font-size: 14px\">。</span></p><h3 id=\"Gqv8s\"><span class=\"ne-text\" style=\"color: #303030\">安全问题</span></h3><ul class=\"ne-ul\"><li id=\"u7f6ef016\"><span class=\"ne-text\" style=\"font-size: 14px\">可以通过定义serialPersistentFields数组字段来确保敏感字段被排除在序列化之外，除此之外，也可以通过自定义</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\">writeObject()、writeReplace()、writeExternal()</span><span class=\"ne-text\" style=\"font-size: 14px\">这些函数，不将包含敏感信息的字段写到序列化字节流中。</span></li><li id=\"uccf3f5d1\"><span class=\"ne-text\" style=\"font-size: 14px\">通过将敏感字段声明为</span><span class=\"ne-text\" style=\"background-color: #CEF5F7; font-size: 14px\"> transient</span><span class=\"ne-text\" style=\"font-size: 14px\">，可以使它们不包括在依照默认的序列化机制应该被序列化的字段列表中。</span></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"u1H7p\" id=\"u1H7p\"><span data-lake-id=\"u625164d0\" id=\"u625164d0\">基本数据类型</span></h2><ul list=\"u9fb8038e\"><li fid=\"u2fe19598\" data-lake-id=\"ubb39c437\" id=\"ubb39c437\"><span data-lake-id=\"uc22cca16\" id=\"uc22cca16\" class=\"lake-fontsize-11\">byte：字节，1 byte，8 bits （-128~127）</span></li><li fid=\"u2fe19598\" data-lake-id=\"udd93e4b5\" id=\"udd93e4b5\"><span data-lake-id=\"uef2d36a0\" id=\"uef2d36a0\" class=\"lake-fontsize-11\">char：字符，2 bytes，如 '\\n', '\\u0012', '我'</span></li></ul><ul list=\"u9fb8038e\" data-lake-indent=\"1\"><li fid=\"u2fe19598\" data-lake-id=\"u44e74168\" id=\"u44e74168\"><span data-lake-id=\"u4d97c9c3\" id=\"u4d97c9c3\" class=\"lake-fontsize-11\">字符是字节通过不同编码的包装</span></li><li fid=\"u2fe19598\" data-lake-id=\"u311d63e9\" id=\"u311d63e9\"><span data-lake-id=\"ufd252be8\" id=\"ufd252be8\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">字符向字节转换时，需要注意编码问题</span></li></ul><ul list=\"u9fb8038e\" start=\"3\"><li fid=\"u2fe19598\" data-lake-id=\"u031618eb\" id=\"u031618eb\"><span data-lake-id=\"u5790805b\" id=\"u5790805b\" class=\"lake-fontsize-11\">short：短整型，2 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u0f793785\" id=\"u0f793785\"><span data-lake-id=\"u3adb7238\" id=\"u3adb7238\" class=\"lake-fontsize-11\">int：整型，4 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u19ade4c1\" id=\"u19ade4c1\"><span data-lake-id=\"u0211b0bd\" id=\"u0211b0bd\" class=\"lake-fontsize-11\">long：长整型，8 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"uf3e443f5\" id=\"uf3e443f5\"><span data-lake-id=\"ub18d813f\" id=\"ub18d813f\" class=\"lake-fontsize-11\">float：短浮点型，4 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u1f2149eb\" id=\"u1f2149eb\"><span data-lake-id=\"u3377a480\" id=\"u3377a480\" class=\"lake-fontsize-11\">double：浮点型，8 bytes （</span><span data-lake-id=\"u8c41a9a6\" id=\"u8c41a9a6\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">默认浮点</span><span data-lake-id=\"u68c0844c\" id=\"u68c0844c\" class=\"lake-fontsize-11\">）</span></li></ul><p data-lake-id=\"u1050348e\" id=\"u1050348e\"><span data-lake-id=\"u17539493\" id=\"u17539493\" class=\"lake-fontsize-11\">类型转换：低到高</span></p><p data-lake-id=\"u40d76303\" id=\"u40d76303\"><span data-lake-id=\"u5956386e\" id=\"u5956386e\" class=\"lake-fontsize-11\">低  --------------------------------------------------&gt;  高 </span></p><p data-lake-id=\"u1fe7ae5c\" id=\"u1fe7ae5c\"><span data-lake-id=\"u5ac27a9b\" id=\"u5ac27a9b\" class=\"lake-fontsize-11\">byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double </span></p><ul list=\"u67b0b728\"><li fid=\"u709f85b7\" data-lake-id=\"u752f5ffd\" id=\"u752f5ffd\"><span data-lake-id=\"u361deeb8\" id=\"u361deeb8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">注意 final 修饰的变量不会自动转型</span><span data-lake-id=\"u6d82771e\" id=\"u6d82771e\" class=\"lake-fontsize-11\">。</span></li></ul><h2 data-lake-id=\"RF4OV\" id=\"RF4OV\"><span data-lake-id=\"ua1ba7ca6\" id=\"ua1ba7ca6\">Class and Interface</span></h2><h3 data-lake-id=\"t1Bwg\" id=\"t1Bwg\"><span data-lake-id=\"u6f8bafaa\" id=\"u6f8bafaa\">Interface</span></h3><ul list=\"u54e1f12e\"><li fid=\"u2f906131\" data-lake-id=\"u604fe436\" id=\"u604fe436\"><span data-lake-id=\"u55adcbf4\" id=\"u55adcbf4\" class=\"lake-fontsize-11\">Interface 也可以有成员变量，默认修饰符：public static final，interface 不能有构造方法。</span></li><li fid=\"u2f906131\" data-lake-id=\"ud4b4e84f\" id=\"ud4b4e84f\"><span data-lake-id=\"u88145fcd\" id=\"u88145fcd\" class=\"lake-fontsize-11\">Interface 可以用 public，protected，default 来修饰，不能用 private</span></li></ul><h3 data-lake-id=\"qU8SN\" id=\"qU8SN\"><span data-lake-id=\"u21ebb9bc\" id=\"u21ebb9bc\">Class</span></h3><ul list=\"u3bdd4599\"><li fid=\"u7af3510f\" data-lake-id=\"ue57d7cd1\" id=\"ue57d7cd1\"><span data-lake-id=\"u334d53d5\" id=\"u334d53d5\" class=\"lake-fontsize-11\">abstract class：用 abstract 修饰的就是抽象类，</span><span data-lake-id=\"uecff0603\" id=\"uecff0603\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">可以拥有构造方法</span></li><li fid=\"u7af3510f\" data-lake-id=\"ue2e877fd\" id=\"ue2e877fd\"><span data-lake-id=\"u3f5313cf\" id=\"u3f5313cf\" class=\"lake-fontsize-11\">extends</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"1\"><li fid=\"u7af3510f\" data-lake-id=\"u22702ef5\" id=\"u22702ef5\"><span data-lake-id=\"ue022d86e\" id=\"ue022d86e\" class=\"lake-fontsize-11\" style=\"color: #303030\">final 修饰的成员变量/方法，可以被继承，但不能被重写</span></li><li fid=\"u7af3510f\" data-lake-id=\"u7b98d6f6\" id=\"u7b98d6f6\"><span data-lake-id=\"ub4b8401d\" id=\"ub4b8401d\" class=\"lake-fontsize-11\" style=\"color: #303030\">static，private 修饰的方法，不可以被继承</span></li><li fid=\"u7af3510f\" data-lake-id=\"uea5c7508\" id=\"uea5c7508\"><span data-lake-id=\"udaa36106\" id=\"udaa36106\" class=\"lake-fontsize-11\" style=\"color: #303030\">子类继承父类时，如果父类的构造函数有参数，</span><span data-lake-id=\"u6eec89d6\" id=\"u6eec89d6\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">则需要显式调用</span></li><li fid=\"u7af3510f\" data-lake-id=\"u26daeddd\" id=\"u26daeddd\"><span data-lake-id=\"u1855be6d\" id=\"u1855be6d\" class=\"lake-fontsize-11\">如果一个子类 override 了父类的某个方法，</span><span data-lake-id=\"ua0cd7c55\" id=\"ua0cd7c55\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">不要在父类的构造方法中调用该函数</span><span data-lake-id=\"ua011d7fa\" id=\"ua011d7fa\" class=\"lake-fontsize-11\">。</span></li><li fid=\"u7af3510f\" data-lake-id=\"u650cad55\" id=\"u650cad55\"><span data-lake-id=\"uecb85846\" id=\"uecb85846\" class=\"lake-fontsize-11\">对父类的四种操作：</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"2\"><li fid=\"u7af3510f\" data-lake-id=\"u7d2dee18\" id=\"u7d2dee18\"><span data-lake-id=\"u23a0945f\" id=\"u23a0945f\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">重写 (overload)：子类对父类接口的</span><span data-lake-id=\"ucf4b40c9\" id=\"ucf4b40c9\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">重写，相同的返回值和形参</span><span data-lake-id=\"u99d74610\" id=\"u99d74610\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">，使用@override注解。</span></li><li fid=\"u7af3510f\" data-lake-id=\"u281bd922\" id=\"u281bd922\"><span data-lake-id=\"u0d28cd6d\" id=\"u0d28cd6d\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">隐藏 (hide)：父类同名的</span><span data-lake-id=\"u309f786e\" id=\"u309f786e\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">成员变量和静态方法只会被隐藏</span><span data-lake-id=\"u3be0365a\" id=\"u3be0365a\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">（静态绑定导致），只有成员方法享有动态绑定。</span></li><li fid=\"u7af3510f\" data-lake-id=\"ub2ced5c4\" id=\"ub2ced5c4\" style=\"text-align: justify\"><span data-lake-id=\"u64d150ec\" id=\"u64d150ec\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">重载 (override)：同类之间函数的不通返回值和形参</span></li></ul><ul list=\"u3bdd4599\" start=\"3\"><li fid=\"u7af3510f\" data-lake-id=\"ub159990c\" id=\"ub159990c\"><span data-lake-id=\"ub4654bf7\" id=\"ub4654bf7\" class=\"lake-fontsize-11\">class 的生命周期</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"1\"><li fid=\"u7af3510f\" data-lake-id=\"u2442971f\" id=\"u2442971f\"><span data-lake-id=\"u3ced731f\" id=\"u3ced731f\" class=\"lake-fontsize-11\" style=\"color: #303030\">用户自定义的类：类的对象不在被引用，即被卸载</span></li><li fid=\"u7af3510f\" data-lake-id=\"u663be6cc\" id=\"u663be6cc\"><span data-lake-id=\"ub0a7008a\" id=\"ub0a7008a\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java虚拟机自带的类：保持整个JVM的生命周期，加载顺序：</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"2\"><li fid=\"u7af3510f\" data-lake-id=\"u1cc2816f\" id=\"u1cc2816f\"><span data-lake-id=\"ua9665846\" id=\"ua9665846\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">Bootstrap ClassLoader：</span><span data-lake-id=\"u0244d24c\" id=\"u0244d24c\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载 %JAVA_HOME%/lib 下的所有 jar 包</span></li><li fid=\"u7af3510f\" data-lake-id=\"ubeef563d\" id=\"ubeef563d\"><span data-lake-id=\"uff7cd6c3\" id=\"uff7cd6c3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">Extention ClassLoader ：</span><span data-lake-id=\"u3afdc920\" id=\"u3afdc920\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载 %JAVA_HOME%/lib/ext 下的所有 jar 包</span></li><li fid=\"u7af3510f\" data-lake-id=\"ub6e63688\" id=\"ub6e63688\"><span data-lake-id=\"u35681a56\" id=\"u35681a56\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">AppClassLoader：</span><span data-lake-id=\"ue072d3fe\" id=\"ue072d3fe\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载当前 classpath 下的所有 jar 包</span></li></ul><ul list=\"ubf5add9a\"><li fid=\"u3cf94880\" data-lake-id=\"u0676fa8a\" id=\"u0676fa8a\"><span data-lake-id=\"ue97a5932\" id=\"ue97a5932\" class=\"lake-fontsize-11\">类加载机制</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"1\"><li fid=\"u3cf94880\" data-lake-id=\"u4c6dac0b\" id=\"u4c6dac0b\"><span data-lake-id=\"ub4bbd8fd\" id=\"ub4bbd8fd\" class=\"lake-fontsize-11\">双亲委派模型：加载类的时候，首先委托加载父类一直到顶。</span></li></ul><ul list=\"ubf5add9a\" start=\"2\"><li fid=\"u3cf94880\" data-lake-id=\"uadf078fa\" id=\"uadf078fa\"><span data-lake-id=\"u4c5fa8c6\" id=\"u4c5fa8c6\" class=\"lake-fontsize-11\">类加载器</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"1\"><li fid=\"u3cf94880\" data-lake-id=\"u1202c3cb\" id=\"u1202c3cb\"><span data-lake-id=\"uaa011d9c\" id=\"uaa011d9c\" class=\"lake-fontsize-11\">自定义类加载器复写</span><code data-lake-id=\"u5a6ae8df\" id=\"u5a6ae8df\"><span data-lake-id=\"u9cb33a96\" id=\"u9cb33a96\" class=\"lake-fontsize-11\">getPermissions()</span></code><span data-lake-id=\"ub2e7a9f4\" id=\"ub2e7a9f4\" class=\"lake-fontsize-11\">方法的时候，需要调用父类的</span><code data-lake-id=\"u774a989d\" id=\"u774a989d\"><span data-lake-id=\"udeb8be0c\" id=\"udeb8be0c\" class=\"lake-fontsize-11\">getPermissions()</span></code><span data-lake-id=\"u7c705747\" id=\"u7c705747\" class=\"lake-fontsize-11\">方法来获取默认系统规则。否则：</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"2\"><li fid=\"u3cf94880\" data-lake-id=\"ue640de44\" id=\"ue640de44\"><span data-lake-id=\"u78de772f\" id=\"u78de772f\" class=\"lake-fontsize-11\">该自定义类加载器加载的类具有的权限就会完全独立于系统全局策略文件规定的权限</span></li><li fid=\"u3cf94880\" data-lake-id=\"u5f3fb599\" id=\"u5f3fb599\"><span data-lake-id=\"u0e734e4a\" id=\"u0e734e4a\" class=\"lake-fontsize-11\">该类的权限覆盖了这些系统全局文件规定的权限。</span></li></ul><ul list=\"ubf5add9a\" start=\"3\"><li fid=\"u3cf94880\" data-lake-id=\"u3c245605\" id=\"u3c245605\"><span data-lake-id=\"u200fd11e\" id=\"u200fd11e\" class=\"lake-fontsize-11\">对象初始化顺序：</span><span data-lake-id=\"ua235da4d\" id=\"ua235da4d\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">依次是（静态变量、静态初始化块）&gt;（变量、初始化块）&gt; 构造器</span></li></ul><h2 data-lake-id=\"hnWWv\" id=\"hnWWv\"><span data-lake-id=\"ub216b7bc\" id=\"ub216b7bc\">Immutable (不可变类)</span></h2><p data-lake-id=\"u8bcebc03\" id=\"u8bcebc03\"><strong><span data-lake-id=\"u99ca94b4\" id=\"u99ca94b4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">不可变类</span></strong><span data-lake-id=\"u7180e87e\" id=\"u7180e87e\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：</span><span data-lake-id=\"ua97ae4ba\" id=\"ua97ae4ba\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51); background-color: #CEF5F7\">Boolean, Byte, Character, Double, Float, Integer, Long, Short, String, BigDecimal</span><span data-lake-id=\"u9a208381\" id=\"u9a208381\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">。 </span></p><p data-lake-id=\"u15d5e898\" id=\"u15d5e898\"><strong><span data-lake-id=\"u688da7a4\" id=\"u688da7a4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">可变类</span></strong><span data-lake-id=\"u409c604f\" id=\"u409c604f\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。</span></p><h2 data-lake-id=\"xWHPE\" id=\"xWHPE\"><span data-lake-id=\"u60d539be\" id=\"u60d539be\" class=\"lake-fontsize-11\">集合</span></h2><h4 data-lake-id=\"UsAL6\" id=\"UsAL6\"><span data-lake-id=\"u08c480bb\" id=\"u08c480bb\">Size and capacity extension</span></h4><ul list=\"u7de58be0\"><li fid=\"u439e920f\" data-lake-id=\"ua771b6c3\" id=\"ua771b6c3\"><span data-lake-id=\"ua9c1c84b\" id=\"ua9c1c84b\" class=\"lake-fontsize-11\">Initial Capacity：</span><span data-lake-id=\"u7241024c\" id=\"u7241024c\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">ArrayList(10), Vector(10), StringBuilder(16), StringBuffer(16), HashMap(16), HashSet(16)，HashTable(11)</span></li><li fid=\"u439e920f\" data-lake-id=\"ubbccf6f0\" id=\"ubbccf6f0\"><span data-lake-id=\"u95019fb3\" id=\"u95019fb3\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">动态扩容</span></li></ul><ul list=\"u7de58be0\" data-lake-indent=\"1\"><li fid=\"u439e920f\" data-lake-id=\"u736789e0\" id=\"u736789e0\"><span data-lake-id=\"u54ab85aa\" id=\"u54ab85aa\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">HashTable =  2 * size + 1</span></li><li fid=\"u439e920f\" data-lake-id=\"u4b097eb5\" id=\"u4b097eb5\"><span data-lake-id=\"uab3d3419\" id=\"uab3d3419\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">2 * size  : HashMap, vector, Stack, LinkedHashMap</span></li><li fid=\"u439e920f\" data-lake-id=\"u65e89827\" id=\"u65e89827\"><span data-lake-id=\"udbcd7328\" id=\"udbcd7328\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">1.5 * size : ArrayList</span></li></ul><h4 data-lake-id=\"fkIS4\" id=\"fkIS4\"><span data-lake-id=\"u84d4cdab\" id=\"u84d4cdab\">List and Arraye</span></h4><h5 data-lake-id=\"eWz2h\" id=\"eWz2h\"><span data-lake-id=\"u7f8c647e\" id=\"u7f8c647e\">List</span></h5><p data-lake-id=\"uccbe39fe\" id=\"uccbe39fe\"><span data-lake-id=\"u7a2ae2e7\" id=\"u7a2ae2e7\" class=\"lake-fontsize-11\" style=\"color: #303030\">sublist()方法生成的子list与原list存在关联</span></p><ul list=\"u3a030324\"><li fid=\"u38b976f7\" data-lake-id=\"ueadd5b77\" id=\"ueadd5b77\"><span data-lake-id=\"u6b74ca39\" id=\"u6b74ca39\" class=\"lake-fontsize-11\">LinkedList</span></li></ul><ul list=\"u3a030324\" data-lake-indent=\"1\"><li fid=\"u38b976f7\" data-lake-id=\"u8e49eb3c\" id=\"u8e49eb3c\"><span data-lake-id=\"u1294ec18\" id=\"u1294ec18\" class=\"lake-fontsize-11\" style=\"color: #303030\">迭代的时候使用 remove 方法会导致迭代出现预期之外的情况</span></li></ul><h5 data-lake-id=\"LbC9u\" id=\"LbC9u\"><span data-lake-id=\"u80533390\" id=\"u80533390\">Array</span></h5><p data-lake-id=\"u31fbda06\" id=\"u31fbda06\"><span data-lake-id=\"uc5c9386b\" id=\"uc5c9386b\" class=\"lake-fontsize-11\">数组复制：</span><span data-lake-id=\"u58efebe8\" id=\"u58efebe8\" class=\"lake-fontsize-11\" style=\"color: #303030\">System.array.copy (效率最高)</span></p><h4 data-lake-id=\"uo076\" id=\"uo076\"><span data-lake-id=\"u28ba2c6d\" id=\"u28ba2c6d\">Map   </span></h4><ul list=\"u5f78dbb8\"><li fid=\"u85176826\" data-lake-id=\"u17db01be\" id=\"u17db01be\"><span data-lake-id=\"ub33c2781\" id=\"ub33c2781\" class=\"lake-fontsize-11\">HashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"ue67743bb\" id=\"ue67743bb\"><span data-lake-id=\"udf8e8d46\" id=\"udf8e8d46\" class=\"lake-fontsize-11\">不可保证元素的顺序，</span><span data-lake-id=\"u228adfa3\" id=\"u228adfa3\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">key，value 均可为 null</span><span data-lake-id=\"u4c38f870\" id=\"u4c38f870\" class=\"lake-fontsize-11\">。</span></li></ul><ul list=\"u5f78dbb8\" start=\"2\"><li fid=\"u85176826\" data-lake-id=\"u3bb8d057\" id=\"u3bb8d057\"><span data-lake-id=\"u223eff94\" id=\"u223eff94\" class=\"lake-fontsize-11\">LinkedHashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"u1f9a9f75\" id=\"u1f9a9f75\"><span data-lake-id=\"ud4f3673c\" id=\"ud4f3673c\" class=\"lake-fontsize-11\" style=\"color: #303030\">调用 get() 方法会打乱 keySet 的顺序，</span><span data-lake-id=\"u8df9c203\" id=\"u8df9c203\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">将访问的 key 放到最后</span></li><li fid=\"u85176826\" data-lake-id=\"u3a72be12\" id=\"u3a72be12\"><span data-lake-id=\"u660befe0\" id=\"u660befe0\" class=\"lake-fontsize-11\" style=\"color: #303030\">有 removeEldestEntry 方法，可以简单控制 map size</span></li></ul><ul list=\"u5f78dbb8\" start=\"3\"><li fid=\"u85176826\" data-lake-id=\"u257cbecf\" id=\"u257cbecf\"><span data-lake-id=\"u4de18d09\" id=\"u4de18d09\" class=\"lake-fontsize-11\">TreeMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"uc646e172\" id=\"uc646e172\"><span data-lake-id=\"ud86b2dd8\" id=\"ud86b2dd8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">key 不可以为 null</span><span data-lake-id=\"u97f53b9f\" id=\"u97f53b9f\" class=\"lake-fontsize-11\">，value 可以。</span></li></ul><ul list=\"u5f78dbb8\" start=\"4\"><li fid=\"u85176826\" data-lake-id=\"u7d7f9f9a\" id=\"u7d7f9f9a\"><span data-lake-id=\"u33e16ed2\" id=\"u33e16ed2\" class=\"lake-fontsize-11\">ConcurrentHashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"ua87398d0\" id=\"ua87398d0\"><span data-lake-id=\"u2e5740ad\" id=\"u2e5740ad\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">key, value 都不可以为 null</span></li><li fid=\"u85176826\" data-lake-id=\"u1a2043d2\" id=\"u1a2043d2\"><span data-lake-id=\"u4340d008\" id=\"u4340d008\" class=\"lake-fontsize-11\">线程安全且全程不需要手动加锁，Map中效率最高。 </span></li></ul><ul list=\"u5f78dbb8\" start=\"5\"><li fid=\"u85176826\" data-lake-id=\"udde09310\" id=\"udde09310\"><span data-lake-id=\"u502ba148\" id=\"u502ba148\" class=\"lake-fontsize-11\">注：</span><span data-lake-id=\"u1d2cc3d8\" id=\"u1d2cc3d8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">HashTable 中的 key, value 也都不可以为 null</span></li></ul><h2 data-lake-id=\"lAnxE\" id=\"lAnxE\"><span data-lake-id=\"uc2e633f2\" id=\"uc2e633f2\">Reflection</span></h2><p data-lake-id=\"u45ec183e\" id=\"u45ec183e\"><span data-lake-id=\"u340eae2e\" id=\"u340eae2e\" class=\"lake-fontsize-11\">反射机制允许程序获取</span><span data-lake-id=\"ub68a334e\" id=\"ub68a334e\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">指定对象的类的相关方法与字段</span><span data-lake-id=\"ub1b12f56\" id=\"ub1b12f56\" class=\"lake-fontsize-11\">。</span></p><ul list=\"u0367460b\"><li fid=\"u9b16258b\" data-lake-id=\"ud5e9fa17\" id=\"ud5e9fa17\"><span data-lake-id=\"u91f36f6d\" id=\"u91f36f6d\" class=\"lake-fontsize-11\" style=\"color: #303030\">getDeclaredFields()：获取所有声明的成员变量，</span><span data-lake-id=\"u665f7537\" id=\"u665f7537\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">包括 private</span></li><li fid=\"u9b16258b\" data-lake-id=\"u0a7b3a43\" id=\"u0a7b3a43\"><span data-lake-id=\"u64e2fb0a\" id=\"u64e2fb0a\" class=\"lake-fontsize-11\" style=\"color: #303030\">getFields()：</span><span data-lake-id=\"u42c44eaf\" id=\"u42c44eaf\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">获取所有的public变量</span><span data-lake-id=\"u9d5ec89f\" id=\"u9d5ec89f\" class=\"lake-fontsize-11\" style=\"color: #303030\">，包括父类的 public 变量。</span></li><li fid=\"u9b16258b\" data-lake-id=\"u57a1b5e7\" id=\"u57a1b5e7\"><span data-lake-id=\"u90ab798a\" id=\"u90ab798a\" class=\"lake-fontsize-11\">getDeclaredMethods(): 获取所有声明的成员方法。</span></li><li fid=\"u9b16258b\" data-lake-id=\"u049e4836\" id=\"u049e4836\"><span data-lake-id=\"ufa22dadd\" id=\"ufa22dadd\" class=\"lake-fontsize-11\">getDeclaredConstructors(): 获取所有构造函数。</span></li></ul><h2 data-lake-id=\"Zhqnu\" id=\"Zhqnu\"><span data-lake-id=\"uc8d3c67d\" id=\"uc8d3c67d\">注解 （Annotation）</span></h2><h3 data-lake-id=\"EfOIN\" id=\"EfOIN\"><span data-lake-id=\"u75d7289e\" id=\"u75d7289e\">元注解 （java.annotations）</span></h3><p data-lake-id=\"ub87963b9\" id=\"ub87963b9\"><span data-lake-id=\"u7655d5cd\" id=\"u7655d5cd\" class=\"lake-fontsize-11\">@Documented ：该注解标记的内容会被 JavaDoc 工具提取成文档</span></p><p data-lake-id=\"ube36e4bf\" id=\"ube36e4bf\"><span data-lake-id=\"u6aadbb10\" id=\"u6aadbb10\" class=\"lake-fontsize-11\">@Target ：用于注解一个注解的使用范围，用成员变量 value 来指定范围</span></p><p data-lake-id=\"u7d6c4248\" id=\"u7d6c4248\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png%22%2C%22taskId%22%3A%22ucb5f28f2-9757-4445-8b53-2bb833eec56%22%2C%22clientId%22%3A%22u6a707b01-3786-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A447%2C%22height%22%3A293%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A76157%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A894%2C%22originHeight%22%3A586%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A548.2695%2C%22y%22%3A43.16687%2C%22width%22%3A55.31680000000006%2C%22height%22%3A29.911789999999996%2C%22text%22%3A%22%E8%AF%B4%E6%98%8E%22%7D%2C%7B%22x%22%3A127.79424%2C%22y%22%3A43.841724%2C%22width%22%3A57.17833999999999%2C%22height%22%3A28.433256%2C%22text%22%3A%22%E5%90%8D%E7%A7%B0%22%7D%2C%7B%22x%22%3A295.35092%2C%22y%22%3A112.95997%2C%22width%22%3A169.01348000000002%2C%22height%22%3A29.26616999999999%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A35.92499%2C%22y%22%3A115.32286%2C%22width%22%3A214.95605%2C%22height%22%3A23.21486%2C%22text%22%3A%22CONSTRUCTOR%22%7D%2C%7B%22x%22%3A295.21356%2C%22y%22%3A178.91579%2C%22width%22%3A374.71808000000004%2C%22height%22%3A28.628860000000003%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F(%E5%8C%85%E6%8B%AC%E6%9E%9A%E4%B8%BE%E5%B8%B8%E9%87%8F)%22%7D%2C%7B%22x%22%3A36.683926%2C%22y%22%3A182.22667%2C%22width%22%3A76.045704%2C%22height%22%3A22.722699999999975%2C%22text%22%3A%22FIELD%22%7D%2C%7B%22x%22%3A295.98126%2C%22y%22%3A244.69003%2C%22width%22%3A167.77121%2C%22height%22%3A28.92256999999998%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%22%7D%2C%7B%22x%22%3A36.096848%2C%22y%22%3A247.64597%2C%22width%22%3A90.21050199999999%2C%22height%22%3A23.356469999999973%2C%22text%22%3A%22LOCAL%22%7D%2C%7B%22x%22%3A139.6032%2C%22y%22%3A247.58203%2C%22width%22%3A135.28184000000002%2C%22height%22%3A23.925370000000015%2C%22text%22%3A%22VARIABLE%22%7D%2C%7B%22x%22%3A294.90924%2C%22y%22%3A310.4102%2C%22width%22%3A113.91431%2C%22height%22%3A29.013450000000034%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A36.28632%2C%22y%22%3A314.24078%2C%22width%22%3A121.62112%2C%22height%22%3A22.650090000000034%2C%22text%22%3A%22METHOD%22%7D%2C%7B%22x%22%3A295.73712%2C%22y%22%3A377.51422%2C%22width%22%3A82.58895999999999%2C%22height%22%3A28.249179999999967%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E5%8C%85%22%7D%2C%7B%22x%22%3A37.470726%2C%22y%22%3A380.4243%2C%22width%22%3A131.03666399999997%2C%22height%22%3A23.145620000000008%2C%22text%22%3A%22PACKAGE%22%7D%2C%7B%22x%22%3A295.69348%2C%22y%22%3A442.583%2C%22width%22%3A358.02807999999993%2C%22height%22%3A28.912269999999978%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0(JDK%201.8%E6%96%B0%E5%A2%9E)%22%7D%2C%7B%22x%22%3A37.30122%2C%22y%22%3A445.19684%2C%22width%22%3A167.52719%2C%22height%22%3A23.701509999999985%2C%22text%22%3A%22PARAMETER%22%7D%2C%7B%22x%22%3A296.0174%2C%22y%22%3A507.20917%2C%22width%22%3A561.9692%2C%22height%22%3A32.00972999999999%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E7%B1%BB%2C%E6%8E%A5%E5%8F%A3(%E5%8C%85%E6%8B%AC%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B)%E6%88%96ENUM%20%E5%A3%B0%E6%98%8E%22%7D%2C%7B%22x%22%3A37.865868%2C%22y%22%3A510.538%2C%22width%22%3A69.609466%2C%22height%22%3A24.314359999999965%2C%22text%22%3A%22TYPE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22ue809fee9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ud760c720\" id=\"ud760c720\" style=\"text-align: left\"><span data-lake-id=\"u64a7ee4a\" id=\"u64a7ee4a\">@Rentation 用于描述注解的生命周期</span></p><ul list=\"u21bf916c\"><li fid=\"ud65e9775\" data-lake-id=\"udd2536df\" id=\"udd2536df\" style=\"text-align: left\"><span data-lake-id=\"udc9b67fb\" id=\"udc9b67fb\">SOURCE: 仅在源文件中有效</span></li><li fid=\"ud65e9775\" data-lake-id=\"u593a610c\" id=\"u593a610c\" style=\"text-align: left\"><span data-lake-id=\"ue28324d3\" id=\"ue28324d3\">CLASS：在 Class 文件中有效</span></li><li fid=\"ud65e9775\" data-lake-id=\"u3b993092\" id=\"u3b993092\" style=\"text-align: left\"><span data-lake-id=\"udc007c5a\" id=\"udc007c5a\">RUNTIME：在运行中有效</span></li></ul><p data-lake-id=\"ub0eecd68\" id=\"ub0eecd68\"><span data-lake-id=\"ub310fe7c\" id=\"ub310fe7c\">@Inherited 表示该注解可以被继承</span></p><p data-lake-id=\"u352cdb27\" id=\"u352cdb27\"><span data-lake-id=\"u46aa5dc6\" id=\"u46aa5dc6\">@Native 修饰成员变量，表示该变量可以被本地代码引用</span></p><h3 data-lake-id=\"TfZV1\" id=\"TfZV1\"><span data-lake-id=\"ue64fe88b\" id=\"ue64fe88b\">其他注解（java.lang）</span></h3><ul list=\"ueb0b9f92\"><li fid=\"u2c235565\" data-lake-id=\"uda215c3f\" id=\"uda215c3f\"><span data-lake-id=\"ued674619\" id=\"ued674619\" class=\"lake-fontsize-11\">@Override</span></li><li fid=\"u2c235565\" data-lake-id=\"u0f47623a\" id=\"u0f47623a\"><span data-lake-id=\"udf3f0432\" id=\"udf3f0432\" class=\"lake-fontsize-11\" style=\"color: #303030\">@Deprecated</span></li><li fid=\"u2c235565\" data-lake-id=\"u5b6ec954\" id=\"u5b6ec954\"><span data-lake-id=\"u865b8733\" id=\"u865b8733\" class=\"lake-fontsize-11\" style=\"color: #303030\">@SuppressWarnings</span></li></ul><h3 data-lake-id=\"TqcJ8\" id=\"TqcJ8\"><span data-lake-id=\"ud803bcf9\" id=\"ud803bcf9\">自定义注解</span></h3><p data-lake-id=\"ubbf5f361\" id=\"ubbf5f361\"><span data-lake-id=\"u2af32399\" id=\"u2af32399\" class=\"lake-fontsize-11\">可以开发一个注解类，但是需要使用</span><span data-lake-id=\"ud74c1c2f\" id=\"ud74c1c2f\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\"> @interface </span><span data-lake-id=\"ucf95e3f6\" id=\"ucf95e3f6\" class=\"lake-fontsize-11\">关键字来声明。</span></p><h2 data-lake-id=\"xPHqK\" id=\"xPHqK\"><span data-lake-id=\"ueb71253e\" id=\"ueb71253e\">Exception 异常</span></h2><h3 data-lake-id=\"wpBkX\" id=\"wpBkX\"><span data-lake-id=\"u1352423a\" id=\"u1352423a\">敏感异常</span></h3><ul list=\"u3b63e9a5\"><li fid=\"u71b49a94\" data-lake-id=\"u8b538b02\" id=\"u8b538b02\"><span data-lake-id=\"ucbcf1d8f\" id=\"ucbcf1d8f\" class=\"lake-fontsize-11\" style=\"color: #303030\">InsufficientResourcesException：服务器资源不足，可能会造成</span><span data-lake-id=\"uab415ca3\" id=\"uab415ca3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u067cfe4c\" id=\"u067cfe4c\"><span data-lake-id=\"uc5c21969\" id=\"uc5c21969\" class=\"lake-fontsize-11\" style=\"color: #303030\">OutOfMemoryError：</span><span data-lake-id=\"u28ba55a2\" id=\"u28ba55a2\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u2999c95b\" id=\"u2999c95b\"><span data-lake-id=\"ud688f100\" id=\"ud688f100\" class=\"lake-fontsize-11\" style=\"color: #303030\">StackOverflowError：</span><span data-lake-id=\"ua246dbb3\" id=\"ua246dbb3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u387a0413\" id=\"u387a0413\"><span data-lake-id=\"uda32dd5c\" id=\"uda32dd5c\" class=\"lake-fontsize-11\" style=\"color: #303030\">JarException：</span><span data-lake-id=\"u7bc83fde\" id=\"u7bc83fde\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">泄露文件系统结构</span></li><li fid=\"u71b49a94\" data-lake-id=\"u4ef035b0\" id=\"u4ef035b0\"><span data-lake-id=\"u61be58b1\" id=\"u61be58b1\" class=\"lake-fontsize-11\" style=\"color: #303030\">FileNotFoundException：</span><span data-lake-id=\"u5789cb28\" id=\"u5789cb28\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">泄露文件系统结构</span><span data-lake-id=\"u44e930c3\" id=\"u44e930c3\" class=\"lake-fontsize-11\" style=\"color: #303030\">和</span><span data-lake-id=\"ub475d44b\" id=\"ub475d44b\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">文件名列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ucdea2b40\" id=\"ucdea2b40\"><span data-lake-id=\"uc6c0add8\" id=\"uc6c0add8\" class=\"lake-fontsize-11\" style=\"color: #303030\">SQLException：</span><span data-lake-id=\"u410ccd69\" id=\"u410ccd69\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">暴露数据库结构</span><span data-lake-id=\"u0058a806\" id=\"u0058a806\" class=\"lake-fontsize-11\" style=\"color: #303030\">，并造成</span><span data-lake-id=\"u7c7d2301\" id=\"u7c7d2301\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">用户名列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ufef1329f\" id=\"ufef1329f\"><span data-lake-id=\"u1d33333e\" id=\"u1d33333e\" class=\"lake-fontsize-11\" style=\"color: #303030\">MissingResourceException，造成</span><span data-lake-id=\"u552473dd\" id=\"u552473dd\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">资源列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"u24329c04\" id=\"u24329c04\"><span data-lake-id=\"uf632451d\" id=\"uf632451d\" class=\"lake-fontsize-11\" style=\"color: #303030\">NotOwnerException：</span><span data-lake-id=\"u992e540e\" id=\"u992e540e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">所有人列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ud1428474\" id=\"ud1428474\"><span data-lake-id=\"u2c6f27f3\" id=\"u2c6f27f3\" class=\"lake-fontsize-11\" style=\"color: #303030\">BindException：当不信任客户端能够选择服务器端口时造成</span><span data-lake-id=\"uc67beeb0\" id=\"uc67beeb0\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">开放端口列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"u37e5d1a9\" id=\"u37e5d1a9\"><span data-lake-id=\"u32ac8f7c\" id=\"u32ac8f7c\" class=\"lake-fontsize-11\" style=\"color: #303030\">ConcurrentModificationException：可能提供线程不安全的代码信息</span></li></ul><h3 data-lake-id=\"x4qxD\" id=\"x4qxD\"><span data-lake-id=\"uf97a05ea\" id=\"uf97a05ea\">是否受检</span></h3><p data-lake-id=\"uecd0b7d3\" id=\"uecd0b7d3\"><span data-lake-id=\"u4297dabf\" id=\"u4297dabf\" class=\"lake-fontsize-11\">受检异常需要在代码中明确使用 throw 抛出异常，否则编译不通过。</span></p><ul list=\"u97c0fda3\"><li fid=\"u4586e2e8\" data-lake-id=\"uccad5d6a\" id=\"uccad5d6a\"><span data-lake-id=\"u026e89b9\" id=\"u026e89b9\" class=\"lake-fontsize-11\">受检：</span><span data-lake-id=\"ub12ec151\" id=\"ub12ec151\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">FileNotFoundException, IOException, SQLException，ClassNotFoundException, InterruptedException, NoSuchFieldException</span></li><li fid=\"u4586e2e8\" data-lake-id=\"u4ce067f9\" id=\"u4ce067f9\"><span data-lake-id=\"u484f954e\" id=\"u484f954e\" class=\"lake-fontsize-11\">非受检：</span><span data-lake-id=\"u07d52c3b\" id=\"u07d52c3b\" class=\"lake-fontsize-11\" style=\"color: #303030\">NullPointerException, ClassCastException, IllegalArgumentException, ArrayIndexsOutOfBoundsException, ArithmeticException</span></li></ul><h3 data-lake-id=\"wdKOt\" id=\"wdKOt\"><span data-lake-id=\"u1f8d13af\" id=\"u1f8d13af\" style=\"color: #303030\">异常处理</span></h3><ul list=\"ue5b82e3a\"><li fid=\"u2d417bf3\" data-lake-id=\"ue863f578\" id=\"ue863f578\"><span data-lake-id=\"u893a0c3b\" id=\"u893a0c3b\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">不要直接捕获基类 Exception 来处理异常</span><span data-lake-id=\"uc8b4da73\" id=\"uc8b4da73\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">，可以使用并语句明确指出需要捕获的异常</span></li><li fid=\"u2d417bf3\" data-lake-id=\"uff0524fd\" id=\"uff0524fd\"><span data-lake-id=\"u1cc153db\" id=\"u1cc153db\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">打开文件流有异常，必须进行处理(输入流，输出流，错误流)</span><span data-lake-id=\"u003be3c3\" id=\"u003be3c3\" class=\"lake-fontsize-11\">；</span><span data-lake-id=\"u4a405037\" id=\"u4a405037\" class=\"lake-fontsize-11\" style=\"background-color: #E8F7CF\">在 finally 语句中关闭流，抛出异常时可以忽略异常</span><span data-lake-id=\"u9a02e81f\" id=\"u9a02e81f\" class=\"lake-fontsize-11\">，仅记录日志。</span></li><li fid=\"u2d417bf3\" data-lake-id=\"ud1c7dc52\" id=\"ud1c7dc52\"><span data-lake-id=\"u417a136d\" id=\"u417a136d\" class=\"lake-fontsize-11\">不要直接抛出 NullPointerException 异常，而是使用空引用判断。</span></li></ul><h2 data-lake-id=\"W0BfX\" id=\"W0BfX\"><span data-lake-id=\"u310cf642\" id=\"u310cf642\">GC</span></h2><p data-lake-id=\"ua2161da8\" id=\"ua2161da8\"><span data-lake-id=\"uddc8c45e\" id=\"uddc8c45e\" class=\"lake-fontsize-11\" style=\"color: #000000\">垃圾回收（GC）是由 Java 虚拟机（JVM）垃圾回收器提供的一种对内存回收的一种机制，它一般会在内存空闲或者内存占用过高的时候对那些没有任何引用的对象不定时地进行回收。</span></p><h3 data-lake-id=\"Lp6x5\" id=\"Lp6x5\"><span data-lake-id=\"ub25d9aef\" id=\"ub25d9aef\" style=\"color: #000000\">GC使用</span></h3><ul list=\"u1be82eff\"><li fid=\"uf50f4db8\" data-lake-id=\"u127253bc\" id=\"u127253bc\"><span data-lake-id=\"u45f884db\" id=\"u45f884db\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">在频率/周期性的逻辑中更要尽量</span><span data-lake-id=\"u441b245a\" id=\"u441b245a\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28\">避免主动GC的调用</span><span data-lake-id=\"u9e46e305\" id=\"u9e46e305\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">。因为</span><span data-lake-id=\"u4539c54c\" id=\"u4539c54c\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">在 GC 过程中的某些阶段程序会完全停顿</span><span data-lake-id=\"uda57dbf0\" id=\"uda57dbf0\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">，这会让程序失去响应，对系统造成非常大的风险。</span></li><li fid=\"uf50f4db8\" data-lake-id=\"ueb154946\" id=\"ueb154946\"><span data-lake-id=\"u7f2a4484\" id=\"u7f2a4484\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">即使调用主动GC方法后，</span><span data-lake-id=\"u04f84afc\" id=\"u04f84afc\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28\">系统也不会立即进行垃圾回收操作</span><span data-lake-id=\"u8d8763ef\" id=\"u8d8763ef\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">。</span></li></ul><h3 data-lake-id=\"jKVTV\" id=\"jKVTV\"><span data-lake-id=\"uaf86c0e8\" id=\"uaf86c0e8\">GC算法</span></h3><ul list=\"u3dafdd16\"><li fid=\"uaf1e6b7f\" data-lake-id=\"u52773171\" id=\"u52773171\"><span data-lake-id=\"ud0c7e814\" id=\"ud0c7e814\" class=\"lake-fontsize-11\" style=\"color: #303030\">后台运算而不需要太多交互的任务</span></li></ul><ul list=\"u3dafdd16\" data-lake-indent=\"1\"><li fid=\"uaf1e6b7f\" data-lake-id=\"ub5711224\" id=\"ub5711224\"><span data-lake-id=\"u43d5cb59\" id=\"u43d5cb59\" class=\"lake-fontsize-11\" style=\"color: #303030\">Parallel Scavenge（吞吐量优先）</span></li></ul><ul list=\"u3dafdd16\" start=\"2\"><li fid=\"uaf1e6b7f\" data-lake-id=\"u377ba148\" id=\"u377ba148\"><span data-lake-id=\"ud56ac57a\" id=\"ud56ac57a\" class=\"lake-fontsize-11\" style=\"color: #303030\">对响应速度有较高要求的服务</span></li></ul><ul list=\"u3dafdd16\" data-lake-indent=\"1\"><li fid=\"uaf1e6b7f\" data-lake-id=\"uc1e53549\" id=\"uc1e53549\"><span data-lake-id=\"u2e85ce52\" id=\"u2e85ce52\" class=\"lake-fontsize-11\" style=\"color: #303030\">CMS（响应速度优先）</span></li><li fid=\"uaf1e6b7f\" data-lake-id=\"u3852f45b\" id=\"u3852f45b\"><span data-lake-id=\"u30688019\" id=\"u30688019\" class=\"lake-fontsize-11\" style=\"color: #303030\">G1（响应速度优先）</span></li><li fid=\"uaf1e6b7f\" data-lake-id=\"uccc79f9c\" id=\"uccc79f9c\"><span data-lake-id=\"u919618d3\" id=\"u919618d3\" class=\"lake-fontsize-11\" style=\"color: #303030\">ZGC（STW小于10ms）</span></li></ul><h2 data-lake-id=\"kdGpG\" id=\"kdGpG\"><span data-lake-id=\"ua06c4458\" id=\"ua06c4458\">编译</span></h2><p data-lake-id=\"ud20bd39a\" id=\"ud20bd39a\"><span data-lake-id=\"u14f6a470\" id=\"u14f6a470\" class=\"lake-fontsize-11\">使用 javac 进行编译时，包含以下几个过程：</span></p><ul list=\"u215ba261\"><li fid=\"u1439cfb5\" data-lake-id=\"u6d0588eb\" id=\"u6d0588eb\"><span data-lake-id=\"u3111e1aa\" id=\"u3111e1aa\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">语义分析及生成字节码</span></li><li fid=\"u1439cfb5\" data-lake-id=\"ua8c98911\" id=\"ua8c98911\"><span data-lake-id=\"u8481d471\" id=\"u8481d471\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">词法分析及填充符号表</span></li><li fid=\"u1439cfb5\" data-lake-id=\"u27b47a76\" id=\"u27b47a76\"><span data-lake-id=\"u0d37d0f4\" id=\"u0d37d0f4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">注解处理</span></li></ul><h3 data-lake-id=\"W8KiR\" id=\"W8KiR\"><span data-lake-id=\"u8205e253\" id=\"u8205e253\" style=\"color: #303030\">JVM 代码优化</span></h3><p data-lake-id=\"u96451b04\" id=\"u96451b04\"><span data-lake-id=\"ubb863f4e\" id=\"ubb863f4e\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77)\">JVM 在对代码执行的优化可分为运行时（runtime）优化和即时编译器（JIT）优化。运行时优化主要是解释执行和动态编译通用的一些机制，</span><span data-lake-id=\"ua8cd577f\" id=\"ua8cd577f\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77); background-color: #CEF5F7\">比如说模版解释器、内联缓存（inline cache，用于优化虚方法调用的动态绑定）</span><span data-lake-id=\"ud353f37f\" id=\"ud353f37f\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77)\">。</span></p><ul list=\"u376551b5\"><li fid=\"u4b5cf318\" data-lake-id=\"u4dc2a0d2\" id=\"u4dc2a0d2\"><span data-lake-id=\"u5b4d1d7b\" id=\"u5b4d1d7b\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JITTest.doubleIndex被内联</span></li><li fid=\"u4b5cf318\" data-lake-id=\"u82d979ce\" id=\"u82d979ce\"><span data-lake-id=\"ua00d6a66\" id=\"ua00d6a66\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JITTest.doubleIndex会被编译成机器码执行</span></li></ul><h2 data-lake-id=\"Q5ABo\" id=\"Q5ABo\"><span data-lake-id=\"uea51bb57\" id=\"uea51bb57\">序列化</span></h2><p data-lake-id=\"u3bc5b6d2\" id=\"u3bc5b6d2\"><span data-lake-id=\"ue69aa5b2\" id=\"ue69aa5b2\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列用于网络传输。</span><span data-lake-id=\"uf7c253c7\" id=\"uf7c253c7\" class=\"lake-fontsize-10\" style=\"color: rgb(51, 51, 51)\">但是，</span><span data-lake-id=\"udd44cdbd\" id=\"udd44cdbd\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">序列化只能保存对象的非静态成员变量</span><span data-lake-id=\"u1bc76d49\" id=\"u1bc76d49\" class=\"lake-fontsize-11\" style=\"color: #303030\">，</span><span data-lake-id=\"u55159e68\" id=\"u55159e68\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">不能保存任何的成员方法和静态的成员变量</span><span data-lake-id=\"u32276ecc\" id=\"u32276ecc\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><h3 data-lake-id=\"Gqv8s\" id=\"Gqv8s\"><span data-lake-id=\"u2d93e0af\" id=\"u2d93e0af\" style=\"color: #303030\">安全问题</span></h3><ul list=\"u4399787e\"><li fid=\"u9cf9e244\" data-lake-id=\"u7f6ef016\" id=\"u7f6ef016\"><span data-lake-id=\"u74cc34d4\" id=\"u74cc34d4\" class=\"lake-fontsize-11\">可以通过定义serialPersistentFields数组字段来确保敏感字段被排除在序列化之外，除此之外，也可以通过自定义</span><span data-lake-id=\"u76d9c189\" id=\"u76d9c189\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">writeObject()、writeReplace()、writeExternal()</span><span data-lake-id=\"ue3ee07ac\" id=\"ue3ee07ac\" class=\"lake-fontsize-11\">这些函数，不将包含敏感信息的字段写到序列化字节流中。</span></li><li fid=\"u9cf9e244\" data-lake-id=\"uccf3f5d1\" id=\"uccf3f5d1\"><span data-lake-id=\"ue3f323fe\" id=\"ue3f323fe\" class=\"lake-fontsize-11\">通过将敏感字段声明为</span><span data-lake-id=\"u168744c4\" id=\"u168744c4\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\"> transient</span><span data-lake-id=\"u91b71dc1\" id=\"u91b71dc1\" class=\"lake-fontsize-11\">，可以使它们不包括在依照默认的序列化机制应该被序列化的字段列表中。</span></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"u1H7p\" id=\"u1H7p\"><span data-lake-id=\"u625164d0\" id=\"u625164d0\">基本数据类型</span></h2><ul list=\"u9fb8038e\"><li fid=\"u2fe19598\" data-lake-id=\"ubb39c437\" id=\"ubb39c437\"><span data-lake-id=\"uc22cca16\" id=\"uc22cca16\" class=\"lake-fontsize-11\">byte：字节，1 byte，8 bits （-128~127）</span></li><li fid=\"u2fe19598\" data-lake-id=\"udd93e4b5\" id=\"udd93e4b5\"><span data-lake-id=\"uef2d36a0\" id=\"uef2d36a0\" class=\"lake-fontsize-11\">char：字符，2 bytes，如 '\\n', '\\u0012', '我'</span></li></ul><ul list=\"u9fb8038e\" data-lake-indent=\"1\"><li fid=\"u2fe19598\" data-lake-id=\"u44e74168\" id=\"u44e74168\"><span data-lake-id=\"u4d97c9c3\" id=\"u4d97c9c3\" class=\"lake-fontsize-11\">字符是字节通过不同编码的包装</span></li><li fid=\"u2fe19598\" data-lake-id=\"u311d63e9\" id=\"u311d63e9\"><span data-lake-id=\"ufd252be8\" id=\"ufd252be8\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">字符向字节转换时，需要注意编码问题</span></li></ul><ul list=\"u9fb8038e\" start=\"3\"><li fid=\"u2fe19598\" data-lake-id=\"u031618eb\" id=\"u031618eb\"><span data-lake-id=\"u5790805b\" id=\"u5790805b\" class=\"lake-fontsize-11\">short：短整型，2 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u0f793785\" id=\"u0f793785\"><span data-lake-id=\"u3adb7238\" id=\"u3adb7238\" class=\"lake-fontsize-11\">int：整型，4 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u19ade4c1\" id=\"u19ade4c1\"><span data-lake-id=\"u0211b0bd\" id=\"u0211b0bd\" class=\"lake-fontsize-11\">long：长整型，8 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"uf3e443f5\" id=\"uf3e443f5\"><span data-lake-id=\"ub18d813f\" id=\"ub18d813f\" class=\"lake-fontsize-11\">float：短浮点型，4 bytes</span></li><li fid=\"u2fe19598\" data-lake-id=\"u1f2149eb\" id=\"u1f2149eb\"><span data-lake-id=\"u3377a480\" id=\"u3377a480\" class=\"lake-fontsize-11\">double：浮点型，8 bytes （</span><span data-lake-id=\"u8c41a9a6\" id=\"u8c41a9a6\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">默认浮点</span><span data-lake-id=\"u68c0844c\" id=\"u68c0844c\" class=\"lake-fontsize-11\">）</span></li></ul><p data-lake-id=\"u1050348e\" id=\"u1050348e\"><span data-lake-id=\"u17539493\" id=\"u17539493\" class=\"lake-fontsize-11\">类型转换：低到高</span></p><p data-lake-id=\"u40d76303\" id=\"u40d76303\"><span data-lake-id=\"u5956386e\" id=\"u5956386e\" class=\"lake-fontsize-11\">低  --------------------------------------------------&gt;  高 </span></p><p data-lake-id=\"u1fe7ae5c\" id=\"u1fe7ae5c\"><span data-lake-id=\"u5ac27a9b\" id=\"u5ac27a9b\" class=\"lake-fontsize-11\">byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double </span></p><ul list=\"u67b0b728\"><li fid=\"u709f85b7\" data-lake-id=\"u752f5ffd\" id=\"u752f5ffd\"><span data-lake-id=\"u361deeb8\" id=\"u361deeb8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">注意 final 修饰的变量不会自动转型</span><span data-lake-id=\"u6d82771e\" id=\"u6d82771e\" class=\"lake-fontsize-11\">。</span></li></ul><h2 data-lake-id=\"RF4OV\" id=\"RF4OV\"><span data-lake-id=\"ua1ba7ca6\" id=\"ua1ba7ca6\">Class and Interface</span></h2><h3 data-lake-id=\"t1Bwg\" id=\"t1Bwg\"><span data-lake-id=\"u6f8bafaa\" id=\"u6f8bafaa\">Interface</span></h3><ul list=\"u54e1f12e\"><li fid=\"u2f906131\" data-lake-id=\"u604fe436\" id=\"u604fe436\"><span data-lake-id=\"u55adcbf4\" id=\"u55adcbf4\" class=\"lake-fontsize-11\">Interface 也可以有成员变量，默认修饰符：public static final，interface 不能有构造方法。</span></li><li fid=\"u2f906131\" data-lake-id=\"ud4b4e84f\" id=\"ud4b4e84f\"><span data-lake-id=\"u88145fcd\" id=\"u88145fcd\" class=\"lake-fontsize-11\">Interface 可以用 public，protected，default 来修饰，不能用 private</span></li></ul><h3 data-lake-id=\"qU8SN\" id=\"qU8SN\"><span data-lake-id=\"u21ebb9bc\" id=\"u21ebb9bc\">Class</span></h3><ul list=\"u3bdd4599\"><li fid=\"u7af3510f\" data-lake-id=\"ue57d7cd1\" id=\"ue57d7cd1\"><span data-lake-id=\"u334d53d5\" id=\"u334d53d5\" class=\"lake-fontsize-11\">abstract class：用 abstract 修饰的就是抽象类，</span><span data-lake-id=\"uecff0603\" id=\"uecff0603\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">可以拥有构造方法</span></li><li fid=\"u7af3510f\" data-lake-id=\"ue2e877fd\" id=\"ue2e877fd\"><span data-lake-id=\"u3f5313cf\" id=\"u3f5313cf\" class=\"lake-fontsize-11\">extends</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"1\"><li fid=\"u7af3510f\" data-lake-id=\"u22702ef5\" id=\"u22702ef5\"><span data-lake-id=\"ue022d86e\" id=\"ue022d86e\" class=\"lake-fontsize-11\" style=\"color: #303030\">final 修饰的成员变量/方法，可以被继承，但不能被重写</span></li><li fid=\"u7af3510f\" data-lake-id=\"u7b98d6f6\" id=\"u7b98d6f6\"><span data-lake-id=\"ub4b8401d\" id=\"ub4b8401d\" class=\"lake-fontsize-11\" style=\"color: #303030\">static，private 修饰的方法，不可以被继承</span></li><li fid=\"u7af3510f\" data-lake-id=\"uea5c7508\" id=\"uea5c7508\"><span data-lake-id=\"udaa36106\" id=\"udaa36106\" class=\"lake-fontsize-11\" style=\"color: #303030\">子类继承父类时，如果父类的构造函数有参数，</span><span data-lake-id=\"u6eec89d6\" id=\"u6eec89d6\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">则需要显式调用</span></li><li fid=\"u7af3510f\" data-lake-id=\"u26daeddd\" id=\"u26daeddd\"><span data-lake-id=\"u1855be6d\" id=\"u1855be6d\" class=\"lake-fontsize-11\">如果一个子类 override 了父类的某个方法，</span><span data-lake-id=\"ua0cd7c55\" id=\"ua0cd7c55\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">不要在父类的构造方法中调用该函数</span><span data-lake-id=\"ua011d7fa\" id=\"ua011d7fa\" class=\"lake-fontsize-11\">。</span></li><li fid=\"u7af3510f\" data-lake-id=\"u650cad55\" id=\"u650cad55\"><span data-lake-id=\"uecb85846\" id=\"uecb85846\" class=\"lake-fontsize-11\">对父类的四种操作：</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"2\"><li fid=\"u7af3510f\" data-lake-id=\"u7d2dee18\" id=\"u7d2dee18\"><span data-lake-id=\"u23a0945f\" id=\"u23a0945f\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">重写 (overload)：子类对父类接口的</span><span data-lake-id=\"ucf4b40c9\" id=\"ucf4b40c9\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">重写，相同的返回值和形参</span><span data-lake-id=\"u99d74610\" id=\"u99d74610\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">，使用@override注解。</span></li><li fid=\"u7af3510f\" data-lake-id=\"u281bd922\" id=\"u281bd922\"><span data-lake-id=\"u0d28cd6d\" id=\"u0d28cd6d\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">隐藏 (hide)：父类同名的</span><span data-lake-id=\"u309f786e\" id=\"u309f786e\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">成员变量和静态方法只会被隐藏</span><span data-lake-id=\"u3be0365a\" id=\"u3be0365a\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">（静态绑定导致），只有成员方法享有动态绑定。</span></li><li fid=\"u7af3510f\" data-lake-id=\"ub2ced5c4\" id=\"ub2ced5c4\" style=\"text-align: justify\"><span data-lake-id=\"u64d150ec\" id=\"u64d150ec\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">重载 (override)：同类之间函数的不通返回值和形参</span></li></ul><ul list=\"u3bdd4599\" start=\"3\"><li fid=\"u7af3510f\" data-lake-id=\"ub159990c\" id=\"ub159990c\"><span data-lake-id=\"ub4654bf7\" id=\"ub4654bf7\" class=\"lake-fontsize-11\">class 的生命周期</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"1\"><li fid=\"u7af3510f\" data-lake-id=\"u2442971f\" id=\"u2442971f\"><span data-lake-id=\"u3ced731f\" id=\"u3ced731f\" class=\"lake-fontsize-11\" style=\"color: #303030\">用户自定义的类：类的对象不在被引用，即被卸载</span></li><li fid=\"u7af3510f\" data-lake-id=\"u663be6cc\" id=\"u663be6cc\"><span data-lake-id=\"ub0a7008a\" id=\"ub0a7008a\" class=\"lake-fontsize-11\" style=\"color: #303030\">Java虚拟机自带的类：保持整个JVM的生命周期，加载顺序：</span></li></ul><ul list=\"u3bdd4599\" data-lake-indent=\"2\"><li fid=\"u7af3510f\" data-lake-id=\"u1cc2816f\" id=\"u1cc2816f\"><span data-lake-id=\"ua9665846\" id=\"ua9665846\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">Bootstrap ClassLoader：</span><span data-lake-id=\"u0244d24c\" id=\"u0244d24c\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载 %JAVA_HOME%/lib 下的所有 jar 包</span></li><li fid=\"u7af3510f\" data-lake-id=\"ubeef563d\" id=\"ubeef563d\"><span data-lake-id=\"uff7cd6c3\" id=\"uff7cd6c3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">Extention ClassLoader ：</span><span data-lake-id=\"u3afdc920\" id=\"u3afdc920\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载 %JAVA_HOME%/lib/ext 下的所有 jar 包</span></li><li fid=\"u7af3510f\" data-lake-id=\"ub6e63688\" id=\"ub6e63688\"><span data-lake-id=\"u35681a56\" id=\"u35681a56\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">AppClassLoader：</span><span data-lake-id=\"ue072d3fe\" id=\"ue072d3fe\" class=\"lake-fontsize-11\" style=\"color: #303030\">加载当前 classpath 下的所有 jar 包</span></li></ul><ul list=\"ubf5add9a\"><li fid=\"u3cf94880\" data-lake-id=\"u0676fa8a\" id=\"u0676fa8a\"><span data-lake-id=\"ue97a5932\" id=\"ue97a5932\" class=\"lake-fontsize-11\">类加载机制</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"1\"><li fid=\"u3cf94880\" data-lake-id=\"u4c6dac0b\" id=\"u4c6dac0b\"><span data-lake-id=\"ub4bbd8fd\" id=\"ub4bbd8fd\" class=\"lake-fontsize-11\">双亲委派模型：加载类的时候，首先委托加载父类一直到顶。</span></li></ul><ul list=\"ubf5add9a\" start=\"2\"><li fid=\"u3cf94880\" data-lake-id=\"uadf078fa\" id=\"uadf078fa\"><span data-lake-id=\"u4c5fa8c6\" id=\"u4c5fa8c6\" class=\"lake-fontsize-11\">类加载器</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"1\"><li fid=\"u3cf94880\" data-lake-id=\"u1202c3cb\" id=\"u1202c3cb\"><span data-lake-id=\"uaa011d9c\" id=\"uaa011d9c\" class=\"lake-fontsize-11\">自定义类加载器复写</span><code data-lake-id=\"u5a6ae8df\" id=\"u5a6ae8df\"><span data-lake-id=\"u9cb33a96\" id=\"u9cb33a96\" class=\"lake-fontsize-11\">getPermissions()</span></code><span data-lake-id=\"ub2e7a9f4\" id=\"ub2e7a9f4\" class=\"lake-fontsize-11\">方法的时候，需要调用父类的</span><code data-lake-id=\"u774a989d\" id=\"u774a989d\"><span data-lake-id=\"udeb8be0c\" id=\"udeb8be0c\" class=\"lake-fontsize-11\">getPermissions()</span></code><span data-lake-id=\"u7c705747\" id=\"u7c705747\" class=\"lake-fontsize-11\">方法来获取默认系统规则。否则：</span></li></ul><ul list=\"ubf5add9a\" data-lake-indent=\"2\"><li fid=\"u3cf94880\" data-lake-id=\"ue640de44\" id=\"ue640de44\"><span data-lake-id=\"u78de772f\" id=\"u78de772f\" class=\"lake-fontsize-11\">该自定义类加载器加载的类具有的权限就会完全独立于系统全局策略文件规定的权限</span></li><li fid=\"u3cf94880\" data-lake-id=\"u5f3fb599\" id=\"u5f3fb599\"><span data-lake-id=\"u0e734e4a\" id=\"u0e734e4a\" class=\"lake-fontsize-11\">该类的权限覆盖了这些系统全局文件规定的权限。</span></li></ul><ul list=\"ubf5add9a\" start=\"3\"><li fid=\"u3cf94880\" data-lake-id=\"u3c245605\" id=\"u3c245605\"><span data-lake-id=\"u200fd11e\" id=\"u200fd11e\" class=\"lake-fontsize-11\">对象初始化顺序：</span><span data-lake-id=\"ua235da4d\" id=\"ua235da4d\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">依次是（静态变量、静态初始化块）&gt;（变量、初始化块）&gt; 构造器</span></li></ul><h2 data-lake-id=\"hnWWv\" id=\"hnWWv\"><span data-lake-id=\"ub216b7bc\" id=\"ub216b7bc\">Immutable (不可变类)</span></h2><p data-lake-id=\"u8bcebc03\" id=\"u8bcebc03\"><strong><span data-lake-id=\"u99ca94b4\" id=\"u99ca94b4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">不可变类</span></strong><span data-lake-id=\"u7180e87e\" id=\"u7180e87e\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：</span><span data-lake-id=\"ua97ae4ba\" id=\"ua97ae4ba\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51); background-color: #CEF5F7\">Boolean, Byte, Character, Double, Float, Integer, Long, Short, String, BigDecimal</span><span data-lake-id=\"u9a208381\" id=\"u9a208381\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">。 </span></p><p data-lake-id=\"u15d5e898\" id=\"u15d5e898\"><strong><span data-lake-id=\"u688da7a4\" id=\"u688da7a4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">可变类</span></strong><span data-lake-id=\"u409c604f\" id=\"u409c604f\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。</span></p><h2 data-lake-id=\"xWHPE\" id=\"xWHPE\"><span data-lake-id=\"u60d539be\" id=\"u60d539be\" class=\"lake-fontsize-11\">集合</span></h2><h4 data-lake-id=\"UsAL6\" id=\"UsAL6\"><span data-lake-id=\"u08c480bb\" id=\"u08c480bb\">Size and capacity extension</span></h4><ul list=\"u7de58be0\"><li fid=\"u439e920f\" data-lake-id=\"ua771b6c3\" id=\"ua771b6c3\"><span data-lake-id=\"ua9c1c84b\" id=\"ua9c1c84b\" class=\"lake-fontsize-11\">Initial Capacity：</span><span data-lake-id=\"u7241024c\" id=\"u7241024c\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">ArrayList(10), Vector(10), StringBuilder(16), StringBuffer(16), HashMap(16), HashSet(16)，HashTable(11)</span></li><li fid=\"u439e920f\" data-lake-id=\"ubbccf6f0\" id=\"ubbccf6f0\"><span data-lake-id=\"u95019fb3\" id=\"u95019fb3\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">动态扩容</span></li></ul><ul list=\"u7de58be0\" data-lake-indent=\"1\"><li fid=\"u439e920f\" data-lake-id=\"u736789e0\" id=\"u736789e0\"><span data-lake-id=\"u54ab85aa\" id=\"u54ab85aa\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">HashTable =  2 * size + 1</span></li><li fid=\"u439e920f\" data-lake-id=\"u4b097eb5\" id=\"u4b097eb5\"><span data-lake-id=\"uab3d3419\" id=\"uab3d3419\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">2 * size  : HashMap, vector, Stack, LinkedHashMap</span></li><li fid=\"u439e920f\" data-lake-id=\"u65e89827\" id=\"u65e89827\"><span data-lake-id=\"udbcd7328\" id=\"udbcd7328\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">1.5 * size : ArrayList</span></li></ul><h4 data-lake-id=\"fkIS4\" id=\"fkIS4\"><span data-lake-id=\"u84d4cdab\" id=\"u84d4cdab\">List and Arraye</span></h4><h5 data-lake-id=\"eWz2h\" id=\"eWz2h\"><span data-lake-id=\"u7f8c647e\" id=\"u7f8c647e\">List</span></h5><p data-lake-id=\"uccbe39fe\" id=\"uccbe39fe\"><span data-lake-id=\"u7a2ae2e7\" id=\"u7a2ae2e7\" class=\"lake-fontsize-11\" style=\"color: #303030\">sublist()方法生成的子list与原list存在关联</span></p><ul list=\"u3a030324\"><li fid=\"u38b976f7\" data-lake-id=\"ueadd5b77\" id=\"ueadd5b77\"><span data-lake-id=\"u6b74ca39\" id=\"u6b74ca39\" class=\"lake-fontsize-11\">LinkedList</span></li></ul><ul list=\"u3a030324\" data-lake-indent=\"1\"><li fid=\"u38b976f7\" data-lake-id=\"u8e49eb3c\" id=\"u8e49eb3c\"><span data-lake-id=\"u1294ec18\" id=\"u1294ec18\" class=\"lake-fontsize-11\" style=\"color: #303030\">迭代的时候使用 remove 方法会导致迭代出现预期之外的情况</span></li></ul><h5 data-lake-id=\"LbC9u\" id=\"LbC9u\"><span data-lake-id=\"u80533390\" id=\"u80533390\">Array</span></h5><p data-lake-id=\"u31fbda06\" id=\"u31fbda06\"><span data-lake-id=\"uc5c9386b\" id=\"uc5c9386b\" class=\"lake-fontsize-11\">数组复制：</span><span data-lake-id=\"u58efebe8\" id=\"u58efebe8\" class=\"lake-fontsize-11\" style=\"color: #303030\">System.array.copy (效率最高)</span></p><h4 data-lake-id=\"uo076\" id=\"uo076\"><span data-lake-id=\"u28ba2c6d\" id=\"u28ba2c6d\">Map   </span></h4><ul list=\"u5f78dbb8\"><li fid=\"u85176826\" data-lake-id=\"u17db01be\" id=\"u17db01be\"><span data-lake-id=\"ub33c2781\" id=\"ub33c2781\" class=\"lake-fontsize-11\">HashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"ue67743bb\" id=\"ue67743bb\"><span data-lake-id=\"udf8e8d46\" id=\"udf8e8d46\" class=\"lake-fontsize-11\">不可保证元素的顺序，</span><span data-lake-id=\"u228adfa3\" id=\"u228adfa3\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">key，value 均可为 null</span><span data-lake-id=\"u4c38f870\" id=\"u4c38f870\" class=\"lake-fontsize-11\">。</span></li></ul><ul list=\"u5f78dbb8\" start=\"2\"><li fid=\"u85176826\" data-lake-id=\"u3bb8d057\" id=\"u3bb8d057\"><span data-lake-id=\"u223eff94\" id=\"u223eff94\" class=\"lake-fontsize-11\">LinkedHashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"u1f9a9f75\" id=\"u1f9a9f75\"><span data-lake-id=\"ud4f3673c\" id=\"ud4f3673c\" class=\"lake-fontsize-11\" style=\"color: #303030\">调用 get() 方法会打乱 keySet 的顺序，</span><span data-lake-id=\"u8df9c203\" id=\"u8df9c203\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">将访问的 key 放到最后</span></li><li fid=\"u85176826\" data-lake-id=\"u3a72be12\" id=\"u3a72be12\"><span data-lake-id=\"u660befe0\" id=\"u660befe0\" class=\"lake-fontsize-11\" style=\"color: #303030\">有 removeEldestEntry 方法，可以简单控制 map size</span></li></ul><ul list=\"u5f78dbb8\" start=\"3\"><li fid=\"u85176826\" data-lake-id=\"u257cbecf\" id=\"u257cbecf\"><span data-lake-id=\"u4de18d09\" id=\"u4de18d09\" class=\"lake-fontsize-11\">TreeMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"uc646e172\" id=\"uc646e172\"><span data-lake-id=\"ud86b2dd8\" id=\"ud86b2dd8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">key 不可以为 null</span><span data-lake-id=\"u97f53b9f\" id=\"u97f53b9f\" class=\"lake-fontsize-11\">，value 可以。</span></li></ul><ul list=\"u5f78dbb8\" start=\"4\"><li fid=\"u85176826\" data-lake-id=\"u7d7f9f9a\" id=\"u7d7f9f9a\"><span data-lake-id=\"u33e16ed2\" id=\"u33e16ed2\" class=\"lake-fontsize-11\">ConcurrentHashMap</span></li></ul><ul list=\"u5f78dbb8\" data-lake-indent=\"1\"><li fid=\"u85176826\" data-lake-id=\"ua87398d0\" id=\"ua87398d0\"><span data-lake-id=\"u2e5740ad\" id=\"u2e5740ad\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">key, value 都不可以为 null</span></li><li fid=\"u85176826\" data-lake-id=\"u1a2043d2\" id=\"u1a2043d2\"><span data-lake-id=\"u4340d008\" id=\"u4340d008\" class=\"lake-fontsize-11\">线程安全且全程不需要手动加锁，Map中效率最高。 </span></li></ul><ul list=\"u5f78dbb8\" start=\"5\"><li fid=\"u85176826\" data-lake-id=\"udde09310\" id=\"udde09310\"><span data-lake-id=\"u502ba148\" id=\"u502ba148\" class=\"lake-fontsize-11\">注：</span><span data-lake-id=\"u1d2cc3d8\" id=\"u1d2cc3d8\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">HashTable 中的 key, value 也都不可以为 null</span></li></ul><h2 data-lake-id=\"lAnxE\" id=\"lAnxE\"><span data-lake-id=\"uc2e633f2\" id=\"uc2e633f2\">Reflection</span></h2><p data-lake-id=\"u45ec183e\" id=\"u45ec183e\"><span data-lake-id=\"u340eae2e\" id=\"u340eae2e\" class=\"lake-fontsize-11\">反射机制允许程序获取</span><span data-lake-id=\"ub68a334e\" id=\"ub68a334e\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">指定对象的类的相关方法与字段</span><span data-lake-id=\"ub1b12f56\" id=\"ub1b12f56\" class=\"lake-fontsize-11\">。</span></p><ul list=\"u0367460b\"><li fid=\"u9b16258b\" data-lake-id=\"ud5e9fa17\" id=\"ud5e9fa17\"><span data-lake-id=\"u91f36f6d\" id=\"u91f36f6d\" class=\"lake-fontsize-11\" style=\"color: #303030\">getDeclaredFields()：获取所有声明的成员变量，</span><span data-lake-id=\"u665f7537\" id=\"u665f7537\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">包括 private</span></li><li fid=\"u9b16258b\" data-lake-id=\"u0a7b3a43\" id=\"u0a7b3a43\"><span data-lake-id=\"u64e2fb0a\" id=\"u64e2fb0a\" class=\"lake-fontsize-11\" style=\"color: #303030\">getFields()：</span><span data-lake-id=\"u42c44eaf\" id=\"u42c44eaf\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">获取所有的public变量</span><span data-lake-id=\"u9d5ec89f\" id=\"u9d5ec89f\" class=\"lake-fontsize-11\" style=\"color: #303030\">，包括父类的 public 变量。</span></li><li fid=\"u9b16258b\" data-lake-id=\"u57a1b5e7\" id=\"u57a1b5e7\"><span data-lake-id=\"u90ab798a\" id=\"u90ab798a\" class=\"lake-fontsize-11\">getDeclaredMethods(): 获取所有声明的成员方法。</span></li><li fid=\"u9b16258b\" data-lake-id=\"u049e4836\" id=\"u049e4836\"><span data-lake-id=\"ufa22dadd\" id=\"ufa22dadd\" class=\"lake-fontsize-11\">getDeclaredConstructors(): 获取所有构造函数。</span></li></ul><h2 data-lake-id=\"Zhqnu\" id=\"Zhqnu\"><span data-lake-id=\"uc8d3c67d\" id=\"uc8d3c67d\">注解 （Annotation）</span></h2><h3 data-lake-id=\"EfOIN\" id=\"EfOIN\"><span data-lake-id=\"u75d7289e\" id=\"u75d7289e\">元注解 （java.annotations）</span></h3><p data-lake-id=\"ub87963b9\" id=\"ub87963b9\"><span data-lake-id=\"u7655d5cd\" id=\"u7655d5cd\" class=\"lake-fontsize-11\">@Documented ：该注解标记的内容会被 JavaDoc 工具提取成文档</span></p><p data-lake-id=\"ube36e4bf\" id=\"ube36e4bf\"><span data-lake-id=\"u6aadbb10\" id=\"u6aadbb10\" class=\"lake-fontsize-11\">@Target ：用于注解一个注解的使用范围，用成员变量 value 来指定范围</span></p><p data-lake-id=\"u7d6c4248\" id=\"u7d6c4248\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F34997132%2F1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png%22%2C%22taskId%22%3A%22ucb5f28f2-9757-4445-8b53-2bb833eec56%22%2C%22clientId%22%3A%22u6a707b01-3786-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A447%2C%22height%22%3A293%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A76157%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A894%2C%22originHeight%22%3A586%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A548.2695%2C%22y%22%3A43.16687%2C%22width%22%3A55.31680000000006%2C%22height%22%3A29.911789999999996%2C%22text%22%3A%22%E8%AF%B4%E6%98%8E%22%7D%2C%7B%22x%22%3A127.79424%2C%22y%22%3A43.841724%2C%22width%22%3A57.17833999999999%2C%22height%22%3A28.433256%2C%22text%22%3A%22%E5%90%8D%E7%A7%B0%22%7D%2C%7B%22x%22%3A295.35092%2C%22y%22%3A112.95997%2C%22width%22%3A169.01348000000002%2C%22height%22%3A29.26616999999999%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A35.92499%2C%22y%22%3A115.32286%2C%22width%22%3A214.95605%2C%22height%22%3A23.21486%2C%22text%22%3A%22CONSTRUCTOR%22%7D%2C%7B%22x%22%3A295.21356%2C%22y%22%3A178.91579%2C%22width%22%3A374.71808000000004%2C%22height%22%3A28.628860000000003%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F(%E5%8C%85%E6%8B%AC%E6%9E%9A%E4%B8%BE%E5%B8%B8%E9%87%8F)%22%7D%2C%7B%22x%22%3A36.683926%2C%22y%22%3A182.22667%2C%22width%22%3A76.045704%2C%22height%22%3A22.722699999999975%2C%22text%22%3A%22FIELD%22%7D%2C%7B%22x%22%3A295.98126%2C%22y%22%3A244.69003%2C%22width%22%3A167.77121%2C%22height%22%3A28.92256999999998%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%22%7D%2C%7B%22x%22%3A36.096848%2C%22y%22%3A247.64597%2C%22width%22%3A90.21050199999999%2C%22height%22%3A23.356469999999973%2C%22text%22%3A%22LOCAL%22%7D%2C%7B%22x%22%3A139.6032%2C%22y%22%3A247.58203%2C%22width%22%3A135.28184000000002%2C%22height%22%3A23.925370000000015%2C%22text%22%3A%22VARIABLE%22%7D%2C%7B%22x%22%3A294.90924%2C%22y%22%3A310.4102%2C%22width%22%3A113.91431%2C%22height%22%3A29.013450000000034%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A36.28632%2C%22y%22%3A314.24078%2C%22width%22%3A121.62112%2C%22height%22%3A22.650090000000034%2C%22text%22%3A%22METHOD%22%7D%2C%7B%22x%22%3A295.73712%2C%22y%22%3A377.51422%2C%22width%22%3A82.58895999999999%2C%22height%22%3A28.249179999999967%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E5%8C%85%22%7D%2C%7B%22x%22%3A37.470726%2C%22y%22%3A380.4243%2C%22width%22%3A131.03666399999997%2C%22height%22%3A23.145620000000008%2C%22text%22%3A%22PACKAGE%22%7D%2C%7B%22x%22%3A295.69348%2C%22y%22%3A442.583%2C%22width%22%3A358.02807999999993%2C%22height%22%3A28.912269999999978%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0(JDK%201.8%E6%96%B0%E5%A2%9E)%22%7D%2C%7B%22x%22%3A37.30122%2C%22y%22%3A445.19684%2C%22width%22%3A167.52719%2C%22height%22%3A23.701509999999985%2C%22text%22%3A%22PARAMETER%22%7D%2C%7B%22x%22%3A296.0174%2C%22y%22%3A507.20917%2C%22width%22%3A561.9692%2C%22height%22%3A32.00972999999999%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E7%B1%BB%2C%E6%8E%A5%E5%8F%A3(%E5%8C%85%E6%8B%AC%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B)%E6%88%96ENUM%20%E5%A3%B0%E6%98%8E%22%7D%2C%7B%22x%22%3A37.865868%2C%22y%22%3A510.538%2C%22width%22%3A69.609466%2C%22height%22%3A24.314359999999965%2C%22text%22%3A%22TYPE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22ue809fee9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ud760c720\" id=\"ud760c720\" style=\"text-align: left\"><span data-lake-id=\"u64a7ee4a\" id=\"u64a7ee4a\">@Rentation 用于描述注解的生命周期</span></p><ul list=\"u21bf916c\"><li fid=\"ud65e9775\" data-lake-id=\"udd2536df\" id=\"udd2536df\" style=\"text-align: left\"><span data-lake-id=\"udc9b67fb\" id=\"udc9b67fb\">SOURCE: 仅在源文件中有效</span></li><li fid=\"ud65e9775\" data-lake-id=\"u593a610c\" id=\"u593a610c\" style=\"text-align: left\"><span data-lake-id=\"ue28324d3\" id=\"ue28324d3\">CLASS：在 Class 文件中有效</span></li><li fid=\"ud65e9775\" data-lake-id=\"u3b993092\" id=\"u3b993092\" style=\"text-align: left\"><span data-lake-id=\"udc007c5a\" id=\"udc007c5a\">RUNTIME：在运行中有效</span></li></ul><p data-lake-id=\"ub0eecd68\" id=\"ub0eecd68\"><span data-lake-id=\"ub310fe7c\" id=\"ub310fe7c\">@Inherited 表示该注解可以被继承</span></p><p data-lake-id=\"u352cdb27\" id=\"u352cdb27\"><span data-lake-id=\"u46aa5dc6\" id=\"u46aa5dc6\">@Native 修饰成员变量，表示该变量可以被本地代码引用</span></p><h3 data-lake-id=\"TfZV1\" id=\"TfZV1\"><span data-lake-id=\"ue64fe88b\" id=\"ue64fe88b\">其他注解（java.lang）</span></h3><ul list=\"ueb0b9f92\"><li fid=\"u2c235565\" data-lake-id=\"uda215c3f\" id=\"uda215c3f\"><span data-lake-id=\"ued674619\" id=\"ued674619\" class=\"lake-fontsize-11\">@Override</span></li><li fid=\"u2c235565\" data-lake-id=\"u0f47623a\" id=\"u0f47623a\"><span data-lake-id=\"udf3f0432\" id=\"udf3f0432\" class=\"lake-fontsize-11\" style=\"color: #303030\">@Deprecated</span></li><li fid=\"u2c235565\" data-lake-id=\"u5b6ec954\" id=\"u5b6ec954\"><span data-lake-id=\"u865b8733\" id=\"u865b8733\" class=\"lake-fontsize-11\" style=\"color: #303030\">@SuppressWarnings</span></li></ul><h3 data-lake-id=\"TqcJ8\" id=\"TqcJ8\"><span data-lake-id=\"ud803bcf9\" id=\"ud803bcf9\">自定义注解</span></h3><p data-lake-id=\"ubbf5f361\" id=\"ubbf5f361\"><span data-lake-id=\"u2af32399\" id=\"u2af32399\" class=\"lake-fontsize-11\">可以开发一个注解类，但是需要使用</span><span data-lake-id=\"ud74c1c2f\" id=\"ud74c1c2f\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\"> @interface </span><span data-lake-id=\"ucf95e3f6\" id=\"ucf95e3f6\" class=\"lake-fontsize-11\">关键字来声明。</span></p><h2 data-lake-id=\"xPHqK\" id=\"xPHqK\"><span data-lake-id=\"ueb71253e\" id=\"ueb71253e\">Exception 异常</span></h2><h3 data-lake-id=\"wpBkX\" id=\"wpBkX\"><span data-lake-id=\"u1352423a\" id=\"u1352423a\">敏感异常</span></h3><ul list=\"u3b63e9a5\"><li fid=\"u71b49a94\" data-lake-id=\"u8b538b02\" id=\"u8b538b02\"><span data-lake-id=\"ucbcf1d8f\" id=\"ucbcf1d8f\" class=\"lake-fontsize-11\" style=\"color: #303030\">InsufficientResourcesException：服务器资源不足，可能会造成</span><span data-lake-id=\"uab415ca3\" id=\"uab415ca3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u067cfe4c\" id=\"u067cfe4c\"><span data-lake-id=\"uc5c21969\" id=\"uc5c21969\" class=\"lake-fontsize-11\" style=\"color: #303030\">OutOfMemoryError：</span><span data-lake-id=\"u28ba55a2\" id=\"u28ba55a2\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u2999c95b\" id=\"u2999c95b\"><span data-lake-id=\"ud688f100\" id=\"ud688f100\" class=\"lake-fontsize-11\" style=\"color: #303030\">StackOverflowError：</span><span data-lake-id=\"ua246dbb3\" id=\"ua246dbb3\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">dos攻击</span></li><li fid=\"u71b49a94\" data-lake-id=\"u387a0413\" id=\"u387a0413\"><span data-lake-id=\"uda32dd5c\" id=\"uda32dd5c\" class=\"lake-fontsize-11\" style=\"color: #303030\">JarException：</span><span data-lake-id=\"u7bc83fde\" id=\"u7bc83fde\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">泄露文件系统结构</span></li><li fid=\"u71b49a94\" data-lake-id=\"u4ef035b0\" id=\"u4ef035b0\"><span data-lake-id=\"u61be58b1\" id=\"u61be58b1\" class=\"lake-fontsize-11\" style=\"color: #303030\">FileNotFoundException：</span><span data-lake-id=\"u5789cb28\" id=\"u5789cb28\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">泄露文件系统结构</span><span data-lake-id=\"u44e930c3\" id=\"u44e930c3\" class=\"lake-fontsize-11\" style=\"color: #303030\">和</span><span data-lake-id=\"ub475d44b\" id=\"ub475d44b\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">文件名列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ucdea2b40\" id=\"ucdea2b40\"><span data-lake-id=\"uc6c0add8\" id=\"uc6c0add8\" class=\"lake-fontsize-11\" style=\"color: #303030\">SQLException：</span><span data-lake-id=\"u410ccd69\" id=\"u410ccd69\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #E8F7CF\">暴露数据库结构</span><span data-lake-id=\"u0058a806\" id=\"u0058a806\" class=\"lake-fontsize-11\" style=\"color: #303030\">，并造成</span><span data-lake-id=\"u7c7d2301\" id=\"u7c7d2301\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">用户名列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ufef1329f\" id=\"ufef1329f\"><span data-lake-id=\"u1d33333e\" id=\"u1d33333e\" class=\"lake-fontsize-11\" style=\"color: #303030\">MissingResourceException，造成</span><span data-lake-id=\"u552473dd\" id=\"u552473dd\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">资源列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"u24329c04\" id=\"u24329c04\"><span data-lake-id=\"uf632451d\" id=\"uf632451d\" class=\"lake-fontsize-11\" style=\"color: #303030\">NotOwnerException：</span><span data-lake-id=\"u992e540e\" id=\"u992e540e\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">所有人列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"ud1428474\" id=\"ud1428474\"><span data-lake-id=\"u2c6f27f3\" id=\"u2c6f27f3\" class=\"lake-fontsize-11\" style=\"color: #303030\">BindException：当不信任客户端能够选择服务器端口时造成</span><span data-lake-id=\"uc67beeb0\" id=\"uc67beeb0\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">开放端口列举</span></li><li fid=\"u71b49a94\" data-lake-id=\"u37e5d1a9\" id=\"u37e5d1a9\"><span data-lake-id=\"u32ac8f7c\" id=\"u32ac8f7c\" class=\"lake-fontsize-11\" style=\"color: #303030\">ConcurrentModificationException：可能提供线程不安全的代码信息</span></li></ul><h3 data-lake-id=\"x4qxD\" id=\"x4qxD\"><span data-lake-id=\"uf97a05ea\" id=\"uf97a05ea\">是否受检</span></h3><p data-lake-id=\"uecd0b7d3\" id=\"uecd0b7d3\"><span data-lake-id=\"u4297dabf\" id=\"u4297dabf\" class=\"lake-fontsize-11\">受检异常需要在代码中明确使用 throw 抛出异常，否则编译不通过。</span></p><ul list=\"u97c0fda3\"><li fid=\"u4586e2e8\" data-lake-id=\"uccad5d6a\" id=\"uccad5d6a\"><span data-lake-id=\"u026e89b9\" id=\"u026e89b9\" class=\"lake-fontsize-11\">受检：</span><span data-lake-id=\"ub12ec151\" id=\"ub12ec151\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">FileNotFoundException, IOException, SQLException，ClassNotFoundException, InterruptedException, NoSuchFieldException</span></li><li fid=\"u4586e2e8\" data-lake-id=\"u4ce067f9\" id=\"u4ce067f9\"><span data-lake-id=\"u484f954e\" id=\"u484f954e\" class=\"lake-fontsize-11\">非受检：</span><span data-lake-id=\"u07d52c3b\" id=\"u07d52c3b\" class=\"lake-fontsize-11\" style=\"color: #303030\">NullPointerException, ClassCastException, IllegalArgumentException, ArrayIndexsOutOfBoundsException, ArithmeticException</span></li></ul><h3 data-lake-id=\"wdKOt\" id=\"wdKOt\"><span data-lake-id=\"u1f8d13af\" id=\"u1f8d13af\" style=\"color: #303030\">异常处理</span></h3><ul list=\"ue5b82e3a\"><li fid=\"u2d417bf3\" data-lake-id=\"ue863f578\" id=\"ue863f578\"><span data-lake-id=\"u893a0c3b\" id=\"u893a0c3b\" class=\"lake-fontsize-11\" style=\"background-color: #FBDE28\">不要直接捕获基类 Exception 来处理异常</span><span data-lake-id=\"uc8b4da73\" id=\"uc8b4da73\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">，可以使用并语句明确指出需要捕获的异常</span></li><li fid=\"u2d417bf3\" data-lake-id=\"uff0524fd\" id=\"uff0524fd\"><span data-lake-id=\"u1cc153db\" id=\"u1cc153db\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">打开文件流有异常，必须进行处理(输入流，输出流，错误流)</span><span data-lake-id=\"u003be3c3\" id=\"u003be3c3\" class=\"lake-fontsize-11\">；</span><span data-lake-id=\"u4a405037\" id=\"u4a405037\" class=\"lake-fontsize-11\" style=\"background-color: #E8F7CF\">在 finally 语句中关闭流，抛出异常时可以忽略异常</span><span data-lake-id=\"u9a02e81f\" id=\"u9a02e81f\" class=\"lake-fontsize-11\">，仅记录日志。</span></li><li fid=\"u2d417bf3\" data-lake-id=\"ud1c7dc52\" id=\"ud1c7dc52\"><span data-lake-id=\"u417a136d\" id=\"u417a136d\" class=\"lake-fontsize-11\">不要直接抛出 NullPointerException 异常，而是使用空引用判断。</span></li></ul><h2 data-lake-id=\"W0BfX\" id=\"W0BfX\"><span data-lake-id=\"u310cf642\" id=\"u310cf642\">GC</span></h2><p data-lake-id=\"ua2161da8\" id=\"ua2161da8\"><span data-lake-id=\"uddc8c45e\" id=\"uddc8c45e\" class=\"lake-fontsize-11\" style=\"color: #000000\">垃圾回收（GC）是由 Java 虚拟机（JVM）垃圾回收器提供的一种对内存回收的一种机制，它一般会在内存空闲或者内存占用过高的时候对那些没有任何引用的对象不定时地进行回收。</span></p><h3 data-lake-id=\"Lp6x5\" id=\"Lp6x5\"><span data-lake-id=\"ub25d9aef\" id=\"ub25d9aef\" style=\"color: #000000\">GC使用</span></h3><ul list=\"u1be82eff\"><li fid=\"uf50f4db8\" data-lake-id=\"u127253bc\" id=\"u127253bc\"><span data-lake-id=\"u45f884db\" id=\"u45f884db\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">在频率/周期性的逻辑中更要尽量</span><span data-lake-id=\"u441b245a\" id=\"u441b245a\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28\">避免主动GC的调用</span><span data-lake-id=\"u9e46e305\" id=\"u9e46e305\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">。因为</span><span data-lake-id=\"u4539c54c\" id=\"u4539c54c\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #CEF5F7\">在 GC 过程中的某些阶段程序会完全停顿</span><span data-lake-id=\"uda57dbf0\" id=\"uda57dbf0\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">，这会让程序失去响应，对系统造成非常大的风险。</span></li><li fid=\"uf50f4db8\" data-lake-id=\"ueb154946\" id=\"ueb154946\"><span data-lake-id=\"u7f2a4484\" id=\"u7f2a4484\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">即使调用主动GC方法后，</span><span data-lake-id=\"u04f84afc\" id=\"u04f84afc\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46); background-color: #FBDE28\">系统也不会立即进行垃圾回收操作</span><span data-lake-id=\"u8d8763ef\" id=\"u8d8763ef\" class=\"lake-fontsize-11\" style=\"color: rgb(36, 41, 46)\">。</span></li></ul><h3 data-lake-id=\"jKVTV\" id=\"jKVTV\"><span data-lake-id=\"uaf86c0e8\" id=\"uaf86c0e8\">GC算法</span></h3><ul list=\"u3dafdd16\"><li fid=\"uaf1e6b7f\" data-lake-id=\"u52773171\" id=\"u52773171\"><span data-lake-id=\"ud0c7e814\" id=\"ud0c7e814\" class=\"lake-fontsize-11\" style=\"color: #303030\">后台运算而不需要太多交互的任务</span></li></ul><ul list=\"u3dafdd16\" data-lake-indent=\"1\"><li fid=\"uaf1e6b7f\" data-lake-id=\"ub5711224\" id=\"ub5711224\"><span data-lake-id=\"u43d5cb59\" id=\"u43d5cb59\" class=\"lake-fontsize-11\" style=\"color: #303030\">Parallel Scavenge（吞吐量优先）</span></li></ul><ul list=\"u3dafdd16\" start=\"2\"><li fid=\"uaf1e6b7f\" data-lake-id=\"u377ba148\" id=\"u377ba148\"><span data-lake-id=\"ud56ac57a\" id=\"ud56ac57a\" class=\"lake-fontsize-11\" style=\"color: #303030\">对响应速度有较高要求的服务</span></li></ul><ul list=\"u3dafdd16\" data-lake-indent=\"1\"><li fid=\"uaf1e6b7f\" data-lake-id=\"uc1e53549\" id=\"uc1e53549\"><span data-lake-id=\"u2e85ce52\" id=\"u2e85ce52\" class=\"lake-fontsize-11\" style=\"color: #303030\">CMS（响应速度优先）</span></li><li fid=\"uaf1e6b7f\" data-lake-id=\"u3852f45b\" id=\"u3852f45b\"><span data-lake-id=\"u30688019\" id=\"u30688019\" class=\"lake-fontsize-11\" style=\"color: #303030\">G1（响应速度优先）</span></li><li fid=\"uaf1e6b7f\" data-lake-id=\"uccc79f9c\" id=\"uccc79f9c\"><span data-lake-id=\"u919618d3\" id=\"u919618d3\" class=\"lake-fontsize-11\" style=\"color: #303030\">ZGC（STW小于10ms）</span></li></ul><h2 data-lake-id=\"kdGpG\" id=\"kdGpG\"><span data-lake-id=\"ua06c4458\" id=\"ua06c4458\">编译</span></h2><p data-lake-id=\"ud20bd39a\" id=\"ud20bd39a\"><span data-lake-id=\"u14f6a470\" id=\"u14f6a470\" class=\"lake-fontsize-11\">使用 javac 进行编译时，包含以下几个过程：</span></p><ul list=\"u215ba261\"><li fid=\"u1439cfb5\" data-lake-id=\"u6d0588eb\" id=\"u6d0588eb\"><span data-lake-id=\"u3111e1aa\" id=\"u3111e1aa\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">语义分析及生成字节码</span></li><li fid=\"u1439cfb5\" data-lake-id=\"ua8c98911\" id=\"ua8c98911\"><span data-lake-id=\"u8481d471\" id=\"u8481d471\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">词法分析及填充符号表</span></li><li fid=\"u1439cfb5\" data-lake-id=\"u27b47a76\" id=\"u27b47a76\"><span data-lake-id=\"u0d37d0f4\" id=\"u0d37d0f4\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">注解处理</span></li></ul><h3 data-lake-id=\"W8KiR\" id=\"W8KiR\"><span data-lake-id=\"u8205e253\" id=\"u8205e253\" style=\"color: #303030\">JVM 代码优化</span></h3><p data-lake-id=\"u96451b04\" id=\"u96451b04\"><span data-lake-id=\"ubb863f4e\" id=\"ubb863f4e\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77)\">JVM 在对代码执行的优化可分为运行时（runtime）优化和即时编译器（JIT）优化。运行时优化主要是解释执行和动态编译通用的一些机制，</span><span data-lake-id=\"ua8cd577f\" id=\"ua8cd577f\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77); background-color: #CEF5F7\">比如说模版解释器、内联缓存（inline cache，用于优化虚方法调用的动态绑定）</span><span data-lake-id=\"ud353f37f\" id=\"ud353f37f\" class=\"lake-fontsize-11\" style=\"color: rgb(77, 77, 77)\">。</span></p><ul list=\"u376551b5\"><li fid=\"u4b5cf318\" data-lake-id=\"u4dc2a0d2\" id=\"u4dc2a0d2\"><span data-lake-id=\"u5b4d1d7b\" id=\"u5b4d1d7b\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JITTest.doubleIndex被内联</span></li><li fid=\"u4b5cf318\" data-lake-id=\"u82d979ce\" id=\"u82d979ce\"><span data-lake-id=\"ua00d6a66\" id=\"ua00d6a66\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">JITTest.doubleIndex会被编译成机器码执行</span></li></ul><h2 data-lake-id=\"Q5ABo\" id=\"Q5ABo\"><span data-lake-id=\"uea51bb57\" id=\"uea51bb57\">序列化</span></h2><p data-lake-id=\"u3bc5b6d2\" id=\"u3bc5b6d2\"><span data-lake-id=\"ue69aa5b2\" id=\"ue69aa5b2\" class=\"lake-fontsize-11\" style=\"color: rgb(51, 51, 51)\">Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列用于网络传输。</span><span data-lake-id=\"uf7c253c7\" id=\"uf7c253c7\" class=\"lake-fontsize-10\" style=\"color: rgb(51, 51, 51)\">但是，</span><span data-lake-id=\"udd44cdbd\" id=\"udd44cdbd\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #CEF5F7\">序列化只能保存对象的非静态成员变量</span><span data-lake-id=\"u1bc76d49\" id=\"u1bc76d49\" class=\"lake-fontsize-11\" style=\"color: #303030\">，</span><span data-lake-id=\"u55159e68\" id=\"u55159e68\" class=\"lake-fontsize-11\" style=\"color: #303030; background-color: #FBDE28\">不能保存任何的成员方法和静态的成员变量</span><span data-lake-id=\"u32276ecc\" id=\"u32276ecc\" class=\"lake-fontsize-11\" style=\"color: #303030\">。</span></p><h3 data-lake-id=\"Gqv8s\" id=\"Gqv8s\"><span data-lake-id=\"u2d93e0af\" id=\"u2d93e0af\" style=\"color: #303030\">安全问题</span></h3><ul list=\"u4399787e\"><li fid=\"u9cf9e244\" data-lake-id=\"u7f6ef016\" id=\"u7f6ef016\"><span data-lake-id=\"u74cc34d4\" id=\"u74cc34d4\" class=\"lake-fontsize-11\">可以通过定义serialPersistentFields数组字段来确保敏感字段被排除在序列化之外，除此之外，也可以通过自定义</span><span data-lake-id=\"u76d9c189\" id=\"u76d9c189\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\">writeObject()、writeReplace()、writeExternal()</span><span data-lake-id=\"ue3ee07ac\" id=\"ue3ee07ac\" class=\"lake-fontsize-11\">这些函数，不将包含敏感信息的字段写到序列化字节流中。</span></li><li fid=\"u9cf9e244\" data-lake-id=\"uccf3f5d1\" id=\"uccf3f5d1\"><span data-lake-id=\"ue3f323fe\" id=\"ue3f323fe\" class=\"lake-fontsize-11\">通过将敏感字段声明为</span><span data-lake-id=\"u168744c4\" id=\"u168744c4\" class=\"lake-fontsize-11\" style=\"background-color: #CEF5F7\"> transient</span><span data-lake-id=\"u91b71dc1\" id=\"u91b71dc1\" class=\"lake-fontsize-11\">，可以使它们不包括在依照默认的序列化机制应该被序列化的字段列表中。</span></li></ul>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-02-13T15:43:58.000Z",
    "deleted_at": null,
    "created_at": "2023-01-28T07:34:43.000Z",
    "updated_at": "2023-02-13T15:43:58.000Z",
    "published_at": "2023-02-13T15:43:58.000Z",
    "first_published_at": "2023-01-28T07:36:56.602Z",
    "word_count": 2178,
    "cover": "https://cdn.nlark.com/yuque/0/2023/png/34997132/1675699015804-e6bc1468-16c1-4601-9bcd-e3a4ee4717d5.png",
    "description": "基本数据类型byte：字节，1 byte，8 bits （-128~127）char：字符，2 bytes，如 '\\n', '\\u0012', '我'字符是字节通过不同编码的包装字符向字节转换时，需要注意编码问题short：短整型，2 bytesint：整型，4 byteslong：长整型，8...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]